// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package remotesigner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SignatureDispatcherClient is the client API for SignatureDispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignatureDispatcherClient interface {
	SignMilestone(ctx context.Context, in *SignMilestoneRequest, opts ...grpc.CallOption) (*SignMilestoneResponse, error)
}

type signatureDispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewSignatureDispatcherClient(cc grpc.ClientConnInterface) SignatureDispatcherClient {
	return &signatureDispatcherClient{cc}
}

func (c *signatureDispatcherClient) SignMilestone(ctx context.Context, in *SignMilestoneRequest, opts ...grpc.CallOption) (*SignMilestoneResponse, error) {
	out := new(SignMilestoneResponse)
	err := c.cc.Invoke(ctx, "/dispatcher.SignatureDispatcher/SignMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignatureDispatcherServer is the server API for SignatureDispatcher service.
// All implementations must embed UnimplementedSignatureDispatcherServer
// for forward compatibility
type SignatureDispatcherServer interface {
	SignMilestone(context.Context, *SignMilestoneRequest) (*SignMilestoneResponse, error)
	mustEmbedUnimplementedSignatureDispatcherServer()
}

// UnimplementedSignatureDispatcherServer must be embedded to have forward compatible implementations.
type UnimplementedSignatureDispatcherServer struct {
}

func (UnimplementedSignatureDispatcherServer) SignMilestone(context.Context, *SignMilestoneRequest) (*SignMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMilestone not implemented")
}
func (UnimplementedSignatureDispatcherServer) mustEmbedUnimplementedSignatureDispatcherServer() {}

// UnsafeSignatureDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignatureDispatcherServer will
// result in compilation errors.
type UnsafeSignatureDispatcherServer interface {
	mustEmbedUnimplementedSignatureDispatcherServer()
}

func RegisterSignatureDispatcherServer(s grpc.ServiceRegistrar, srv SignatureDispatcherServer) {
	s.RegisterService(&_SignatureDispatcher_serviceDesc, srv)
}

func _SignatureDispatcher_SignMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureDispatcherServer).SignMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.SignatureDispatcher/SignMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureDispatcherServer).SignMilestone(ctx, req.(*SignMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignatureDispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcher.SignatureDispatcher",
	HandlerType: (*SignatureDispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignMilestone",
			Handler:    _SignatureDispatcher_SignMilestone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dispatcher.proto",
}
