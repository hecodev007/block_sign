package controller

import (
	"encoding/hex"
	"fmt"
	"ghostSign/api/models"
	"github.com/btcsuite/btcd/chaincfg"
	"github.com/btcsuite/btcutil"
	"github.com/gin-gonic/gin"
	"github.com/iqoption/zecutil"
	"golang.org/x/crypto/ripemd160"
	"net/http"
	"github.com/btcsuite/btcutil/base58"

)

type ZcashController struct {
}

func (this *ZcashController) Router(r *gin.Engine) {
	group := r.Group("/v1/zcash")
	{
		group.POST("/createaddr", this.createAddress)
		group.POST("/sign", this.sign)
		group.GET("/test", this.test)
	}
}

func (this *ZcashController) NewError(ctx *gin.Context, errMsg string) {
	ctx.JSON(http.StatusOK, gin.H{
		"code":    -1,
		"message": errMsg,
	})
}
func (this *ZcashController) createAddress(ctx *gin.Context) {

	var params = new(CreateAddressParams)
	if err := ctx.ShouldBindJSON(params); err != nil {
		this.NewError(ctx, err.Error())
		return
	}

	var returns = &ZcashCreateAddressReturns{
		Data: ZcashCreateAddressReturns_data{CreateAddressParams: *params}}

	var err error
	if returns.Data.Address, err = new(models.ZcashModel).NewAccount(params.Num, params.MchId, params.OrderId); err != nil {
		this.NewError(ctx, err.Error())
		return
	}
	ctx.JSON(http.StatusOK, returns)
	return
}

func (this *ZcashController) sign(ctx *gin.Context) {
	var params = new(ZcashSignParams)
	if err := ctx.ShouldBindJSON(params); err != nil {
		this.NewError(ctx, err.Error()+"error")
		return
	}
	var returns = &ZcashSignReturns{SignHeader: params.SignHeader}
	if rawTx, err := new(models.ZcashModel).SignTx(params.MchId, params.Data); err != nil {
		this.NewError(ctx, err.Error())
		return
	} else {
		returns.Data = rawTx
	}

	ctx.JSON(http.StatusOK, returns)
	return
}
func (this *ZcashController) test(ctx *gin.Context) {
		//"address": "GeazzFGwzRcLminwTrWxfXxLc7Ga8TMsUG",
		//"privkey": "RZJ9ky62feWgLLNjvynFbhtf1pgdpXkEUy68rpGCviMuNzevUipx"
		//"pubkey": "03ed43dad72976c2b495e1ab9c6ad788e3952e397d602f7bc83453b631a24b224d"
//	{
//		"address": "GeazzFGwzRcLminwTrWxfXxLc7Ga8TMsUG",
//		"scriptPubKey": "76a914e38837bd9cdd13c1d1ac42fe9a21258c2c6ac58288ac",
//		"from_ext_address_id": "XV6Ak51EPxndRfJkNueL4ZjFNc2ScQmde7",
//		"path": "m/0/1",
//		"ismine": true,
//		"solvable": true,
//		"desc": "pkh([e38837bd]03ed43dad72976c2b495e1ab9c6ad788e3952e397d602f7bc83453b631a24b224d)#rxc009nw",
//		"iswatchonly": false,
//		"isscript": false,
//		"iswitness": false,
//		"pubkey": "03ed43dad72976c2b495e1ab9c6ad788e3952e397d602f7bc83453b631a24b224d",
//		"iscompressed": true,
//		"label": "",
//		"ischange": false,
//		"labels": [
//	{
//		"name": "",
//		"purpose": "receive"
//	}
//]
//	}
		wif,err :=btcutil.DecodeWIF("RZJ9ky62feWgLLNjvynFbhtf1pgdpXkEUy68rpGCviMuNzevUipx")
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		pkHash := wif.PrivKey.PubKey().SerializeCompressed()
		fmt.Printf("%v\n",hex.EncodeToString(pkHash))
		fmt.Println("hash160",hex.EncodeToString(btcutil.Hash160(pkHash[:ripemd160.Size])))

		var addrPubKey *btcutil.AddressPubKey

		var decoded = base58.Decode("GeazzFGwzRcLminwTrWxfXxLc7Ga8TMsUG")
		fmt.Println("GHOt160",hex.EncodeToString(decoded))
		//for st:=0;st<256;st++ {
		//	fmt.Println("st:",st)
		//	chaincfg.MainNetParams.PubKeyHashAddrID = byte(st)
			if addrPubKey, err = btcutil.NewAddressPubKey(pkHash, &chaincfg.MainNetParams); err != nil {
				fmt.Println(err.Error())
				return
			}

			params := []byte{0x1C}
			//for i := 0; i < 256; i++ {
			//	for j := 0; j < 256; j++ {
					params[0] = byte(int8(38))
					fmt.Println(hex.EncodeToString(btcutil.Hash160(addrPubKey.ScriptAddress())[:ripemd160.Size]))
					address, err := zecutil.EncodeHash(btcutil.Hash160(addrPubKey.ScriptAddress())[:ripemd160.Size], params)
					if err != nil {
						fmt.Println(err.Error())
					}
					if address[0:1] == "G" {
						//fmt.Println(address)
					}
					fmt.Println(address)
					if address == "GeazzFGwzRcLminwTrWxfXxLc7Ga8TMsUG" {
						fmt.Println(address)
						ctx.JSON(http.StatusOK, address)
						return
					}
			//	}
			//}
	//	}

	ctx.JSON(http.StatusOK, "end")

}
