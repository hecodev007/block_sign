{"Name":"Indices","HasStorage":true,"Storage":{"Prefix":"Indices","Items":[{"Name":"Accounts","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountIndex","Value":"(T::AccountId, BalanceOf\u003cT\u003e, bool)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The lookup from index to account."]}]},"HasCalls":true,"Calls":[{"Name":"claim","Args":[{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Assign an previously unassigned index.",""," Payment: `Deposit` is reserved from the sender account.",""," The dispatch origin for this call must be _Signed_.",""," - `index`: the index to be claimed. This must not be in use.",""," Emits `IndexAssigned` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - One reserve operation."," - One event."," -------------------"," - DB Weight: 1 Read/Write (Accounts)"," # \u003c/weight\u003e"]},{"Name":"transfer","Args":[{"Name":"new","Type":"T::AccountId"},{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Assign an index already owned by the sender to another account. The balance reservation"," is effectively transferred to the new account.",""," The dispatch origin for this call must be _Signed_.",""," - `index`: the index to be re-assigned. This must be owned by the sender."," - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",""," Emits `IndexAssigned` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - One transfer operation."," - One event."," -------------------"," - DB Weight:","    - Reads: Indices Accounts, System Account (recipient)","    - Writes: Indices Accounts, System Account (recipient)"," # \u003c/weight\u003e"]},{"Name":"free","Args":[{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Free up an index owned by the sender.",""," Payment: Any previous deposit placed for the index is unreserved in the sender account.",""," The dispatch origin for this call must be _Signed_ and the sender must own the index.",""," - `index`: the index to be freed. This must be owned by the sender.",""," Emits `IndexFreed` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - One reserve operation."," - One event."," -------------------"," - DB Weight: 1 Read/Write (Accounts)"," # \u003c/weight\u003e"]},{"Name":"force_transfer","Args":[{"Name":"new","Type":"T::AccountId"},{"Name":"index","Type":"T::AccountIndex"},{"Name":"freeze","Type":"bool"}],"Documentation":[" Force an index to an account. This doesn't require a deposit. If the index is already"," held, then any deposit is reimbursed to its current owner.",""," The dispatch origin for this call must be _Root_.",""," - `index`: the index to be (re-)assigned."," - `new`: the new owner of the index. This function is a no-op if it is equal to sender."," - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",""," Emits `IndexAssigned` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - Up to one reserve operation."," - One event."," -------------------"," - DB Weight:","    - Reads: Indices Accounts, System Account (original owner)","    - Writes: Indices Accounts, System Account (original owner)"," # \u003c/weight\u003e"]},{"Name":"freeze","Args":[{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Freeze an index so it will always point to the sender account. This consumes the deposit.",""," The dispatch origin for this call must be _Signed_ and the signing account must have a"," non-frozen account `index`.",""," - `index`: the index to be frozen in place.",""," Emits `IndexFrozen` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - Up to one slash operation."," - One event."," -------------------"," - DB Weight: 1 Read/Write (Accounts)"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"IndexAssigned","Args":["AccountId","AccountIndex"],"Documentation":[" A account index was assigned. \\[index, who\\]"]},{"Name":"IndexFreed","Args":["AccountIndex"],"Documentation":[" A account index has been freed up (unassigned). \\[index\\]"]},{"Name":"IndexFrozen","Args":["AccountIndex","AccountId"],"Documentation":[" A account index has been frozen to its current account ID. \\[index, who\\]"]}],"Constants":[{"Name":"Deposit","Type":"BalanceOf\u003cT\u003e","Value":"ABCl1OgAAAAAAAAAAAAAAA==","Documentation":[" The deposit needed for reserving an index."]}],"Errors":[{"Name":"NotAssigned","Documentation":[" The index was not already assigned."]},{"Name":"NotOwner","Documentation":[" The index is assigned to another account."]},{"Name":"InUse","Documentation":[" The index was not available."]},{"Name":"NotTransfer","Documentation":[" The source and destination accounts are identical."]},{"Name":"Permanent","Documentation":[" The index is permanent and may not be freed/changed."]}],"Index":2}