{"Name":"Multisig","HasStorage":true,"Storage":{"Prefix":"Multisig","Items":[{"Name":"Multisigs","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key1":"T::AccountId","Key2":"[u8; 32]","Value":"Multisig\u003cT::BlockNumber, BalanceOf\u003cT\u003e, T::AccountId\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The set of open multisig operations."]},{"Name":"Calls","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"[u8; 32]","Value":"(OpaqueCall, T::AccountId, BalanceOf\u003cT\u003e)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null}]},"HasCalls":true,"Calls":[{"Name":"as_multi_threshold_1","Args":[{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Immediately dispatch a multi-signature call using a single approval from the caller.",""," The dispatch origin for this call must be _Signed_.",""," - `other_signatories`: The accounts (other than the sender) who are part of the"," multi-signature, but do not participate in the approval process."," - `call`: The call to be executed.",""," Result is equivalent to the dispatched result.",""," # \u003cweight\u003e"," O(Z + C) where Z is the length of the call and C its execution weight."," -------------------------------"," - DB Weight: None"," - Plus Call Weight"," # \u003c/weight\u003e"]},{"Name":"as_multi","Args":[{"Name":"threshold","Type":"u16"},{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"maybe_timepoint","Type":"Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"},{"Name":"call","Type":"OpaqueCall"},{"Name":"store_call","Type":"bool"},{"Name":"max_weight","Type":"Weight"}],"Documentation":[" Register approval for a dispatch to be made from a deterministic composite account if"," approved by a total of `threshold - 1` of `other_signatories`.",""," If there are enough, then dispatch the call.",""," Payment: `DepositBase` will be reserved if this is the first approval, plus"," `threshold` times `DepositFactor`. It is returned once this dispatch happens or"," is cancelled.",""," The dispatch origin for this call must be _Signed_.",""," - `threshold`: The total number of approvals for this dispatch before it is executed."," - `other_signatories`: The accounts (other than the sender) who can approve this"," dispatch. May not be empty."," - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"," not the first approval, then it must be `Some`, with the timepoint (block number and"," transaction index) of the first approval transaction."," - `call`: The call to be executed.",""," NOTE: Unless this is the final approval, you will generally want to use"," `approve_as_multi` instead, since it only requires a hash of the call.",""," Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"," on success, result is `Ok` and the result from the interior call, if it was executed,"," may be found in the deposited `MultisigExecuted` event.",""," # \u003cweight\u003e"," - `O(S + Z + Call)`."," - Up to one balance-reserve or unreserve operation."," - One passthrough operation, one insert, both `O(S)` where `S` is the number of","   signatories. `S` is capped by `MaxSignatories`, with weight being proportional."," - One call encode \u0026 hash, both of complexity `O(Z)` where `Z` is tx-len."," - One encode \u0026 hash, both of complexity `O(S)`."," - Up to one binary search and insert (`O(logS + S)`)."," - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."," - One event."," - The weight of the `call`."," - Storage: inserts one item, value size bounded by `MaxSignatories`, with a","   deposit taken for its lifetime of","   `DepositBase + threshold * DepositFactor`."," -------------------------------"," - DB Weight:","     - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)","     - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"," - Plus Call Weight"," # \u003c/weight\u003e"]},{"Name":"approve_as_multi","Args":[{"Name":"threshold","Type":"u16"},{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"maybe_timepoint","Type":"Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"},{"Name":"call_hash","Type":"[u8; 32]"},{"Name":"max_weight","Type":"Weight"}],"Documentation":[" Register approval for a dispatch to be made from a deterministic composite account if"," approved by a total of `threshold - 1` of `other_signatories`.",""," Payment: `DepositBase` will be reserved if this is the first approval, plus"," `threshold` times `DepositFactor`. It is returned once this dispatch happens or"," is cancelled.",""," The dispatch origin for this call must be _Signed_.",""," - `threshold`: The total number of approvals for this dispatch before it is executed."," - `other_signatories`: The accounts (other than the sender) who can approve this"," dispatch. May not be empty."," - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"," not the first approval, then it must be `Some`, with the timepoint (block number and"," transaction index) of the first approval transaction."," - `call_hash`: The hash of the call to be executed.",""," NOTE: If this is the final approval, you will want to use `as_multi` instead.",""," # \u003cweight\u003e"," - `O(S)`."," - Up to one balance-reserve or unreserve operation."," - One passthrough operation, one insert, both `O(S)` where `S` is the number of","   signatories. `S` is capped by `MaxSignatories`, with weight being proportional."," - One encode \u0026 hash, both of complexity `O(S)`."," - Up to one binary search and insert (`O(logS + S)`)."," - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."," - One event."," - Storage: inserts one item, value size bounded by `MaxSignatories`, with a","   deposit taken for its lifetime of","   `DepositBase + threshold * DepositFactor`."," ----------------------------------"," - DB Weight:","     - Read: Multisig Storage, [Caller Account]","     - Write: Multisig Storage, [Caller Account]"," # \u003c/weight\u003e"]},{"Name":"cancel_as_multi","Args":[{"Name":"threshold","Type":"u16"},{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"timepoint","Type":"Timepoint\u003cT::BlockNumber\u003e"},{"Name":"call_hash","Type":"[u8; 32]"}],"Documentation":[" Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"," for this operation will be unreserved on success.",""," The dispatch origin for this call must be _Signed_.",""," - `threshold`: The total number of approvals for this dispatch before it is executed."," - `other_signatories`: The accounts (other than the sender) who can approve this"," dispatch. May not be empty."," - `timepoint`: The timepoint (block number and transaction index) of the first approval"," transaction for this dispatch."," - `call_hash`: The hash of the call to be executed.",""," # \u003cweight\u003e"," - `O(S)`."," - Up to one balance-reserve or unreserve operation."," - One passthrough operation, one insert, both `O(S)` where `S` is the number of","   signatories. `S` is capped by `MaxSignatories`, with weight being proportional."," - One encode \u0026 hash, both of complexity `O(S)`."," - One event."," - I/O: 1 read `O(S)`, one remove."," - Storage: removes one item."," ----------------------------------"," - DB Weight:","     - Read: Multisig Storage, [Caller Account], Refund Account, Calls","     - Write: Multisig Storage, [Caller Account], Refund Account, Calls"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"NewMultisig","Args":["AccountId","AccountId","CallHash"],"Documentation":[" A new multisig operation has begun. \\[approving, multisig, call_hash\\]"]},{"Name":"MultisigApproval","Args":["AccountId","Timepoint\u003cBlockNumber\u003e","AccountId","CallHash"],"Documentation":[" A multisig operation has been approved by someone."," \\[approving, timepoint, multisig, call_hash\\]"]},{"Name":"MultisigExecuted","Args":["AccountId","Timepoint\u003cBlockNumber\u003e","AccountId","CallHash","DispatchResult"],"Documentation":[" A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"]},{"Name":"MultisigCancelled","Args":["AccountId","Timepoint\u003cBlockNumber\u003e","AccountId","CallHash"],"Documentation":[" A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"]}],"Constants":[{"Name":"DepositBase","Type":"BalanceOf\u003cT\u003e","Value":"AJw4RfAEAAAAAAAAAAAAAA==","Documentation":[" The base amount of currency needed to reserve for creating a multisig execution or to store"," a dispatch call for later.",""," This is held for an additional storage item whose value size is"," `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"," `32 + sizeof(AccountId)` bytes."]},{"Name":"DepositFactor","Type":"BalanceOf\u003cT\u003e","Value":"AADrCL8BAAAAAAAAAAAAAA==","Documentation":[" The amount of currency needed per unit threshold when creating a multisig execution.",""," This is held for adding 32 bytes more into a pre-existing storage value."]},{"Name":"MaxSignatories","Type":"u16","Value":"ZAA=","Documentation":[" The maximum amount of signatories allowed in the multisig."]}],"Errors":[{"Name":"MinimumThreshold","Documentation":[" Threshold must be 2 or greater."]},{"Name":"AlreadyApproved","Documentation":[" Call is already approved by this signatory."]},{"Name":"NoApprovalsNeeded","Documentation":[" Call doesn't need any (more) approvals."]},{"Name":"TooFewSignatories","Documentation":[" There are too few signatories in the list."]},{"Name":"TooManySignatories","Documentation":[" There are too many signatories in the list."]},{"Name":"SignatoriesOutOfOrder","Documentation":[" The signatories were provided out of order; they should be ordered."]},{"Name":"SenderInSignatories","Documentation":[" The sender was contained in the other signatories; it shouldn't be."]},{"Name":"NotFound","Documentation":[" Multisig operation not found when attempting to cancel."]},{"Name":"NotOwner","Documentation":[" Only the account that originally created the multisig is able to cancel it."]},{"Name":"NoTimepoint","Documentation":[" No timepoint was given, yet the multisig operation is already underway."]},{"Name":"WrongTimepoint","Documentation":[" A different timepoint was given to the multisig operation that is underway."]},{"Name":"UnexpectedTimepoint","Documentation":[" A timepoint was given, yet no multisig operation is underway."]},{"Name":"MaxWeightTooLow","Documentation":[" The maximum weight information provided was too low."]},{"Name":"AlreadyStored","Documentation":[" The data to be stored is already stored."]}],"Index":53}