[{"Name":"System","HasStorage":true,"Storage":{"Prefix":"System","Items":[{"Name":"Account","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"AccountInfo\u003cT::Index, T::AccountData\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" The full account information for a particular account ID."]},{"Name":"ExtrinsicCount","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Total extrinsics count for the current block."]},{"Name":"BlockWeight","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ConsumedWeight","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA","Documentation":[" The current weight for the block."]},{"Name":"AllExtrinsicsLen","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Total length (in bytes) for all extrinsics put together, for the current block."]},{"Name":"BlockHash","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::BlockNumber","Value":"T::Hash","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" Map of block numbers to block hashes."]},{"Name":"ExtrinsicData","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"u32","Value":"Vec\u003cu8\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Extrinsics data for the current block (maps an extrinsic's index to its data)."]},{"Name":"Number","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::BlockNumber","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The current block number being processed. Set by `execute_block`."]},{"Name":"ParentHash","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Hash","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" Hash of the previous block."]},{"Name":"Digest","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"DigestOf\u003cT\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Digest of the current block, also part of the block header."]},{"Name":"Events","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cEventRecord\u003cT::Event, T::Hash\u003e\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Events deposited for the current block."]},{"Name":"EventCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"EventIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The number of events in the `Events\u003cT\u003e` list."]},{"Name":"EventTopics","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::Hash","Value":"Vec\u003c(T::BlockNumber, EventIndex)\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Mapping between a topic (represented by T::Hash) and a vector of indexes"," of events in the `\u003cEvents\u003cT\u003e\u003e` list.",""," All topic vectors have deterministic storage locations depending on the topic. This"," allows light-clients to leverage the changes trie storage tracking mechanism and"," in case of changes fetch the list of events of interest.",""," The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"," the `EventIndex` then in case if the topic has the same contents on the next block"," no notification will be triggered thus the event might be lost."]},{"Name":"LastRuntimeUpgrade","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"LastRuntimeUpgradeInfo","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]},{"Name":"UpgradedToU32RefCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]},{"Name":"UpgradedToTripleRefCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"," (default) if not."]},{"Name":"ExecutionPhase","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"Phase","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The execution phase of the block."]}]},"HasCalls":true,"Calls":[{"Name":"fill_block","Args":[{"Name":"_ratio","Type":"Perbill"}],"Documentation":[" A dispatch that will fill the block weight up to the given ratio."]},{"Name":"remark","Args":[{"Name":"_remark","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Make some on-chain remark.",""," # \u003cweight\u003e"," - `O(1)`"," # \u003c/weight\u003e"]},{"Name":"set_heap_pages","Args":[{"Name":"pages","Type":"u64"}],"Documentation":[" Set the number of pages in the WebAssembly environment's heap.",""," # \u003cweight\u003e"," - `O(1)`"," - 1 storage write."," - Base Weight: 1.405 µs"," - 1 write to HEAP_PAGES"," # \u003c/weight\u003e"]},{"Name":"set_code","Args":[{"Name":"code","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Set the new runtime code.",""," # \u003cweight\u003e"," - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"," - 1 storage write (codec `O(C)`)."," - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive)."," - 1 event."," The weight of this function is dependent on the runtime, but generally this is very expensive."," We will treat this as a full block."," # \u003c/weight\u003e"]},{"Name":"set_code_without_checks","Args":[{"Name":"code","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Set the new runtime code without doing any checks of the given `code`.",""," # \u003cweight\u003e"," - `O(C)` where `C` length of `code`"," - 1 storage write (codec `O(C)`)."," - 1 event."," The weight of this function is dependent on the runtime. We will treat this as a full block."," # \u003c/weight\u003e"]},{"Name":"set_changes_trie_config","Args":[{"Name":"changes_trie_config","Type":"Option\u003cChangesTrieConfiguration\u003e"}],"Documentation":[" Set the new changes trie configuration.",""," # \u003cweight\u003e"," - `O(1)`"," - 1 storage write or delete (codec `O(1)`)."," - 1 call to `deposit_log`: Uses `append` API, so O(1)"," - Base Weight: 7.218 µs"," - DB Weight:","     - Writes: Changes Trie, System Digest"," # \u003c/weight\u003e"]},{"Name":"set_storage","Args":[{"Name":"items","Type":"Vec\u003cKeyValue\u003e"}],"Documentation":[" Set some items of storage.",""," # \u003cweight\u003e"," - `O(I)` where `I` length of `items`"," - `I` storage writes (`O(1)`)."," - Base Weight: 0.568 * i µs"," - Writes: Number of items"," # \u003c/weight\u003e"]},{"Name":"kill_storage","Args":[{"Name":"keys","Type":"Vec\u003cKey\u003e"}],"Documentation":[" Kill some items from storage.",""," # \u003cweight\u003e"," - `O(IK)` where `I` length of `keys` and `K` length of one key"," - `I` storage deletions."," - Base Weight: .378 * i µs"," - Writes: Number of items"," # \u003c/weight\u003e"]},{"Name":"kill_prefix","Args":[{"Name":"prefix","Type":"Key"},{"Name":"_subkeys","Type":"u32"}],"Documentation":[" Kill all storage items with a key that starts with the given prefix.",""," **NOTE:** We rely on the Root origin to provide us the number of subkeys under"," the prefix we are removing to accurately calculate the weight of this function.",""," # \u003cweight\u003e"," - `O(P)` where `P` amount of keys with prefix `prefix`"," - `P` storage deletions."," - Base Weight: 0.834 * P µs"," - Writes: Number of subkeys + 1"," # \u003c/weight\u003e"]},{"Name":"remark_with_event","Args":[{"Name":"remark","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Make some on-chain remark and emit event.",""," # \u003cweight\u003e"," - `O(b)` where b is the length of the remark."," - 1 event."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"ExtrinsicSuccess","Args":["DispatchInfo"],"Documentation":[" An extrinsic completed successfully. \\[info\\]"]},{"Name":"ExtrinsicFailed","Args":["DispatchError","DispatchInfo"],"Documentation":[" An extrinsic failed. \\[error, info\\]"]},{"Name":"CodeUpdated","Args":null,"Documentation":[" `:code` was updated."]},{"Name":"NewAccount","Args":["AccountId"],"Documentation":[" A new \\[account\\] was created."]},{"Name":"KilledAccount","Args":["AccountId"],"Documentation":[" An \\[account\\] was reaped."]},{"Name":"Remarked","Args":["AccountId","Hash"],"Documentation":[" On on-chain remark happened. \\[origin, remark_hash\\]"]}],"Constants":[{"Name":"BlockWeights","Type":"limits::BlockWeights","Value":"APIFKgEAAAAAiFJqdAAAAEBZcwcAAAAAAcAYD6RLAAAAAQDmvU9XAAAAAQAAAAAAAAAAQFlzBwAAAAABwLqjvmgAAAABAIhSanQAAAABAKKUGh0AAABAWXMHAAAAAAAAAA==","Documentation":[" Block \u0026 extrinsics weights: base values and limits."]},{"Name":"BlockLength","Type":"limits::BlockLength","Value":"AAA8AAAAUAAAAFAA","Documentation":[" The maximum length of a block (in bytes)."]},{"Name":"BlockHashCount","Type":"T::BlockNumber","Value":"+gAAAA==","Documentation":[" Maximum number of block number to block hash mappings to keep (oldest pruned first)."]},{"Name":"DbWeight","Type":"RuntimeDbWeight","Value":"QHh9AQAAAAAA4fUFAAAAAA==","Documentation":[" The weight of runtime database operations the runtime can invoke."]},{"Name":"Version","Type":"RuntimeVersion","Value":"HGJpZnJvc3QcYmlmcm9zdAEAAACIAwAAAAAAADjSvJiX7tCPFQMAAADfastomQdgmwMAAABA/jrUAfiVmgUAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAEAAAA345f8fJH15AEAAAD3iyeL5T9FTAIAAACrPAVyKR/riwEAAADqk+Pxbz1pYgEAAADdcY1cxTJi1AEAAAD4d0aPTKDoJgEAAABgrtQ8tSRW8QEAAADcZVRo2DlBIAEAAADGe0fYSN0VZwEAAAABAAAA","Documentation":[" Get the chain's current version."]},{"Name":"SS58Prefix","Type":"u16","Value":"BgA=","Documentation":[" The designated SS85 prefix of this chain.",""," This replaces the \"ss58Format\" property declared in the chain spec. Reason is"," that the runtime should know about the prefix in order to make use of it as"," an identifier of the chain."]}],"Errors":[{"Name":"InvalidSpecName","Documentation":[" The name of specification does not match between the current runtime"," and the new runtime."]},{"Name":"SpecVersionNeedsToIncrease","Documentation":[" The specification version is not allowed to decrease between the current runtime"," and the new runtime."]},{"Name":"FailedToExtractRuntimeVersion","Documentation":[" Failed to extract the runtime version from the new runtime.",""," Either calling `Core_version` or decoding `RuntimeVersion` failed."]},{"Name":"NonDefaultComposite","Documentation":[" Suicide called when the account has non-default composite data."]},{"Name":"NonZeroRefCount","Documentation":[" There is a non-zero reference count preventing the account from being purged."]}],"Index":0},{"Name":"Timestamp","HasStorage":true,"Storage":{"Prefix":"Timestamp","Items":[{"Name":"Now","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Moment","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAA=","Documentation":[" Current time for the current block."]},{"Name":"DidUpdate","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Did the timestamp get updated in this block?"]}]},"HasCalls":true,"Calls":[{"Name":"set","Args":[{"Name":"now","Type":"Compact\u003cT::Moment\u003e"}],"Documentation":[" Set the current time.",""," This call should be invoked exactly once per block. It will panic at the finalization"," phase, if this call hasn't been invoked by that time.",""," The timestamp should be greater than the previous one by the amount specified by"," `MinimumPeriod`.",""," The dispatch origin for this call must be `Inherent`.",""," # \u003cweight\u003e"," - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"," - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)"," - 1 event handler `on_timestamp_set`. Must be `O(1)`."," # \u003c/weight\u003e"]}],"HasEvents":false,"Events":null,"Constants":[{"Name":"MinimumPeriod","Type":"T::Moment","Value":"cBcAAAAAAAA=","Documentation":[" The minimum period between blocks. Beware that this is different to the *expected* period"," that the block production apparatus provides. Your chosen consensus system will generally"," work with this to determine a sensible block time. e.g. For Aura, it will be double this"," period on default settings."]}],"Errors":null,"Index":1},{"Name":"Indices","HasStorage":true,"Storage":{"Prefix":"Indices","Items":[{"Name":"Accounts","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountIndex","Value":"(T::AccountId, BalanceOf\u003cT\u003e, bool)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The lookup from index to account."]}]},"HasCalls":true,"Calls":[{"Name":"claim","Args":[{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Assign an previously unassigned index.",""," Payment: `Deposit` is reserved from the sender account.",""," The dispatch origin for this call must be _Signed_.",""," - `index`: the index to be claimed. This must not be in use.",""," Emits `IndexAssigned` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - One reserve operation."," - One event."," -------------------"," - DB Weight: 1 Read/Write (Accounts)"," # \u003c/weight\u003e"]},{"Name":"transfer","Args":[{"Name":"new","Type":"T::AccountId"},{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Assign an index already owned by the sender to another account. The balance reservation"," is effectively transferred to the new account.",""," The dispatch origin for this call must be _Signed_.",""," - `index`: the index to be re-assigned. This must be owned by the sender."," - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",""," Emits `IndexAssigned` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - One transfer operation."," - One event."," -------------------"," - DB Weight:","    - Reads: Indices Accounts, System Account (recipient)","    - Writes: Indices Accounts, System Account (recipient)"," # \u003c/weight\u003e"]},{"Name":"free","Args":[{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Free up an index owned by the sender.",""," Payment: Any previous deposit placed for the index is unreserved in the sender account.",""," The dispatch origin for this call must be _Signed_ and the sender must own the index.",""," - `index`: the index to be freed. This must be owned by the sender.",""," Emits `IndexFreed` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - One reserve operation."," - One event."," -------------------"," - DB Weight: 1 Read/Write (Accounts)"," # \u003c/weight\u003e"]},{"Name":"force_transfer","Args":[{"Name":"new","Type":"T::AccountId"},{"Name":"index","Type":"T::AccountIndex"},{"Name":"freeze","Type":"bool"}],"Documentation":[" Force an index to an account. This doesn't require a deposit. If the index is already"," held, then any deposit is reimbursed to its current owner.",""," The dispatch origin for this call must be _Root_.",""," - `index`: the index to be (re-)assigned."," - `new`: the new owner of the index. This function is a no-op if it is equal to sender."," - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",""," Emits `IndexAssigned` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - Up to one reserve operation."," - One event."," -------------------"," - DB Weight:","    - Reads: Indices Accounts, System Account (original owner)","    - Writes: Indices Accounts, System Account (original owner)"," # \u003c/weight\u003e"]},{"Name":"freeze","Args":[{"Name":"index","Type":"T::AccountIndex"}],"Documentation":[" Freeze an index so it will always point to the sender account. This consumes the deposit.",""," The dispatch origin for this call must be _Signed_ and the signing account must have a"," non-frozen account `index`.",""," - `index`: the index to be frozen in place.",""," Emits `IndexFrozen` if successful.",""," # \u003cweight\u003e"," - `O(1)`."," - One storage mutation (codec `O(1)`)."," - Up to one slash operation."," - One event."," -------------------"," - DB Weight: 1 Read/Write (Accounts)"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"IndexAssigned","Args":["AccountId","AccountIndex"],"Documentation":[" A account index was assigned. \\[index, who\\]"]},{"Name":"IndexFreed","Args":["AccountIndex"],"Documentation":[" A account index has been freed up (unassigned). \\[index\\]"]},{"Name":"IndexFrozen","Args":["AccountIndex","AccountId"],"Documentation":[" A account index has been frozen to its current account ID. \\[index, who\\]"]}],"Constants":[{"Name":"Deposit","Type":"BalanceOf\u003cT\u003e","Value":"ABCl1OgAAAAAAAAAAAAAAA==","Documentation":[" The deposit needed for reserving an index."]}],"Errors":[{"Name":"NotAssigned","Documentation":[" The index was not already assigned."]},{"Name":"NotOwner","Documentation":[" The index is assigned to another account."]},{"Name":"InUse","Documentation":[" The index was not available."]},{"Name":"NotTransfer","Documentation":[" The source and destination accounts are identical."]},{"Name":"Permanent","Documentation":[" The index is permanent and may not be freed/changed."]}],"Index":2},{"Name":"RandomnessCollectiveFlip","HasStorage":true,"Storage":{"Prefix":"RandomnessCollectiveFlip","Items":[{"Name":"RandomMaterial","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::Hash\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Series of block headers from the last 81 blocks that acts as random seed material. This"," is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"," the oldest hash."]}]},"HasCalls":false,"Calls":null,"HasEvents":false,"Events":null,"Constants":null,"Errors":null,"Index":4},{"Name":"ParachainSystem","HasStorage":true,"Storage":{"Prefix":"ParachainSystem","Items":[{"Name":"PendingRelayChainBlockNumber","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"RelayChainBlockNumber","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" We need to store the new validation function for the span between"," setting it and applying it. If it has a"," value, then [`PendingValidationCode`] must have a real value, and"," together will coordinate the block number where the upgrade will happen."]},{"Name":"PendingValidationCode","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cu8\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The new validation function we will upgrade to when the relay chain"," reaches [`PendingRelayChainBlockNumber`]. A real validation function must"," exist here as long as [`PendingRelayChainBlockNumber`] is set."]},{"Name":"ValidationData","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"PersistedValidationData","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The [`PersistedValidationData`] set for this block."]},{"Name":"DidSetValidationCode","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Were the validation data set to notify the relay chain?"]},{"Name":"LastUpgrade","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"relay_chain::BlockNumber","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The last relay parent block number at which we signalled the code upgrade."]},{"Name":"RelevantMessagingState","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"MessagingStateSnapshot","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The snapshot of some state related to messaging relevant to the current parachain as per"," the relay parent.",""," This field is meant to be updated each block with the validation data inherent. Therefore,"," before processing of the inherent, e.g. in `on_initialize` this data may be stale.",""," This data is also absent from the genesis."]},{"Name":"HostConfiguration","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"AbridgedHostConfiguration","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The parachain host configuration that was obtained from the relay parent.",""," This field is meant to be updated each block with the validation data inherent. Therefore,"," before processing of the inherent, e.g. in `on_initialize` this data may be stale.",""," This data is also absent from the genesis."]},{"Name":"LastDmqMqcHead","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"MessageQueueChain","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":[" The last downward message queue chain head we have observed.",""," This value is loaded before and saved after processing inbound downward messages carried"," by the system inherent."]},{"Name":"LastHrmpMqcHeads","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BTreeMap\u003cParaId, MessageQueueChain\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The message queue chain heads we have observed per each channel incoming channel.",""," This value is loaded before and saved after processing inbound downward messages carried"," by the system inherent."]},{"Name":"ProcessedDownwardMessages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Number of downward messages processed in a block.",""," This will be cleared in `on_initialize` of each new block."]},{"Name":"NewValidationCode","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cu8\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" New validation code that was set in a block.",""," This will be cleared in `on_initialize` of each new block if no other pallet already set"," the value."]},{"Name":"HrmpWatermark","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"relay_chain::v1::BlockNumber","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" HRMP watermark that was set in a block.",""," This will be cleared in `on_initialize` of each new block."]},{"Name":"HrmpOutboundMessages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cOutboundHrmpMessage\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" HRMP messages that were sent in a block.",""," This will be cleared in `on_initialize` of each new block."]},{"Name":"UpwardMessages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cUpwardMessage\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Upward messages that were sent in a block.",""," This will be cleared in `on_initialize` of each new block."]},{"Name":"PendingUpwardMessages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cUpwardMessage\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Upward messages that are still pending and not yet send to the relay chain."]},{"Name":"AnnouncedHrmpMessagesPerCandidate","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The number of HRMP messages we observed in `on_initialize` and thus used that number for"," announcing the weight of `on_initialize` and `on_finalize`."]},{"Name":"ReservedXcmpWeightOverride","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"Weight","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The weight we reserve at the beginning of the block for processing XCMP messages. This"," overrides the amount set in the Config trait."]},{"Name":"ReservedDmpWeightOverride","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"Weight","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The weight we reserve at the beginning of the block for processing DMP messages. This"," overrides the amount set in the Config trait."]},{"Name":"AuthorizedUpgrade","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Hash","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The next authorized upgrade, if there is one."]}]},"HasCalls":true,"Calls":[{"Name":"set_upgrade_block","Args":[{"Name":"relay_chain_block","Type":"RelayChainBlockNumber"}],"Documentation":[" Force an already scheduled validation function upgrade to happen on a particular block.",""," Note that coordinating this block for the upgrade has to happen independently on the"," relay chain and this parachain. Synchronizing the block for the upgrade is sensitive,"," and this bypasses all checks and and normal protocols. Very easy to brick your chain"," if done wrong."]},{"Name":"set_validation_data","Args":[{"Name":"data","Type":"ParachainInherentData"}],"Documentation":[" Set the current validation data.",""," This should be invoked exactly once per block. It will panic at the finalization"," phase if the call was not invoked.",""," The dispatch origin for this call must be `Inherent`",""," As a side effect, this function upgrades the current validation function"," if the appropriate time has come."]},{"Name":"sudo_send_upward_message","Args":[{"Name":"message","Type":"UpwardMessage"}],"Documentation":null},{"Name":"authorize_upgrade","Args":[{"Name":"code_hash","Type":"T::Hash"}],"Documentation":null},{"Name":"enact_authorized_upgrade","Args":[{"Name":"code","Type":"Vec\u003cu8\u003e"}],"Documentation":null}],"HasEvents":true,"Events":[{"Name":"ValidationFunctionStored","Args":["RelayChainBlockNumber"],"Documentation":[" The validation function has been scheduled to apply as of the contained relay chain"," block number."]},{"Name":"ValidationFunctionApplied","Args":["RelayChainBlockNumber"],"Documentation":[" The validation function was applied as of the contained relay chain block number."]},{"Name":"UpgradeAuthorized","Args":["Hash"],"Documentation":[" An upgrade has been authorized."]},{"Name":"DownwardMessagesReceived","Args":["u32"],"Documentation":[" Some downward messages have been received and will be processed."," \\[ count \\]"]},{"Name":"DownwardMessagesProcessed","Args":["Weight","relay_chain::Hash"],"Documentation":[" Downward messages were processed using the given weight."," \\[ weight_used, result_mqc_head \\]"]}],"Constants":null,"Errors":[{"Name":"OverlappingUpgrades","Documentation":[" Attempt to upgrade validation function while existing upgrade pending"]},{"Name":"ProhibitedByPolkadot","Documentation":[" Polkadot currently prohibits this parachain from upgrading its validation function"]},{"Name":"TooBig","Documentation":[" The supplied validation function has compiled into a blob larger than Polkadot is"," willing to run"]},{"Name":"ValidationDataNotAvailable","Documentation":[" The inherent which supplies the validation data did not run this block"]},{"Name":"HostConfigurationNotAvailable","Documentation":[" The inherent which supplies the host configuration did not run this block"]},{"Name":"NotScheduled","Documentation":[" No validation function upgrade is currently scheduled."]},{"Name":"NothingAuthorized","Documentation":[" No code upgrade has been authorized."]},{"Name":"Unauthorized","Documentation":[" The given code upgrade has not been authorized."]}],"Index":5},{"Name":"ParachainInfo","HasStorage":true,"Storage":{"Prefix":"ParachainInfo","Items":[{"Name":"ParachainId","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ParaId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"ZAAAAA==","Documentation":null}]},"HasCalls":false,"Calls":null,"HasEvents":false,"Events":null,"Constants":null,"Errors":null,"Index":6},{"Name":"Balances","HasStorage":true,"Storage":{"Prefix":"Balances","Items":[{"Name":"TotalIssuance","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::Balance","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The total units issued in the system."]},{"Name":"Account","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"AccountData\u003cT::Balance\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The balance of an account.",""," NOTE: This is only used in the case that this pallet is used to store balances."]},{"Name":"Locks","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"WeakBoundedVec\u003cBalanceLock\u003cT::Balance\u003e, T::MaxLocks\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Any liquidity locks on some account balances."," NOTE: Should only be accessed when setting, changing and freeing a lock."]},{"Name":"Reserves","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"BoundedVec\u003cReserveData\u003cT::ReserveIdentifier, T::Balance\u003e, T::\nMaxReserves\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Named reserves on some account balances."]},{"Name":"StorageVersion","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Releases","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Storage version of the pallet.",""," This is set to v2.0.0 for new networks."]}]},"HasCalls":true,"Calls":[{"Name":"transfer","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"value","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Transfer some liquid free balance to another account.",""," `transfer` will set the `FreeBalance` of the sender and receiver."," It will decrease the total issuance of the system by the `TransferFee`."," If the sender's account is below the existential deposit as a result"," of the transfer, the account will be reaped.",""," The dispatch origin for this call must be `Signed` by the transactor.",""," # \u003cweight\u003e"," - Dependent on arguments but not critical, given proper implementations for","   input config types. See related functions below."," - It contains a limited number of reads and writes internally and no complex computation.",""," Related functions:","","   - `ensure_can_withdraw` is always called internally but has a bounded complexity.","   - Transferring balances to accounts that did not exist before will cause","      `T::OnNewAccount::on_new_account` to be called.","   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.","   - `transfer_keep_alive` works the same way as `transfer`, but has an additional","     check that the transfer will not kill the origin account."," ---------------------------------"," - Base Weight: 73.64 µs, worst case scenario (account created, account removed)"," - DB Weight: 1 Read and 1 Write to destination account"," - Origin account is already in memory, so no DB operations for them."," # \u003c/weight\u003e"]},{"Name":"set_balance","Args":[{"Name":"who","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"new_free","Type":"Compact\u003cT::Balance\u003e"},{"Name":"new_reserved","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Set the balances of a given account.",""," This will alter `FreeBalance` and `ReservedBalance` in storage. it will"," also decrease the total issuance of the system (`TotalIssuance`)."," If the new free or reserved balance is below the existential deposit,"," it will reset the account nonce (`frame_system::AccountNonce`).",""," The dispatch origin for this call is `root`.",""," # \u003cweight\u003e"," - Independent of the arguments."," - Contains a limited number of reads and writes."," ---------------------"," - Base Weight:","     - Creating: 27.56 µs","     - Killing: 35.11 µs"," - DB Weight: 1 Read, 1 Write to `who`"," # \u003c/weight\u003e"]},{"Name":"force_transfer","Args":[{"Name":"source","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"value","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Exactly as `transfer`, except the origin must be root and the source account may be"," specified."," # \u003cweight\u003e"," - Same as transfer, but additional read and write because the source account is","   not assumed to be in the overlay."," # \u003c/weight\u003e"]},{"Name":"transfer_keep_alive","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"value","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Same as the [`transfer`] call, but with a check that the transfer will not kill the"," origin account.",""," 99% of the time you want [`transfer`] instead.",""," [`transfer`]: struct.Pallet.html#method.transfer"," # \u003cweight\u003e"," - Cheaper than transfer because account cannot be killed."," - Base Weight: 51.4 µs"," - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)"," #\u003c/weight\u003e"]},{"Name":"transfer_all","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"keep_alive","Type":"bool"}],"Documentation":[" Transfer the entire transferable balance from the caller account.",""," NOTE: This function only attempts to transfer _transferable_ balances. This means that"," any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"," transferred by this function. To ensure that this function results in a killed account,"," you might need to prepare the account by removing any reference counters, storage"," deposits, etc...",""," The dispatch origin of this call must be Signed.",""," - `dest`: The recipient of the transfer."," - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all","   of the funds the account has, causing the sender account to be killed (false), or","   transfer everything except at least the existential deposit, which will guarantee to","   keep the sender account alive (true).","   # \u003cweight\u003e"," - O(1). Just like transfer, but reading the user's transferable balance first.","   #\u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Endowed","Args":["AccountId","Balance"],"Documentation":[" An account was created with some free balance. \\[account, free_balance\\]"]},{"Name":"DustLost","Args":["AccountId","Balance"],"Documentation":[" An account was removed whose balance was non-zero but below ExistentialDeposit,"," resulting in an outright loss. \\[account, balance\\]"]},{"Name":"Transfer","Args":["AccountId","AccountId","Balance"],"Documentation":[" Transfer succeeded. \\[from, to, value\\]"]},{"Name":"BalanceSet","Args":["AccountId","Balance","Balance"],"Documentation":[" A balance was set by root. \\[who, free, reserved\\]"]},{"Name":"Deposit","Args":["AccountId","Balance"],"Documentation":[" Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"]},{"Name":"Reserved","Args":["AccountId","Balance"],"Documentation":[" Some balance was reserved (moved from free to reserved). \\[who, value\\]"]},{"Name":"Unreserved","Args":["AccountId","Balance"],"Documentation":[" Some balance was unreserved (moved from reserved to free). \\[who, value\\]"]},{"Name":"ReserveRepatriated","Args":["AccountId","AccountId","Balance","Status"],"Documentation":[" Some balance was moved from the reserve of the first account to the second account."," Final argument indicates the destination balance type."," \\[from, to, balance, destination_status\\]"]}],"Constants":[{"Name":"ExistentialDeposit","Type":"T::Balance","Value":"AOQLVAIAAAAAAAAAAAAAAA==","Documentation":[" The minimum amount required to keep an account open."]},{"Name":"MaxLocks","Type":"u32","Value":"MgAAAA==","Documentation":[" The maximum number of locks that should exist on an account."," Not strictly enforced, but used for weight estimation."]},{"Name":"MaxReserves","Type":"u32","Value":"MgAAAA==","Documentation":[" The maximum number of named reserves that can exist on an account."]}],"Errors":[{"Name":"VestingBalance","Documentation":[" Vesting balance too high to send value"]},{"Name":"LiquidityRestrictions","Documentation":[" Account liquidity restrictions prevent withdrawal"]},{"Name":"InsufficientBalance","Documentation":[" Balance too low to send value"]},{"Name":"ExistentialDeposit","Documentation":[" Value too low to create account due to existential deposit"]},{"Name":"KeepAlive","Documentation":[" Transfer/payment would kill account"]},{"Name":"ExistingVestingSchedule","Documentation":[" A vesting schedule already exists for this account"]},{"Name":"DeadAccount","Documentation":[" Beneficiary account must pre-exist"]},{"Name":"TooManyReserves","Documentation":[" Number of named reserves exceed MaxReserves"]}],"Index":10},{"Name":"TransactionPayment","HasStorage":true,"Storage":{"Prefix":"TransactionPayment","Items":[{"Name":"NextFeeMultiplier","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Multiplier","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AABkp7O24A0AAAAAAAAAAA==","Documentation":null},{"Name":"StorageVersion","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Releases","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null}]},"HasCalls":false,"Calls":null,"HasEvents":false,"Events":null,"Constants":[{"Name":"TransactionByteFee","Type":"BalanceOf\u003cT\u003e","Value":"QEIPAAAAAAAAAAAAAAAAAA==","Documentation":[" The fee to be paid for making a transaction; the per-byte portion."]},{"Name":"WeightToFee","Type":"Vec\u003cWeightToFeeCoefficient\u003cBalanceOf\u003cT\u003e\u003e\u003e","Value":"BAEAAAAAAAAAAAAAAAAAAAAAAAAAAAE=","Documentation":[" The polynomial that is applied in order to derive fee from weight."]}],"Errors":null,"Index":11},{"Name":"Authorship","HasStorage":true,"Storage":{"Prefix":"Authorship","Items":[{"Name":"Uncles","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cUncleEntryItem\u003cT::BlockNumber, T::Hash, T::AccountId\u003e\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Uncles"]},{"Name":"Author","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::AccountId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Author of current block."]},{"Name":"DidSetUncles","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Whether uncles were already set in this block."]}]},"HasCalls":true,"Calls":[{"Name":"set_uncles","Args":[{"Name":"new_uncles","Type":"Vec\u003cT::Header\u003e"}],"Documentation":[" Provide a set of uncles."]}],"HasEvents":false,"Events":null,"Constants":[{"Name":"UncleGenerations","Type":"T::BlockNumber","Value":"AAAAAA==","Documentation":[" The number of blocks back we should accept uncles."," This means that we will deal with uncle-parents that are"," `UncleGenerations + 1` before `now`."]}],"Errors":[{"Name":"InvalidUncleParent","Documentation":[" The uncle parent not in the chain."]},{"Name":"UnclesAlreadySet","Documentation":[" Uncles already set in the block."]},{"Name":"TooManyUncles","Documentation":[" Too many uncles."]},{"Name":"GenesisUncle","Documentation":[" The uncle is genesis."]},{"Name":"TooHighUncle","Documentation":[" The uncle is too high in chain."]},{"Name":"UncleAlreadyIncluded","Documentation":[" The uncle is already included."]},{"Name":"OldUncle","Documentation":[" The uncle isn't recent enough to be included."]}],"Index":20},{"Name":"CollatorSelection","HasStorage":true,"Storage":{"Prefix":"CollatorSelection","Items":[{"Name":"Invulnerables","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AccountId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The invulnerable, fixed collators."]},{"Name":"Candidates","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cCandidateInfo\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The (community, limited) collation candidates."]},{"Name":"LastAuthoredBlock","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"T::BlockNumber","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Last block authored by collator."]},{"Name":"DesiredCandidates","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Desired number of candidates.",""," This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."]},{"Name":"CandidacyBond","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BalanceOf\u003cT\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" Fixed deposit bond for each candidate."]}]},"HasCalls":true,"Calls":[{"Name":"set_invulnerables","Args":[{"Name":"new","Type":"Vec\u003cT::AccountId\u003e"}],"Documentation":null},{"Name":"set_desired_candidates","Args":[{"Name":"max","Type":"u32"}],"Documentation":null},{"Name":"set_candidacy_bond","Args":[{"Name":"bond","Type":"BalanceOf\u003cT\u003e"}],"Documentation":null},{"Name":"register_as_candidate","Args":null,"Documentation":null},{"Name":"leave_intent","Args":null,"Documentation":null}],"HasEvents":true,"Events":[{"Name":"NewInvulnerables","Args":["Vec\u003cT::AccountId\u003e"],"Documentation":null},{"Name":"NewDesiredCandidates","Args":["u32"],"Documentation":null},{"Name":"NewCandidacyBond","Args":["Balance"],"Documentation":null},{"Name":"CandidateAdded","Args":["AccountId","Balance"],"Documentation":null},{"Name":"CandidateRemoved","Args":["AccountId"],"Documentation":null}],"Constants":null,"Errors":[{"Name":"TooManyCandidates","Documentation":[" Too many candidates"]},{"Name":"TooFewCandidates","Documentation":[" Too few candidates"]},{"Name":"Unknown","Documentation":[" Unknown error"]},{"Name":"Permission","Documentation":[" Permission issue"]},{"Name":"AlreadyCandidate","Documentation":[" User is already a candidate"]},{"Name":"NotCandidate","Documentation":[" User is not a candidate"]},{"Name":"AlreadyInvulnerable","Documentation":[" User is already an Invulnerable"]},{"Name":"NoAssociatedValidatorId","Documentation":[" Account has no associated validator ID"]},{"Name":"ValidatorNotRegistered","Documentation":[" Validator ID is not yet registered"]}],"Index":21},{"Name":"Session","HasStorage":true,"Storage":{"Prefix":"Session","Items":[{"Name":"Validators","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::ValidatorId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current set of validators."]},{"Name":"CurrentIndex","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"SessionIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Current index of the session."]},{"Name":"QueuedChanged","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" True if the underlying economic identities or weighting behind the validators"," has changed in the queued validator set."]},{"Name":"QueuedKeys","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003c(T::ValidatorId, T::Keys)\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The queued keys for the next session. When the next session begins, these keys"," will be used to determine the validator's session keys."]},{"Name":"DisabledValidators","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cu32\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Indices of disabled validators.",""," The set is cleared when `on_session_ending` returns a new set of identities."]},{"Name":"NextKeys","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::ValidatorId","Value":"T::Keys","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The next session keys for a validator."]},{"Name":"KeyOwner","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"(KeyTypeId, Vec\u003cu8\u003e)","Value":"T::ValidatorId","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The owner of a key. The key is the `KeyTypeId` + the encoded key."]}]},"HasCalls":true,"Calls":[{"Name":"set_keys","Args":[{"Name":"keys","Type":"T::Keys"},{"Name":"proof","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Sets the session key(s) of the function caller to `keys`."," Allows an account to set its session key prior to becoming a validator."," This doesn't take effect until the next session.",""," The dispatch origin of this function must be signed.",""," # \u003cweight\u003e"," - Complexity: `O(1)`","   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed."," - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"," - DbWrites: `origin account`, `NextKeys`"," - DbReads per key id: `KeyOwner`"," - DbWrites per key id: `KeyOwner`"," # \u003c/weight\u003e"]},{"Name":"purge_keys","Args":null,"Documentation":[" Removes any session key(s) of the function caller."," This doesn't take effect until the next session.",""," The dispatch origin of this function must be signed.",""," # \u003cweight\u003e"," - Complexity: `O(1)` in number of key types.","   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed."," - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"," - DbWrites: `NextKeys`, `origin account`"," - DbWrites per key id: `KeyOwner`"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"NewSession","Args":["SessionIndex"],"Documentation":[" New session has happened. Note that the argument is the \\[session_index\\], not the block"," number as the type might suggest."]}],"Constants":null,"Errors":[{"Name":"InvalidProof","Documentation":[" Invalid ownership proof."]},{"Name":"NoAssociatedValidatorId","Documentation":[" No associated validator ID for account."]},{"Name":"DuplicatedKey","Documentation":[" Registered duplicate key."]},{"Name":"NoKeys","Documentation":[" No keys are associated with this account."]},{"Name":"NoAccount","Documentation":[" Key setting account is not live, so it's impossible to associate keys."]}],"Index":22},{"Name":"Aura","HasStorage":true,"Storage":{"Prefix":"Aura","Items":[{"Name":"Authorities","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AuthorityId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current authority set."]},{"Name":"CurrentSlot","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Slot","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAA=","Documentation":[" The current slot of this block.",""," This will be set in `on_initialize`."]}]},"HasCalls":false,"Calls":null,"HasEvents":false,"Events":null,"Constants":null,"Errors":null,"Index":23},{"Name":"AuraExt","HasStorage":true,"Storage":{"Prefix":"AuraExt","Items":[{"Name":"Authorities","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AuthorityId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Serves as cache for the authorities.",""," The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,"," but we require the old authorities to verify the seal when validating a PoV. This will always"," be updated to the latest AuRa authorities in `on_finalize`."]}]},"HasCalls":false,"Calls":null,"HasEvents":false,"Events":null,"Constants":null,"Errors":null,"Index":24},{"Name":"Democracy","HasStorage":true,"Storage":{"Prefix":"Democracy","Items":[{"Name":"PublicPropCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"PropIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The number of (public) proposals that have been made so far."]},{"Name":"PublicProps","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003c(PropIndex, T::Hash, T::AccountId)\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The public proposals. Unsorted. The second item is the proposal's hash."]},{"Name":"DepositOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"PropIndex","Value":"(Vec\u003cT::AccountId\u003e, BalanceOf\u003cT\u003e)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Those who have locked a deposit.",""," TWOX-NOTE: Safe, as increasing integer keys are safe."]},{"Name":"Preimages","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"PreimageStatus\u003cT::AccountId, BalanceOf\u003cT\u003e, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Map of hashes to the proposal preimage, along with who registered it and their deposit."," The block number is the block at which it was deposited."]},{"Name":"ReferendumCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ReferendumIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The next free referendum index, aka the number of referenda started so far."]},{"Name":"LowestUnbaked","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ReferendumIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The lowest referendum index representing an unbaked referendum. Equal to"," `ReferendumCount` if there isn't a unbaked referendum."]},{"Name":"ReferendumInfoOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"ReferendumIndex","Value":"ReferendumInfo\u003cT::BlockNumber, T::Hash, BalanceOf\u003cT\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Information concerning any given referendum.",""," TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]},{"Name":"VotingOf","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"Voting\u003cBalanceOf\u003cT\u003e, T::AccountId, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA","Documentation":[" All votes for a particular voter. We store the balance for the number of votes that we"," have recorded. The second item is the total amount of delegations, that will be added.",""," TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]},{"Name":"Locks","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"T::BlockNumber","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Accounts for which there are locks in action which may be removed at some point in the"," future. The value is the block number at which the lock expires and may be removed.",""," TWOX-NOTE: OK ― `AccountId` is a secure hash."]},{"Name":"LastTabledWasExternal","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" True if the last referendum tabled was submitted externally. False if it was a public"," proposal."]},{"Name":"NextExternal","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"(T::Hash, VoteThreshold)","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The referendum to be tabled whenever it would be valid to table an external proposal."," This happens when a referendum needs to be tabled and one of two conditions are met:"," - `LastTabledWasExternal` is `false`; or"," - `PublicProps` is empty."]},{"Name":"Blacklist","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"(T::BlockNumber, Vec\u003cT::AccountId\u003e)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" A record of who vetoed what. Maps proposal hash to a possible existent block number"," (until when it may not be resubmitted) and who vetoed it."]},{"Name":"Cancellations","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"bool","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Record of all proposals that have been subject to emergency cancellation."]},{"Name":"StorageVersion","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"Releases","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Storage version of the pallet.",""," New networks start with last version."]}]},"HasCalls":true,"Calls":[{"Name":"propose","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Propose a sensitive action to be taken.",""," The dispatch origin of this call must be _Signed_ and the sender must"," have funds to cover the deposit.",""," - `proposal_hash`: The hash of the proposal preimage."," - `value`: The amount of deposit (must be at least `MinimumDeposit`).",""," Emits `Proposed`.",""," Weight: `O(p)`"]},{"Name":"second","Args":[{"Name":"proposal","Type":"Compact\u003cPropIndex\u003e"},{"Name":"seconds_upper_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Signals agreement with a particular proposal.",""," The dispatch origin of this call must be _Signed_ and the sender"," must have funds to cover the deposit, equal to the original deposit.",""," - `proposal`: The index of the proposal to second."," - `seconds_upper_bound`: an upper bound on the current number of seconds on this","   proposal. Extrinsic is weighted according to this value with no refund.",""," Weight: `O(S)` where S is the number of seconds a proposal already has."]},{"Name":"vote","Args":[{"Name":"ref_index","Type":"Compact\u003cReferendumIndex\u003e"},{"Name":"vote","Type":"AccountVote\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"," otherwise it is a vote to keep the status quo.",""," The dispatch origin of this call must be _Signed_.",""," - `ref_index`: The index of the referendum to vote for."," - `vote`: The vote configuration.",""," Weight: `O(R)` where R is the number of referendums the voter has voted on."]},{"Name":"emergency_cancel","Args":[{"Name":"ref_index","Type":"ReferendumIndex"}],"Documentation":[" Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"," referendum.",""," The dispatch origin of this call must be `CancellationOrigin`.",""," -`ref_index`: The index of the referendum to cancel.",""," Weight: `O(1)`."]},{"Name":"external_propose","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Schedule a referendum to be tabled once it is legal to schedule an external"," referendum.",""," The dispatch origin of this call must be `ExternalOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal.",""," Weight: `O(V)` with V number of vetoers in the blacklist of proposal.","   Decoding vec of length V. Charged as maximum"]},{"Name":"external_propose_majority","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Schedule a majority-carries referendum to be tabled next once it is legal to schedule"," an external referendum.",""," The dispatch of this call must be `ExternalMajorityOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal.",""," Unlike `external_propose`, blacklisting has no effect on this and it may replace a"," pre-scheduled `external_propose` call.",""," Weight: `O(1)`"]},{"Name":"external_propose_default","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"," schedule an external referendum.",""," The dispatch of this call must be `ExternalDefaultOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal.",""," Unlike `external_propose`, blacklisting has no effect on this and it may replace a"," pre-scheduled `external_propose` call.",""," Weight: `O(1)`"]},{"Name":"fast_track","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"voting_period","Type":"T::BlockNumber"},{"Name":"delay","Type":"T::BlockNumber"}],"Documentation":[" Schedule the currently externally-proposed majority-carries referendum to be tabled"," immediately. If there is no externally-proposed referendum currently, or if there is one"," but it is not a majority-carries referendum then it fails.",""," The dispatch of this call must be `FastTrackOrigin`.",""," - `proposal_hash`: The hash of the current external proposal."," - `voting_period`: The period that is allowed for voting on this proposal. Increased to","   `FastTrackVotingPeriod` if too low."," - `delay`: The number of block after voting has ended in approval and this should be","   enacted. This doesn't have a minimum amount.",""," Emits `Started`.",""," Weight: `O(1)`"]},{"Name":"veto_external","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Veto and blacklist the external proposal hash.",""," The dispatch origin of this call must be `VetoOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",""," Emits `Vetoed`.",""," Weight: `O(V + log(V))` where V is number of `existing vetoers`"]},{"Name":"cancel_referendum","Args":[{"Name":"ref_index","Type":"Compact\u003cReferendumIndex\u003e"}],"Documentation":[" Remove a referendum.",""," The dispatch origin of this call must be _Root_.",""," - `ref_index`: The index of the referendum to cancel.",""," # Weight: `O(1)`."]},{"Name":"cancel_queued","Args":[{"Name":"which","Type":"ReferendumIndex"}],"Documentation":[" Cancel a proposal queued for enactment.",""," The dispatch origin of this call must be _Root_.",""," - `which`: The index of the referendum to cancel.",""," Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]},{"Name":"delegate","Args":[{"Name":"to","Type":"T::AccountId"},{"Name":"conviction","Type":"Conviction"},{"Name":"balance","Type":"BalanceOf\u003cT\u003e"}],"Documentation":[" Delegate the voting power (with some given conviction) of the sending account.",""," The balance delegated is locked for as long as it's delegated, and thereafter for the"," time appropriate for the conviction's lock period.",""," The dispatch origin of this call must be _Signed_, and the signing account must either:","   - be delegating already; or","   - have no voting activity (if there is, then it will need to be removed/consolidated","     through `reap_vote` or `unvote`).",""," - `to`: The account whose voting the `target` account's voting power will follow."," - `conviction`: The conviction that will be attached to the delegated votes. When the","   account is undelegated, the funds will be locked for the corresponding period."," - `balance`: The amount of the account's balance to be used in delegating. This must","   not be more than the account's current balance.",""," Emits `Delegated`.",""," Weight: `O(R)` where R is the number of referendums the voter delegating to has","   voted on. Weight is charged as if maximum votes."]},{"Name":"undelegate","Args":null,"Documentation":[" Undelegate the voting power of the sending account.",""," Tokens may be unlocked following once an amount of time consistent with the lock period"," of the conviction with which the delegation was issued.",""," The dispatch origin of this call must be _Signed_ and the signing account must be"," currently delegating.",""," Emits `Undelegated`.",""," Weight: `O(R)` where R is the number of referendums the voter delegating to has","   voted on. Weight is charged as if maximum votes."]},{"Name":"clear_public_proposals","Args":null,"Documentation":[" Clears all public proposals.",""," The dispatch origin of this call must be _Root_.",""," Weight: `O(1)`."]},{"Name":"note_preimage","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Register the preimage for an upcoming proposal. This doesn't require the proposal to be"," in the dispatch queue but does require a deposit, returned once enacted.",""," The dispatch origin of this call must be _Signed_.",""," - `encoded_proposal`: The preimage of a proposal.",""," Emits `PreimageNoted`.",""," Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]},{"Name":"note_preimage_operational","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]},{"Name":"note_imminent_preimage","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Register the preimage for an upcoming proposal. This requires the proposal to be"," in the dispatch queue. No deposit is needed. When this call is successful, i.e."," the preimage has not been uploaded before and matches some imminent proposal,"," no fee is paid.",""," The dispatch origin of this call must be _Signed_.",""," - `encoded_proposal`: The preimage of a proposal.",""," Emits `PreimageNoted`.",""," Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]},{"Name":"note_imminent_preimage_operational","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]},{"Name":"reap_preimage","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"proposal_len_upper_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Remove an expired proposal preimage and collect the deposit.",""," The dispatch origin of this call must be _Signed_.",""," - `proposal_hash`: The preimage hash of a proposal."," - `proposal_length_upper_bound`: an upper bound on length of the proposal.","   Extrinsic is weighted according to this value with no refund.",""," This will only work after `VotingPeriod` blocks from the time that the preimage was"," noted, if it's the same account doing it. If it's a different account, then it'll only"," work an additional `EnactmentPeriod` later.",""," Emits `PreimageReaped`.",""," Weight: `O(D)` where D is length of proposal."]},{"Name":"unlock","Args":[{"Name":"target","Type":"T::AccountId"}],"Documentation":[" Unlock tokens that have an expired lock.",""," The dispatch origin of this call must be _Signed_.",""," - `target`: The account to remove the lock on.",""," Weight: `O(R)` with R number of vote of target."]},{"Name":"remove_vote","Args":[{"Name":"index","Type":"ReferendumIndex"}],"Documentation":[" Remove a vote for a referendum.",""," If:"," - the referendum was cancelled, or"," - the referendum is ongoing, or"," - the referendum has ended such that","   - the vote of the account was in opposition to the result; or","   - there was no conviction to the account's vote; or","   - the account made a split vote"," ...then the vote is removed cleanly and a following call to `unlock` may result in more"," funds being available.",""," If, however, the referendum has ended and:"," - it finished corresponding to the vote of the account, and"," - the account made a standard vote with conviction, and"," - the lock period of the conviction is not over"," ...then the lock will be aggregated into the overall account's lock, which may involve"," *overlocking* (where the two locks are combined into a single lock that is the maximum"," of both the amount locked and the time is it locked for).",""," The dispatch origin of this call must be _Signed_, and the signer must have a vote"," registered for referendum `index`.",""," - `index`: The index of referendum of the vote to be removed.",""," Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.","   Weight is calculated for the maximum number of vote."]},{"Name":"remove_other_vote","Args":[{"Name":"target","Type":"T::AccountId"},{"Name":"index","Type":"ReferendumIndex"}],"Documentation":[" Remove a vote for a referendum.",""," If the `target` is equal to the signer, then this function is exactly equivalent to"," `remove_vote`. If not equal to the signer, then the vote must have expired,"," either because the referendum was cancelled, because the voter lost the referendum or"," because the conviction period is over.",""," The dispatch origin of this call must be _Signed_.",""," - `target`: The account of the vote to be removed; this account must have voted for","   referendum `index`."," - `index`: The index of referendum of the vote to be removed.",""," Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.","   Weight is calculated for the maximum number of vote."]},{"Name":"enact_proposal","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"index","Type":"ReferendumIndex"}],"Documentation":[" Enact a proposal from a referendum. For now we just make the weight be the maximum."]},{"Name":"blacklist","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"maybe_ref_index","Type":"Option\u003cReferendumIndex\u003e"}],"Documentation":[" Permanently place a proposal into the blacklist. This prevents it from ever being"," proposed again.",""," If called on a queued public or external proposal, then this will result in it being"," removed. If the `ref_index` supplied is an active referendum with the proposal hash,"," then it will be cancelled.",""," The dispatch origin of this call must be `BlacklistOrigin`.",""," - `proposal_hash`: The proposal hash to blacklist permanently."," - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"," cancelled.",""," Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a","   reasonable value)."]},{"Name":"cancel_proposal","Args":[{"Name":"prop_index","Type":"Compact\u003cPropIndex\u003e"}],"Documentation":[" Remove a proposal.",""," The dispatch origin of this call must be `CancelProposalOrigin`.",""," - `prop_index`: The index of the proposal to cancel.",""," Weight: `O(p)` where `p = PublicProps::\u003cT\u003e::decode_len()`"]}],"HasEvents":true,"Events":[{"Name":"Proposed","Args":["PropIndex","Balance"],"Documentation":[" A motion has been proposed by a public account. \\[proposal_index, deposit\\]"]},{"Name":"Tabled","Args":["PropIndex","Balance","Vec\u003cAccountId\u003e"],"Documentation":[" A public proposal has been tabled for referendum vote. \\[proposal_index, deposit, depositors\\]"]},{"Name":"ExternalTabled","Args":null,"Documentation":[" An external proposal has been tabled."]},{"Name":"Started","Args":["ReferendumIndex","VoteThreshold"],"Documentation":[" A referendum has begun. \\[ref_index, threshold\\]"]},{"Name":"Passed","Args":["ReferendumIndex"],"Documentation":[" A proposal has been approved by referendum. \\[ref_index\\]"]},{"Name":"NotPassed","Args":["ReferendumIndex"],"Documentation":[" A proposal has been rejected by referendum. \\[ref_index\\]"]},{"Name":"Cancelled","Args":["ReferendumIndex"],"Documentation":[" A referendum has been cancelled. \\[ref_index\\]"]},{"Name":"Executed","Args":["ReferendumIndex","DispatchResult"],"Documentation":[" A proposal has been enacted. \\[ref_index, result\\]"]},{"Name":"Delegated","Args":["AccountId","AccountId"],"Documentation":[" An account has delegated their vote to another account. \\[who, target\\]"]},{"Name":"Undelegated","Args":["AccountId"],"Documentation":[" An \\[account\\] has cancelled a previous delegation operation."]},{"Name":"Vetoed","Args":["AccountId","Hash","BlockNumber"],"Documentation":[" An external proposal has been vetoed. \\[who, proposal_hash, until\\]"]},{"Name":"PreimageNoted","Args":["Hash","AccountId","Balance"],"Documentation":[" A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"]},{"Name":"PreimageUsed","Args":["Hash","AccountId","Balance"],"Documentation":[" A proposal preimage was removed and used (the deposit was returned)."," \\[proposal_hash, provider, deposit\\]"]},{"Name":"PreimageInvalid","Args":["Hash","ReferendumIndex"],"Documentation":[" A proposal could not be executed because its preimage was invalid."," \\[proposal_hash, ref_index\\]"]},{"Name":"PreimageMissing","Args":["Hash","ReferendumIndex"],"Documentation":[" A proposal could not be executed because its preimage was missing."," \\[proposal_hash, ref_index\\]"]},{"Name":"PreimageReaped","Args":["Hash","AccountId","Balance","AccountId"],"Documentation":[" A registered preimage was removed and the deposit collected by the reaper."," \\[proposal_hash, provider, deposit, reaper\\]"]},{"Name":"Blacklisted","Args":["Hash"],"Documentation":[" A proposal \\[hash\\] has been blacklisted permanently."]}],"Constants":[{"Name":"EnactmentPeriod","Type":"T::BlockNumber","Value":"QDgAAA==","Documentation":[" The minimum period of locking and the period between a proposal being approved and enacted.",""," It should generally be a little more than the unstake period to ensure that"," voting stakers have an opportunity to remove themselves from the system in the case where"," they are on the losing side of a vote."]},{"Name":"LaunchPeriod","Type":"T::BlockNumber","Value":"4MQAAA==","Documentation":[" How often (in blocks) new public referenda are launched."]},{"Name":"VotingPeriod","Type":"T::BlockNumber","Value":"4MQAAA==","Documentation":[" How often (in blocks) to check for new votes."]},{"Name":"MinimumDeposit","Type":"BalanceOf\u003cT\u003e","Value":"AEB6EPNaAAAAAAAAAAAAAA==","Documentation":[" The minimum amount to be used as a deposit for a public referendum proposal."]},{"Name":"InstantAllowed","Type":"bool","Value":"AQ==","Documentation":[" Indicator for whether an emergency origin is even allowed to happen. Some chains may want"," to set this permanently to `false`, others may want to condition it on things such as"," an upgrade having happened recently."]},{"Name":"FastTrackVotingPeriod","Type":"T::BlockNumber","Value":"hAMAAA==","Documentation":[" Minimum voting period allowed for a fast-track referendum."]},{"Name":"CooloffPeriod","Type":"T::BlockNumber","Value":"4MQAAA==","Documentation":[" Period in blocks where an external proposal may not be re-submitted after being vetoed."]},{"Name":"PreimageByteDeposit","Type":"BalanceOf\u003cT\u003e","Value":"AOH1BQAAAAAAAAAAAAAAAA==","Documentation":[" The amount of balance that must be deposited per byte of preimage stored."]},{"Name":"MaxVotes","Type":"u32","Value":"ZAAAAA==","Documentation":[" The maximum number of votes for an account.",""," Also used to compute weight, an overly big value can"," lead to extrinsic with very big weight: see `delegate` for instance."]},{"Name":"MaxProposals","Type":"u32","Value":"ZAAAAA==","Documentation":[" The maximum number of public proposals that can exist at any time."]}],"Errors":[{"Name":"ValueLow","Documentation":[" Value too low"]},{"Name":"ProposalMissing","Documentation":[" Proposal does not exist"]},{"Name":"AlreadyCanceled","Documentation":[" Cannot cancel the same proposal twice"]},{"Name":"DuplicateProposal","Documentation":[" Proposal already made"]},{"Name":"ProposalBlacklisted","Documentation":[" Proposal still blacklisted"]},{"Name":"NotSimpleMajority","Documentation":[" Next external proposal not simple majority"]},{"Name":"InvalidHash","Documentation":[" Invalid hash"]},{"Name":"NoProposal","Documentation":[" No external proposal"]},{"Name":"AlreadyVetoed","Documentation":[" Identity may not veto a proposal twice"]},{"Name":"DuplicatePreimage","Documentation":[" Preimage already noted"]},{"Name":"NotImminent","Documentation":[" Not imminent"]},{"Name":"TooEarly","Documentation":[" Too early"]},{"Name":"Imminent","Documentation":[" Imminent"]},{"Name":"PreimageMissing","Documentation":[" Preimage not found"]},{"Name":"ReferendumInvalid","Documentation":[" Vote given for invalid referendum"]},{"Name":"PreimageInvalid","Documentation":[" Invalid preimage"]},{"Name":"NoneWaiting","Documentation":[" No proposals waiting"]},{"Name":"NotVoter","Documentation":[" The given account did not vote on the referendum."]},{"Name":"NoPermission","Documentation":[" The actor has no permission to conduct the action."]},{"Name":"AlreadyDelegating","Documentation":[" The account is already delegating."]},{"Name":"InsufficientFunds","Documentation":[" Too high a balance was provided that the account cannot afford."]},{"Name":"NotDelegating","Documentation":[" The account is not currently delegating."]},{"Name":"VotesExist","Documentation":[" The account currently has votes attached to it and the operation cannot succeed until"," these are removed, either through `unvote` or `reap_vote`."]},{"Name":"InstantNotAllowed","Documentation":[" The instant referendum origin is currently disallowed."]},{"Name":"Nonsense","Documentation":[" Delegation to oneself makes no sense."]},{"Name":"WrongUpperBound","Documentation":[" Invalid upper bound."]},{"Name":"MaxVotesReached","Documentation":[" Maximum number of votes reached."]},{"Name":"TooManyProposals","Documentation":[" Maximum number of proposals reached."]}],"Index":30},{"Name":"Council","HasStorage":true,"Storage":{"Prefix":"Instance1Collective","Items":[{"Name":"Proposals","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BoundedVec\u003cT::Hash, T::MaxProposals\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The hashes of the active proposals."]},{"Name":"ProposalOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"\u003cT as Config\u003cI\u003e\u003e::Proposal","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Actual proposal for a given hash, if it's current."]},{"Name":"Voting","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"Votes\u003cT::AccountId, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Votes on a given proposal, if it is ongoing."]},{"Name":"ProposalCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Proposals so far."]},{"Name":"Members","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AccountId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current members of the collective. This is stored sorted (just by value)."]},{"Name":"Prime","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::AccountId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The prime member that helps determine the default vote behavior in case of absentations."]}]},"HasCalls":true,"Calls":[{"Name":"set_members","Args":[{"Name":"new_members","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"prime","Type":"Option\u003cT::AccountId\u003e"},{"Name":"old_count","Type":"MemberCount"}],"Documentation":[" Set the collective's membership.",""," - `new_members`: The new member list. Be nice to the chain and provide it sorted."," - `prime`: The prime member whose vote sets the default."," - `old_count`: The upper bound for the previous number of members in storage.","                Used for weight estimation.",""," Requires root origin.",""," NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but","       the weight estimations rely on it to estimate dispatchable weight.",""," # \u003cweight\u003e"," ## Weight"," - `O(MP + N)` where:","   - `M` old-members-count (code- and governance-bounded)","   - `N` new-members-count (code- and governance-bounded)","   - `P` proposals-count (code-bounded)"," - DB:","   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members","   - 1 storage read (codec `O(P)`) for reading the proposals","   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal","   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"," # \u003c/weight\u003e"]},{"Name":"execute","Args":[{"Name":"proposal","Type":"Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Dispatch a proposal from a member using the `Member` origin.",""," Origin must be a member of the collective.",""," # \u003cweight\u003e"," ## Weight"," - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`"," - DB: 1 read (codec `O(M)`) + DB access of `proposal`"," - 1 event"," # \u003c/weight\u003e"]},{"Name":"propose","Args":[{"Name":"threshold","Type":"Compact\u003cMemberCount\u003e"},{"Name":"proposal","Type":"Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Add a new proposal to either be voted on or executed directly.",""," Requires the sender to be member.",""," `threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)"," or put up for voting.",""," # \u003cweight\u003e"," ## Weight"," - `O(B + M + P1)` or `O(B + M + P2)` where:","   - `B` is `proposal` size in bytes (length-fee-bounded)","   - `M` is members-count (code- and governance-bounded)","   - branching is influenced by `threshold` where:","     - `P1` is proposal execution complexity (`threshold \u003c 2`)","     - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)"," - DB:","   - 1 storage read `is_member` (codec `O(M)`)","   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)","   - DB accesses influenced by `threshold`:","     - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)","     - OR proposal insertion (`threshold \u003c= 2`)","       - 1 storage mutation `Proposals` (codec `O(P2)`)","       - 1 storage mutation `ProposalCount` (codec `O(1)`)","       - 1 storage write `ProposalOf` (codec `O(B)`)","       - 1 storage write `Voting` (codec `O(M)`)","   - 1 event"," # \u003c/weight\u003e"]},{"Name":"vote","Args":[{"Name":"proposal","Type":"T::Hash"},{"Name":"index","Type":"Compact\u003cProposalIndex\u003e"},{"Name":"approve","Type":"bool"}],"Documentation":[" Add an aye or nay vote for the sender to the given proposal.",""," Requires the sender to be a member.",""," Transaction fees will be waived if the member is voting on any particular proposal"," for the first time and the call is successful. Subsequent vote changes will charge a fee."," # \u003cweight\u003e"," ## Weight"," - `O(M)` where `M` is members-count (code- and governance-bounded)"," - DB:","   - 1 storage read `Members` (codec `O(M)`)","   - 1 storage mutation `Voting` (codec `O(M)`)"," - 1 event"," # \u003c/weight\u003e"]},{"Name":"close","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"index","Type":"Compact\u003cProposalIndex\u003e"},{"Name":"proposal_weight_bound","Type":"Compact\u003cWeight\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Close a vote that is either approved, disapproved or whose voting period has ended.",""," May be called by any signed account in order to finish voting and close the proposal.",""," If called before the end of the voting period it will only close the vote if it is"," has enough votes to be approved or disapproved.",""," If called after the end of the voting period abstentions are counted as rejections"," unless there is a prime member set and the prime member cast an approval.",""," If the close operation completes successfully with disapproval, the transaction fee will"," be waived. Otherwise execution of the approved operation will be charged to the caller.",""," + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal."," + `length_bound`: The upper bound for the length of the proposal in storage. Checked via","                   `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",""," # \u003cweight\u003e"," ## Weight"," - `O(B + M + P1 + P2)` where:","   - `B` is `proposal` size in bytes (length-fee-bounded)","   - `M` is members-count (code- and governance-bounded)","   - `P1` is the complexity of `proposal` preimage.","   - `P2` is proposal-count (code-bounded)"," - DB:","  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)","  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)","  - any mutations done while executing `proposal` (`P1`)"," - up to 3 events"," # \u003c/weight\u003e"]},{"Name":"disapprove_proposal","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Disapprove a proposal, close, and remove it from the system, regardless of its current state.",""," Must be called by the Root origin.",""," Parameters:"," * `proposal_hash`: The hash of the proposal that should be disapproved.",""," # \u003cweight\u003e"," Complexity: O(P) where P is the number of max proposals"," DB Weight:"," * Reads: Proposals"," * Writes: Voting, Proposals, ProposalOf"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Proposed","Args":["AccountId","ProposalIndex","Hash","MemberCount"],"Documentation":[" A motion (given hash) has been proposed (by given account) with a threshold (given"," `MemberCount`)."," \\[account, proposal_index, proposal_hash, threshold\\]"]},{"Name":"Voted","Args":["AccountId","Hash","bool","MemberCount","MemberCount"],"Documentation":[" A motion (given hash) has been voted on by given account, leaving"," a tally (yes votes and no votes given respectively as `MemberCount`)."," \\[account, proposal_hash, voted, yes, no\\]"]},{"Name":"Approved","Args":["Hash"],"Documentation":[" A motion was approved by the required threshold."," \\[proposal_hash\\]"]},{"Name":"Disapproved","Args":["Hash"],"Documentation":[" A motion was not approved by the required threshold."," \\[proposal_hash\\]"]},{"Name":"Executed","Args":["Hash","DispatchResult"],"Documentation":[" A motion was executed; result will be `Ok` if it returned without error."," \\[proposal_hash, result\\]"]},{"Name":"MemberExecuted","Args":["Hash","DispatchResult"],"Documentation":[" A single member did some action; result will be `Ok` if it returned without error."," \\[proposal_hash, result\\]"]},{"Name":"Closed","Args":["Hash","MemberCount","MemberCount"],"Documentation":[" A proposal was closed because its threshold was reached or after its duration was up."," \\[proposal_hash, yes, no\\]"]}],"Constants":null,"Errors":[{"Name":"NotMember","Documentation":[" Account is not a member"]},{"Name":"DuplicateProposal","Documentation":[" Duplicate proposals not allowed"]},{"Name":"ProposalMissing","Documentation":[" Proposal must exist"]},{"Name":"WrongIndex","Documentation":[" Mismatched index"]},{"Name":"DuplicateVote","Documentation":[" Duplicate vote ignored"]},{"Name":"AlreadyInitialized","Documentation":[" Members are already initialized!"]},{"Name":"TooEarly","Documentation":[" The close call was made too early, before the end of the voting."]},{"Name":"TooManyProposals","Documentation":[" There can only be a maximum of `MaxProposals` active proposals."]},{"Name":"WrongProposalWeight","Documentation":[" The given weight bound for the proposal was too low."]},{"Name":"WrongProposalLength","Documentation":[" The given length bound for the proposal was too low."]}],"Index":31},{"Name":"TechnicalCommittee","HasStorage":true,"Storage":{"Prefix":"Instance2Collective","Items":[{"Name":"Proposals","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BoundedVec\u003cT::Hash, T::MaxProposals\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The hashes of the active proposals."]},{"Name":"ProposalOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"\u003cT as Config\u003cI\u003e\u003e::Proposal","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Actual proposal for a given hash, if it's current."]},{"Name":"Voting","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"Votes\u003cT::AccountId, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Votes on a given proposal, if it is ongoing."]},{"Name":"ProposalCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Proposals so far."]},{"Name":"Members","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AccountId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current members of the collective. This is stored sorted (just by value)."]},{"Name":"Prime","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::AccountId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The prime member that helps determine the default vote behavior in case of absentations."]}]},"HasCalls":true,"Calls":[{"Name":"set_members","Args":[{"Name":"new_members","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"prime","Type":"Option\u003cT::AccountId\u003e"},{"Name":"old_count","Type":"MemberCount"}],"Documentation":[" Set the collective's membership.",""," - `new_members`: The new member list. Be nice to the chain and provide it sorted."," - `prime`: The prime member whose vote sets the default."," - `old_count`: The upper bound for the previous number of members in storage.","                Used for weight estimation.",""," Requires root origin.",""," NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but","       the weight estimations rely on it to estimate dispatchable weight.",""," # \u003cweight\u003e"," ## Weight"," - `O(MP + N)` where:","   - `M` old-members-count (code- and governance-bounded)","   - `N` new-members-count (code- and governance-bounded)","   - `P` proposals-count (code-bounded)"," - DB:","   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members","   - 1 storage read (codec `O(P)`) for reading the proposals","   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal","   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"," # \u003c/weight\u003e"]},{"Name":"execute","Args":[{"Name":"proposal","Type":"Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Dispatch a proposal from a member using the `Member` origin.",""," Origin must be a member of the collective.",""," # \u003cweight\u003e"," ## Weight"," - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`"," - DB: 1 read (codec `O(M)`) + DB access of `proposal`"," - 1 event"," # \u003c/weight\u003e"]},{"Name":"propose","Args":[{"Name":"threshold","Type":"Compact\u003cMemberCount\u003e"},{"Name":"proposal","Type":"Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Add a new proposal to either be voted on or executed directly.",""," Requires the sender to be member.",""," `threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)"," or put up for voting.",""," # \u003cweight\u003e"," ## Weight"," - `O(B + M + P1)` or `O(B + M + P2)` where:","   - `B` is `proposal` size in bytes (length-fee-bounded)","   - `M` is members-count (code- and governance-bounded)","   - branching is influenced by `threshold` where:","     - `P1` is proposal execution complexity (`threshold \u003c 2`)","     - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)"," - DB:","   - 1 storage read `is_member` (codec `O(M)`)","   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)","   - DB accesses influenced by `threshold`:","     - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)","     - OR proposal insertion (`threshold \u003c= 2`)","       - 1 storage mutation `Proposals` (codec `O(P2)`)","       - 1 storage mutation `ProposalCount` (codec `O(1)`)","       - 1 storage write `ProposalOf` (codec `O(B)`)","       - 1 storage write `Voting` (codec `O(M)`)","   - 1 event"," # \u003c/weight\u003e"]},{"Name":"vote","Args":[{"Name":"proposal","Type":"T::Hash"},{"Name":"index","Type":"Compact\u003cProposalIndex\u003e"},{"Name":"approve","Type":"bool"}],"Documentation":[" Add an aye or nay vote for the sender to the given proposal.",""," Requires the sender to be a member.",""," Transaction fees will be waived if the member is voting on any particular proposal"," for the first time and the call is successful. Subsequent vote changes will charge a fee."," # \u003cweight\u003e"," ## Weight"," - `O(M)` where `M` is members-count (code- and governance-bounded)"," - DB:","   - 1 storage read `Members` (codec `O(M)`)","   - 1 storage mutation `Voting` (codec `O(M)`)"," - 1 event"," # \u003c/weight\u003e"]},{"Name":"close","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"index","Type":"Compact\u003cProposalIndex\u003e"},{"Name":"proposal_weight_bound","Type":"Compact\u003cWeight\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Close a vote that is either approved, disapproved or whose voting period has ended.",""," May be called by any signed account in order to finish voting and close the proposal.",""," If called before the end of the voting period it will only close the vote if it is"," has enough votes to be approved or disapproved.",""," If called after the end of the voting period abstentions are counted as rejections"," unless there is a prime member set and the prime member cast an approval.",""," If the close operation completes successfully with disapproval, the transaction fee will"," be waived. Otherwise execution of the approved operation will be charged to the caller.",""," + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal."," + `length_bound`: The upper bound for the length of the proposal in storage. Checked via","                   `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",""," # \u003cweight\u003e"," ## Weight"," - `O(B + M + P1 + P2)` where:","   - `B` is `proposal` size in bytes (length-fee-bounded)","   - `M` is members-count (code- and governance-bounded)","   - `P1` is the complexity of `proposal` preimage.","   - `P2` is proposal-count (code-bounded)"," - DB:","  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)","  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)","  - any mutations done while executing `proposal` (`P1`)"," - up to 3 events"," # \u003c/weight\u003e"]},{"Name":"disapprove_proposal","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Disapprove a proposal, close, and remove it from the system, regardless of its current state.",""," Must be called by the Root origin.",""," Parameters:"," * `proposal_hash`: The hash of the proposal that should be disapproved.",""," # \u003cweight\u003e"," Complexity: O(P) where P is the number of max proposals"," DB Weight:"," * Reads: Proposals"," * Writes: Voting, Proposals, ProposalOf"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Proposed","Args":["AccountId","ProposalIndex","Hash","MemberCount"],"Documentation":[" A motion (given hash) has been proposed (by given account) with a threshold (given"," `MemberCount`)."," \\[account, proposal_index, proposal_hash, threshold\\]"]},{"Name":"Voted","Args":["AccountId","Hash","bool","MemberCount","MemberCount"],"Documentation":[" A motion (given hash) has been voted on by given account, leaving"," a tally (yes votes and no votes given respectively as `MemberCount`)."," \\[account, proposal_hash, voted, yes, no\\]"]},{"Name":"Approved","Args":["Hash"],"Documentation":[" A motion was approved by the required threshold."," \\[proposal_hash\\]"]},{"Name":"Disapproved","Args":["Hash"],"Documentation":[" A motion was not approved by the required threshold."," \\[proposal_hash\\]"]},{"Name":"Executed","Args":["Hash","DispatchResult"],"Documentation":[" A motion was executed; result will be `Ok` if it returned without error."," \\[proposal_hash, result\\]"]},{"Name":"MemberExecuted","Args":["Hash","DispatchResult"],"Documentation":[" A single member did some action; result will be `Ok` if it returned without error."," \\[proposal_hash, result\\]"]},{"Name":"Closed","Args":["Hash","MemberCount","MemberCount"],"Documentation":[" A proposal was closed because its threshold was reached or after its duration was up."," \\[proposal_hash, yes, no\\]"]}],"Constants":null,"Errors":[{"Name":"NotMember","Documentation":[" Account is not a member"]},{"Name":"DuplicateProposal","Documentation":[" Duplicate proposals not allowed"]},{"Name":"ProposalMissing","Documentation":[" Proposal must exist"]},{"Name":"WrongIndex","Documentation":[" Mismatched index"]},{"Name":"DuplicateVote","Documentation":[" Duplicate vote ignored"]},{"Name":"AlreadyInitialized","Documentation":[" Members are already initialized!"]},{"Name":"TooEarly","Documentation":[" The close call was made too early, before the end of the voting."]},{"Name":"TooManyProposals","Documentation":[" There can only be a maximum of `MaxProposals` active proposals."]},{"Name":"WrongProposalWeight","Documentation":[" The given weight bound for the proposal was too low."]},{"Name":"WrongProposalLength","Documentation":[" The given length bound for the proposal was too low."]}],"Index":32},{"Name":"PhragmenElection","HasStorage":true,"Storage":{"Prefix":"PhragmenElection","Items":[{"Name":"Members","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cSeatHolder\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current elected members.",""," Invariant: Always sorted based on account id."]},{"Name":"RunnersUp","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cSeatHolder\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current reserved runners-up.",""," Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the"," last (i.e. _best_) runner-up will be replaced."]},{"Name":"Candidates","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003c(T::AccountId, BalanceOf\u003cT\u003e)\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The present candidate list. A current member or runner-up can never enter this vector"," and is always implicitly assumed to be a candidate.",""," Second element is the deposit.",""," Invariant: Always sorted based on account id."]},{"Name":"ElectionRounds","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The total number of vote rounds that have happened, excluding the upcoming one."]},{"Name":"Voting","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"Voter\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA","Documentation":[" Votes and locked stake of a particular voter.",""," TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]}]},"HasCalls":true,"Calls":[{"Name":"vote","Args":[{"Name":"votes","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Vote for a set of candidates for the upcoming round of election. This can be called to"," set the initial votes, or update already existing votes.",""," Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is"," reserved. The deposit is based on the number of votes and can be updated over time.",""," The `votes` should:","   - not be empty.","   - be less than the number of possible candidates. Note that all current members and","     runners-up are also automatically candidates for the next round.",""," If `value` is more than `who`'s total balance, then the maximum of the two is used.",""," The dispatch origin of this call must be signed.",""," ### Warning",""," It is the responsibility of the caller to **NOT** place all of their balance into the"," lock and keep some for further operations.",""," # \u003cweight\u003e"," We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less."," # \u003c/weight\u003e"]},{"Name":"remove_voter","Args":null,"Documentation":[" Remove `origin` as a voter.",""," This removes the lock and returns the deposit.",""," The dispatch origin of this call must be signed and be a voter."]},{"Name":"submit_candidacy","Args":[{"Name":"candidate_count","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Submit oneself for candidacy. A fixed amount of deposit is recorded.",""," All candidates are wiped at the end of the term. They either become a member/runner-up,"," or leave the system while their deposit is slashed.",""," The dispatch origin of this call must be signed.",""," ### Warning",""," Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]"," to get their deposit back. Losing the spot in an election will always lead to a slash.",""," # \u003cweight\u003e"," The number of current candidates must be provided as witness data."," # \u003c/weight\u003e"]},{"Name":"renounce_candidacy","Args":[{"Name":"renouncing","Type":"Renouncing"}],"Documentation":[" Renounce one's intention to be a candidate for the next election round. 3 potential"," outcomes exist:",""," - `origin` is a candidate and not elected in any set. In this case, the deposit is","   unreserved, returned and origin is removed as a candidate."," - `origin` is a current runner-up. In this case, the deposit is unreserved, returned and","   origin is removed as a runner-up."," - `origin` is a current member. In this case, the deposit is unreserved and origin is","   removed as a member, consequently not being a candidate for the next round anymore.","   Similar to [`remove_member`](Self::remove_member), if replacement runners exists,","   they are immediately used. If the prime is renouncing, then no prime will exist until","   the next round.",""," The dispatch origin of this call must be signed, and have one of the above roles.",""," # \u003cweight\u003e"," The type of renouncing must be provided as witness data."," # \u003c/weight\u003e"]},{"Name":"remove_member","Args":[{"Name":"who","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"has_replacement","Type":"bool"}],"Documentation":[" Remove a particular member from the set. This is effective immediately and the bond of"," the outgoing member is slashed.",""," If a runner-up is available, then the best runner-up will be removed and replaces the"," outgoing member. Otherwise, a new phragmen election is started.",""," The dispatch origin of this call must be root.",""," Note that this does not affect the designated block number of the next election.",""," # \u003cweight\u003e"," If we have a replacement, we use a small weight. Else, since this is a root call and"," will go into phragmen, we assume full block for now."," # \u003c/weight\u003e"]},{"Name":"clean_defunct_voters","Args":[{"Name":"_num_voters","Type":"u32"},{"Name":"_num_defunct","Type":"u32"}],"Documentation":[" Clean all voters who are defunct (i.e. they do not serve any purpose at all). The"," deposit of the removed voters are returned.",""," This is an root function to be used only for cleaning the state.",""," The dispatch origin of this call must be root.",""," # \u003cweight\u003e"," The total number of voters and those that are defunct must be provided as witness data."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"NewTerm","Args":["Vec\u003c(AccountId, Balance)\u003e"],"Documentation":[" A new term with \\[new_members\\]. This indicates that enough candidates existed to run"," the election, not that enough have has been elected. The inner value must be examined"," for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"," slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"," begin with."]},{"Name":"EmptyTerm","Args":null,"Documentation":[" No (or not enough) candidates existed for this round. This is different from"," `NewTerm(\\[\\])`. See the description of `NewTerm`."]},{"Name":"ElectionError","Args":null,"Documentation":[" Internal error happened while trying to perform election."]},{"Name":"MemberKicked","Args":["AccountId"],"Documentation":[" A \\[member\\] has been removed. This should always be followed by either `NewTerm` or"," `EmptyTerm`."]},{"Name":"Renounced","Args":["AccountId"],"Documentation":[" Someone has renounced their candidacy."]},{"Name":"CandidateSlashed","Args":["AccountId","Balance"],"Documentation":[" A \\[candidate\\] was slashed by \\[amount\\] due to failing to obtain a seat as member or"," runner-up.",""," Note that old members and runners-up are also candidates."]},{"Name":"SeatHolderSlashed","Args":["AccountId","Balance"],"Documentation":[" A \\[seat holder\\] was slashed by \\[amount\\] by being forcefully removed from the set."]}],"Constants":[{"Name":"PalletId","Type":"LockIdentifier","Value":"cGhyZWxlY3Q=","Documentation":[" Identifier for the elections-phragmen pallet's lock"]},{"Name":"CandidacyBond","Type":"BalanceOf\u003cT\u003e","Value":"ABCl1OgAAAAAAAAAAAAAAA==","Documentation":[" How much should be locked up in order to submit one's candidacy."]},{"Name":"VotingBondBase","Type":"BalanceOf\u003cT\u003e","Value":"AFyI/qADAAAAAAAAAAAAAA==","Documentation":[" Base deposit associated with voting.",""," This should be sensibly high to economically ensure the pallet cannot be attacked by"," creating a gigantic number of votes."]},{"Name":"VotingBondFactor","Type":"BalanceOf\u003cT\u003e","Value":"AADrCL8BAAAAAAAAAAAAAA==","Documentation":[" The amount of bond that need to be locked for each vote (32 bytes)."]},{"Name":"DesiredMembers","Type":"u32","Value":"BwAAAA==","Documentation":[" Number of members to elect."]},{"Name":"DesiredRunnersUp","Type":"u32","Value":"BwAAAA==","Documentation":[" Number of runners_up to keep."]},{"Name":"TermDuration","Type":"T::BlockNumber","Value":"IBwAAA==","Documentation":[" How long each seat is kept. This defines the next block number at which an election"," round will happen. If set to zero, no elections are ever triggered and the module will"," be in passive mode."]}],"Errors":[{"Name":"UnableToVote","Documentation":[" Cannot vote when no candidates or members exist."]},{"Name":"NoVotes","Documentation":[" Must vote for at least one candidate."]},{"Name":"TooManyVotes","Documentation":[" Cannot vote more than candidates."]},{"Name":"MaximumVotesExceeded","Documentation":[" Cannot vote more than maximum allowed."]},{"Name":"LowBalance","Documentation":[" Cannot vote with stake less than minimum balance."]},{"Name":"UnableToPayBond","Documentation":[" Voter can not pay voting bond."]},{"Name":"MustBeVoter","Documentation":[" Must be a voter."]},{"Name":"ReportSelf","Documentation":[" Cannot report self."]},{"Name":"DuplicatedCandidate","Documentation":[" Duplicated candidate submission."]},{"Name":"MemberSubmit","Documentation":[" Member cannot re-submit candidacy."]},{"Name":"RunnerUpSubmit","Documentation":[" Runner cannot re-submit candidacy."]},{"Name":"InsufficientCandidateFunds","Documentation":[" Candidate does not have enough funds."]},{"Name":"NotMember","Documentation":[" Not a member."]},{"Name":"InvalidWitnessData","Documentation":[" The provided count of number of candidates is incorrect."]},{"Name":"InvalidVoteCount","Documentation":[" The provided count of number of votes is incorrect."]},{"Name":"InvalidRenouncing","Documentation":[" The renouncing origin presented a wrong `Renouncing` parameter."]},{"Name":"InvalidReplacement","Documentation":[" Prediction regarding replacement after member removal is wrong."]}],"Index":33},{"Name":"CouncilMembership","HasStorage":true,"Storage":{"Prefix":"Instance1Membership","Items":[{"Name":"Members","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AccountId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current membership, stored as an ordered Vec."]},{"Name":"Prime","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::AccountId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current prime member, if one exists."]}]},"HasCalls":true,"Calls":[{"Name":"add_member","Args":[{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Add a member `who` to the set.",""," May only be called from `T::AddOrigin`."]},{"Name":"remove_member","Args":[{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Remove a member `who` from the set.",""," May only be called from `T::RemoveOrigin`."]},{"Name":"swap_member","Args":[{"Name":"remove","Type":"T::AccountId"},{"Name":"add","Type":"T::AccountId"}],"Documentation":[" Swap out one member `remove` for another `add`.",""," May only be called from `T::SwapOrigin`.",""," Prime membership is *not* passed from `remove` to `add`, if extant."]},{"Name":"reset_members","Args":[{"Name":"members","Type":"Vec\u003cT::AccountId\u003e"}],"Documentation":[" Change the membership to a new set, disregarding the existing membership. Be nice and"," pass `members` pre-sorted.",""," May only be called from `T::ResetOrigin`."]},{"Name":"change_key","Args":[{"Name":"new","Type":"T::AccountId"}],"Documentation":[" Swap out the sending member for some other key `new`.",""," May only be called from `Signed` origin of a current member.",""," Prime membership is passed from the origin account to `new`, if extant."]},{"Name":"set_prime","Args":[{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Set the prime member. Must be a current member.",""," May only be called from `T::PrimeOrigin`."]},{"Name":"clear_prime","Args":null,"Documentation":[" Remove the prime member if it exists.",""," May only be called from `T::PrimeOrigin`."]}],"HasEvents":true,"Events":[{"Name":"MemberAdded","Args":null,"Documentation":[" The given member was added; see the transaction for who."]},{"Name":"MemberRemoved","Args":null,"Documentation":[" The given member was removed; see the transaction for who."]},{"Name":"MembersSwapped","Args":null,"Documentation":[" Two members were swapped; see the transaction for who."]},{"Name":"MembersReset","Args":null,"Documentation":[" The membership was reset; see the transaction for who the new set is."]},{"Name":"KeyChanged","Args":null,"Documentation":[" One of the members' keys changed."]},{"Name":"Dummy","Args":["sp_std::marker::PhantomData\u003c(AccountId, Event)\u003e"],"Documentation":[" Phantom member, never used."]}],"Constants":null,"Errors":[{"Name":"AlreadyMember","Documentation":[" Already a member."]},{"Name":"NotMember","Documentation":[" Not a member."]}],"Index":34},{"Name":"TechnicalMembership","HasStorage":true,"Storage":{"Prefix":"Instance2Membership","Items":[{"Name":"Members","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AccountId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current membership, stored as an ordered Vec."]},{"Name":"Prime","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::AccountId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current prime member, if one exists."]}]},"HasCalls":true,"Calls":[{"Name":"add_member","Args":[{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Add a member `who` to the set.",""," May only be called from `T::AddOrigin`."]},{"Name":"remove_member","Args":[{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Remove a member `who` from the set.",""," May only be called from `T::RemoveOrigin`."]},{"Name":"swap_member","Args":[{"Name":"remove","Type":"T::AccountId"},{"Name":"add","Type":"T::AccountId"}],"Documentation":[" Swap out one member `remove` for another `add`.",""," May only be called from `T::SwapOrigin`.",""," Prime membership is *not* passed from `remove` to `add`, if extant."]},{"Name":"reset_members","Args":[{"Name":"members","Type":"Vec\u003cT::AccountId\u003e"}],"Documentation":[" Change the membership to a new set, disregarding the existing membership. Be nice and"," pass `members` pre-sorted.",""," May only be called from `T::ResetOrigin`."]},{"Name":"change_key","Args":[{"Name":"new","Type":"T::AccountId"}],"Documentation":[" Swap out the sending member for some other key `new`.",""," May only be called from `Signed` origin of a current member.",""," Prime membership is passed from the origin account to `new`, if extant."]},{"Name":"set_prime","Args":[{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Set the prime member. Must be a current member.",""," May only be called from `T::PrimeOrigin`."]},{"Name":"clear_prime","Args":null,"Documentation":[" Remove the prime member if it exists.",""," May only be called from `T::PrimeOrigin`."]}],"HasEvents":true,"Events":[{"Name":"MemberAdded","Args":null,"Documentation":[" The given member was added; see the transaction for who."]},{"Name":"MemberRemoved","Args":null,"Documentation":[" The given member was removed; see the transaction for who."]},{"Name":"MembersSwapped","Args":null,"Documentation":[" Two members were swapped; see the transaction for who."]},{"Name":"MembersReset","Args":null,"Documentation":[" The membership was reset; see the transaction for who the new set is."]},{"Name":"KeyChanged","Args":null,"Documentation":[" One of the members' keys changed."]},{"Name":"Dummy","Args":["sp_std::marker::PhantomData\u003c(AccountId, Event)\u003e"],"Documentation":[" Phantom member, never used."]}],"Constants":null,"Errors":[{"Name":"AlreadyMember","Documentation":[" Already a member."]},{"Name":"NotMember","Documentation":[" Not a member."]}],"Index":35},{"Name":"XcmpQueue","HasStorage":true,"Storage":{"Prefix":"XcmpQueue","Items":[{"Name":"InboundXcmpStatus","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003c(ParaId, InboundStatus, Vec\u003c(RelayBlockNumber, XcmpMessageFormat)\u003e,)\n\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Status of the inbound XCMP channels."]},{"Name":"InboundXcmpMessages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"ParaId","Key2":"RelayBlockNumber","Value":"Vec\u003cu8\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Inbound aggregate XCMP messages. It can only be one per ParaId/block."]},{"Name":"OutboundXcmpStatus","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003c(ParaId, OutboundStatus, bool, u16, u16)\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The non-empty XCMP channels in order of becoming non-empty, and the index of the first"," and last outbound message. If the two indices are equal, then it indicates an empty"," queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"," than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"," case of the need to send a high-priority signal message this block."," The bool is true if there is a signal message waiting to be sent."]},{"Name":"OutboundXcmpMessages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"ParaId","Key2":"u16","Value":"Vec\u003cu8\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The messages outbound in a given XCMP channel."]},{"Name":"SignalMessages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"ParaId","Value":"Vec\u003cu8\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Any signal messages waiting to be sent."]},{"Name":"QueueConfig","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"QueueConfigData","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AgAAAAUAAAABAAAAoIYBAAAAAAACAAAAAAAAAA==","Documentation":[" The configuration which controls the dynamics of the outbound queue."]}]},"HasCalls":true,"Calls":null,"HasEvents":true,"Events":[{"Name":"Success","Args":["Option\u003cHash\u003e"],"Documentation":[" Some XCM was executed ok."]},{"Name":"Fail","Args":["Option\u003cHash\u003e","XcmError"],"Documentation":[" Some XCM failed."]},{"Name":"BadVersion","Args":["Option\u003cHash\u003e"],"Documentation":[" Bad XCM version used."]},{"Name":"BadFormat","Args":["Option\u003cHash\u003e"],"Documentation":[" Bad XCM format used."]},{"Name":"UpwardMessageSent","Args":["Option\u003cHash\u003e"],"Documentation":[" An upward message was sent to the relay chain."]},{"Name":"XcmpMessageSent","Args":["Option\u003cHash\u003e"],"Documentation":[" An HRMP message was sent to a sibling parachain."]}],"Constants":null,"Errors":[{"Name":"FailedToSend","Documentation":[" Failed to send XCM message."]},{"Name":"BadXcmOrigin","Documentation":[" Bad XCM origin."]},{"Name":"BadXcm","Documentation":[" Bad XCM data."]}],"Index":40},{"Name":"PolkadotXcm","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":true,"Calls":[{"Name":"send","Args":[{"Name":"dest","Type":"Box\u003cVersionedMultiLocation\u003e"},{"Name":"message","Type":"Box\u003cVersionedXcm\u003c()\u003e\u003e"}],"Documentation":null},{"Name":"teleport_assets","Args":[{"Name":"dest","Type":"Box\u003cVersionedMultiLocation\u003e"},{"Name":"beneficiary","Type":"Box\u003cVersionedMultiLocation\u003e"},{"Name":"assets","Type":"Box\u003cVersionedMultiAssets\u003e"},{"Name":"fee_asset_item","Type":"u32"},{"Name":"dest_weight","Type":"Weight"}],"Documentation":[" Teleport some assets from the local chain to some destination chain.",""," Fee payment on the destination side is made from the first asset listed in the `assets` vector.",""," - `origin`: Must be capable of withdrawing the `assets` and executing XCM."," - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send","   from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."," - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be","   an `AccountId32` value."," - `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the","   `dest` side. May not be empty."," - `dest_weight`: Equal to the total weight on `dest` of the XCM message","   `Teleport { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`."]},{"Name":"reserve_transfer_assets","Args":[{"Name":"dest","Type":"Box\u003cVersionedMultiLocation\u003e"},{"Name":"beneficiary","Type":"Box\u003cVersionedMultiLocation\u003e"},{"Name":"assets","Type":"Box\u003cVersionedMultiAssets\u003e"},{"Name":"fee_asset_item","Type":"u32"},{"Name":"dest_weight","Type":"Weight"}],"Documentation":[" Transfer some assets from the local chain to the sovereign account of a destination chain and forward"," a notification XCM.",""," Fee payment on the destination side is made from the first asset listed in the `assets` vector.",""," - `origin`: Must be capable of withdrawing the `assets` and executing XCM."," - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send","   from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."," - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be","   an `AccountId32` value."," - `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the","   `dest` side."," - `dest_weight`: Equal to the total weight on `dest` of the XCM message","   `ReserveAssetDeposited { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`."]},{"Name":"execute","Args":[{"Name":"message","Type":"Box\u003cVersionedXcm\u003cT::Call\u003e\u003e"},{"Name":"max_weight","Type":"Weight"}],"Documentation":[" Execute an XCM message from a local, signed, origin.",""," An event is deposited indicating whether `msg` could be executed completely or only"," partially.",""," No more than `max_weight` will be used in its attempted execution. If this is less than the"," maximum amount of weight that the message could take to be executed, then no execution"," attempt will be made.",""," NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"," to completion; only that *some* of it was executed."]}],"HasEvents":true,"Events":[{"Name":"Attempted","Args":["xcm::latest::Outcome"],"Documentation":null},{"Name":"Sent","Args":["MultiLocation","MultiLocation","Xcm\u003c()\u003e"],"Documentation":null}],"Constants":null,"Errors":[{"Name":"Unreachable","Documentation":null},{"Name":"SendFailure","Documentation":null},{"Name":"Filtered","Documentation":[" The message execution fails the filter."]},{"Name":"UnweighableMessage","Documentation":[" The message's weight could not be determined."]},{"Name":"Empty","Documentation":[" The assets to be sent are empty."]},{"Name":"CannotReanchor","Documentation":[" Could not re-anchor the assets to declare the fees for the destination chain."]},{"Name":"TooManyAssets","Documentation":[" Too many assets have been attempted for transfer."]},{"Name":"InvalidOrigin","Documentation":[" Origin is invalid for sending."]},{"Name":"BadVersion","Documentation":[" The version of the `Versioned` value used is not able to be interpreted."]}],"Index":41},{"Name":"CumulusXcm","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":true,"Calls":null,"HasEvents":true,"Events":[{"Name":"InvalidFormat","Args":["[u8; 8]"],"Documentation":[" Downward message is invalid XCM."," \\[ id \\]"]},{"Name":"UnsupportedVersion","Args":["[u8; 8]"],"Documentation":[" Downward message is unsupported version of XCM."," \\[ id \\]"]},{"Name":"ExecutedDownward","Args":["[u8; 8]","Outcome"],"Documentation":[" Downward message executed with the given outcome."," \\[ id, outcome \\]"]}],"Constants":null,"Errors":null,"Index":42},{"Name":"DmpQueue","HasStorage":true,"Storage":{"Prefix":"DmpQueue","Items":[{"Name":"Configuration","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ConfigData","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AOQLVAIAAAA=","Documentation":[" The configuration."]},{"Name":"PageIndex","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"PageIndexData","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The page index."]},{"Name":"Pages","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"PageCounter","Value":"Vec\u003c(RelayBlockNumber, Vec\u003cu8\u003e)\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The queue pages."]},{"Name":"Overweight","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"OverweightIndex","Value":"(RelayBlockNumber, Vec\u003cu8\u003e)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The overweight messages."]}]},"HasCalls":true,"Calls":[{"Name":"service_overweight","Args":[{"Name":"index","Type":"OverweightIndex"},{"Name":"weight_limit","Type":"Weight"}],"Documentation":[" Service a single overweight message.",""," - `origin`: Must pass `ExecuteOverweightOrigin`."," - `index`: The index of the overweight message to service."," - `weight_limit`: The amount of weight that message execution may take.",""," Errors:"," - `Unknown`: Message of `index` is unknown."," - `OverLimit`: Message execution may use greater than `weight_limit`.",""," Events:"," - `OverweightServiced`: On success."]}],"HasEvents":true,"Events":[{"Name":"InvalidFormat","Args":["MessageId"],"Documentation":[" Downward message is invalid XCM."," \\[ id \\]"]},{"Name":"UnsupportedVersion","Args":["MessageId"],"Documentation":[" Downward message is unsupported version of XCM."," \\[ id \\]"]},{"Name":"ExecutedDownward","Args":["MessageId","Outcome"],"Documentation":[" Downward message executed with the given outcome."," \\[ id, outcome \\]"]},{"Name":"WeightExhausted","Args":["MessageId","Weight","Weight"],"Documentation":[" The weight limit for handling downward messages was reached."," \\[ id, remaining, required \\]"]},{"Name":"OverweightEnqueued","Args":["MessageId","OverweightIndex","Weight"],"Documentation":[" Downward message is overweight and was placed in the overweight queue."," \\[ id, index, required \\]"]},{"Name":"OverweightServiced","Args":["OverweightIndex","Weight"],"Documentation":[" Downward message from the overweight queue was executed."," \\[ index, used \\]"]}],"Constants":null,"Errors":[{"Name":"Unknown","Documentation":[" The message index given is unknown."]},{"Name":"OverLimit","Documentation":[" The amount of weight given is possibly not enough for executing the message."]}],"Index":43},{"Name":"Utility","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":true,"Calls":[{"Name":"batch","Args":[{"Name":"calls","Type":"Vec\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Send a batch of dispatch calls.",""," May be called from any origin.",""," - `calls`: The calls to be dispatched from the same origin. The number of call must not","   exceed the constant: `batched_calls_limit` (available in constant metadata).",""," If origin is root then call are dispatch without checking origin filter. (This includes"," bypassing `frame_system::Config::BaseCallFilter`).",""," # \u003cweight\u003e"," - Complexity: O(C) where C is the number of calls to be batched."," # \u003c/weight\u003e",""," This will return `Ok` in all circumstances. To determine the success of the batch, an"," event is deposited. If a call failed and the batch was interrupted, then the"," `BatchInterrupted` event is deposited, along with the number of successful calls made"," and the error of the failed call. If all were successful, then the `BatchCompleted`"," event is deposited."]},{"Name":"as_derivative","Args":[{"Name":"index","Type":"u16"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Send a call through an indexed pseudonym of the sender.",""," Filter from origin are passed along. The call will be dispatched with an origin which"," use the same filter as the origin of this call.",""," NOTE: If you need to ensure that any account-based filtering is not honored (i.e."," because you expect `proxy` to have been used prior in the call stack and you do not want"," the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"," in the Multisig pallet instead.",""," NOTE: Prior to version *12, this was called `as_limited_sub`.",""," The dispatch origin for this call must be _Signed_."]},{"Name":"batch_all","Args":[{"Name":"calls","Type":"Vec\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Send a batch of dispatch calls and atomically execute them."," The whole transaction will rollback and fail if any of the calls failed.",""," May be called from any origin.",""," - `calls`: The calls to be dispatched from the same origin. The number of call must not","   exceed the constant: `batched_calls_limit` (available in constant metadata).",""," If origin is root then call are dispatch without checking origin filter. (This includes"," bypassing `frame_system::Config::BaseCallFilter`).",""," # \u003cweight\u003e"," - Complexity: O(C) where C is the number of calls to be batched."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"BatchInterrupted","Args":["u32","DispatchError"],"Documentation":[" Batch of dispatches did not complete fully. Index of first failing dispatch given, as"," well as the error. \\[index, error\\]"]},{"Name":"BatchCompleted","Args":null,"Documentation":[" Batch of dispatches completed fully with no error."]},{"Name":"ItemCompleted","Args":null,"Documentation":[" A single item within a Batch of dispatches has completed with no error."]}],"Constants":[{"Name":"batched_calls_limit","Type":"u32","Value":"QUEBAA==","Documentation":[" The limit on the number of batched calls."]}],"Errors":[{"Name":"TooManyCalls","Documentation":[" Too many calls batched."]}],"Index":50},{"Name":"Scheduler","HasStorage":true,"Storage":{"Prefix":"Scheduler","Items":[{"Name":"Agenda","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::BlockNumber","Value":"Vec\u003cOption\u003cScheduled\u003c\u003cT as Config\u003e::Call, T::BlockNumber, T::\nPalletsOrigin, T::AccountId\u003e\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Items to be executed, indexed by the block number that they should be executed on."]},{"Name":"Lookup","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"Vec\u003cu8\u003e","Value":"TaskAddress\u003cT::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Lookup from identity to the block number and index of the task."]},{"Name":"StorageVersion","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Releases","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Storage version of the pallet.",""," New networks start with last version."]}]},"HasCalls":true,"Calls":[{"Name":"schedule","Args":[{"Name":"when","Type":"T::BlockNumber"},{"Name":"maybe_periodic","Type":"Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"},{"Name":"priority","Type":"schedule::Priority"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Anonymously schedule a task.",""," # \u003cweight\u003e"," - S = Number of already scheduled calls"," - Base Weight: 22.29 + .126 * S µs"," - DB Weight:","     - Read: Agenda","     - Write: Agenda"," - Will use base weight of 25 which should be good for up to 30 scheduled calls"," # \u003c/weight\u003e"]},{"Name":"cancel","Args":[{"Name":"when","Type":"T::BlockNumber"},{"Name":"index","Type":"u32"}],"Documentation":[" Cancel an anonymously scheduled task.",""," # \u003cweight\u003e"," - S = Number of already scheduled calls"," - Base Weight: 22.15 + 2.869 * S µs"," - DB Weight:","     - Read: Agenda","     - Write: Agenda, Lookup"," - Will use base weight of 100 which should be good for up to 30 scheduled calls"," # \u003c/weight\u003e"]},{"Name":"schedule_named","Args":[{"Name":"id","Type":"Vec\u003cu8\u003e"},{"Name":"when","Type":"T::BlockNumber"},{"Name":"maybe_periodic","Type":"Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"},{"Name":"priority","Type":"schedule::Priority"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Schedule a named task.",""," # \u003cweight\u003e"," - S = Number of already scheduled calls"," - Base Weight: 29.6 + .159 * S µs"," - DB Weight:","     - Read: Agenda, Lookup","     - Write: Agenda, Lookup"," - Will use base weight of 35 which should be good for more than 30 scheduled calls"," # \u003c/weight\u003e"]},{"Name":"cancel_named","Args":[{"Name":"id","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Cancel a named scheduled task.",""," # \u003cweight\u003e"," - S = Number of already scheduled calls"," - Base Weight: 24.91 + 2.907 * S µs"," - DB Weight:","     - Read: Agenda, Lookup","     - Write: Agenda, Lookup"," - Will use base weight of 100 which should be good for up to 30 scheduled calls"," # \u003c/weight\u003e"]},{"Name":"schedule_after","Args":[{"Name":"after","Type":"T::BlockNumber"},{"Name":"maybe_periodic","Type":"Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"},{"Name":"priority","Type":"schedule::Priority"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Anonymously schedule a task after a delay.",""," # \u003cweight\u003e"," Same as [`schedule`]."," # \u003c/weight\u003e"]},{"Name":"schedule_named_after","Args":[{"Name":"id","Type":"Vec\u003cu8\u003e"},{"Name":"after","Type":"T::BlockNumber"},{"Name":"maybe_periodic","Type":"Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"},{"Name":"priority","Type":"schedule::Priority"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Schedule a named task after a delay.",""," # \u003cweight\u003e"," Same as [`schedule_named`](Self::schedule_named)."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Scheduled","Args":["BlockNumber","u32"],"Documentation":[" Scheduled some task. \\[when, index\\]"]},{"Name":"Canceled","Args":["BlockNumber","u32"],"Documentation":[" Canceled some task. \\[when, index\\]"]},{"Name":"Dispatched","Args":["TaskAddress\u003cBlockNumber\u003e","Option\u003cVec\u003cu8\u003e\u003e","DispatchResult"],"Documentation":[" Dispatched some task. \\[task, id, result\\]"]}],"Constants":[{"Name":"MaximumWeight","Type":"Weight","Value":"AKDbIV0AAAA=","Documentation":[" The maximum weight that may be scheduled per block for any dispatchables of less priority"," than `schedule::HARD_DEADLINE`."]},{"Name":"MaxScheduledPerBlock","Type":"u32","Value":"MgAAAA==","Documentation":[" The maximum number of scheduled calls in the queue for a single block."," Not strictly enforced, but used for weight estimation."]}],"Errors":[{"Name":"FailedToSchedule","Documentation":[" Failed to schedule a call"]},{"Name":"NotFound","Documentation":[" Cannot find the scheduled call."]},{"Name":"TargetBlockNumberInPast","Documentation":[" Given target block number is in the past."]},{"Name":"RescheduleNoChange","Documentation":[" Reschedule failed because it does not change scheduled time."]}],"Index":51},{"Name":"Multisig","HasStorage":true,"Storage":{"Prefix":"Multisig","Items":[{"Name":"Multisigs","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key1":"T::AccountId","Key2":"[u8; 32]","Value":"Multisig\u003cT::BlockNumber, BalanceOf\u003cT\u003e, T::AccountId\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The set of open multisig operations."]},{"Name":"Calls","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"[u8; 32]","Value":"(OpaqueCall, T::AccountId, BalanceOf\u003cT\u003e)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null}]},"HasCalls":true,"Calls":[{"Name":"as_multi_threshold_1","Args":[{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Immediately dispatch a multi-signature call using a single approval from the caller.",""," The dispatch origin for this call must be _Signed_.",""," - `other_signatories`: The accounts (other than the sender) who are part of the"," multi-signature, but do not participate in the approval process."," - `call`: The call to be executed.",""," Result is equivalent to the dispatched result.",""," # \u003cweight\u003e"," O(Z + C) where Z is the length of the call and C its execution weight."," -------------------------------"," - DB Weight: None"," - Plus Call Weight"," # \u003c/weight\u003e"]},{"Name":"as_multi","Args":[{"Name":"threshold","Type":"u16"},{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"maybe_timepoint","Type":"Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"},{"Name":"call","Type":"OpaqueCall"},{"Name":"store_call","Type":"bool"},{"Name":"max_weight","Type":"Weight"}],"Documentation":[" Register approval for a dispatch to be made from a deterministic composite account if"," approved by a total of `threshold - 1` of `other_signatories`.",""," If there are enough, then dispatch the call.",""," Payment: `DepositBase` will be reserved if this is the first approval, plus"," `threshold` times `DepositFactor`. It is returned once this dispatch happens or"," is cancelled.",""," The dispatch origin for this call must be _Signed_.",""," - `threshold`: The total number of approvals for this dispatch before it is executed."," - `other_signatories`: The accounts (other than the sender) who can approve this"," dispatch. May not be empty."," - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"," not the first approval, then it must be `Some`, with the timepoint (block number and"," transaction index) of the first approval transaction."," - `call`: The call to be executed.",""," NOTE: Unless this is the final approval, you will generally want to use"," `approve_as_multi` instead, since it only requires a hash of the call.",""," Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"," on success, result is `Ok` and the result from the interior call, if it was executed,"," may be found in the deposited `MultisigExecuted` event.",""," # \u003cweight\u003e"," - `O(S + Z + Call)`."," - Up to one balance-reserve or unreserve operation."," - One passthrough operation, one insert, both `O(S)` where `S` is the number of","   signatories. `S` is capped by `MaxSignatories`, with weight being proportional."," - One call encode \u0026 hash, both of complexity `O(Z)` where `Z` is tx-len."," - One encode \u0026 hash, both of complexity `O(S)`."," - Up to one binary search and insert (`O(logS + S)`)."," - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."," - One event."," - The weight of the `call`."," - Storage: inserts one item, value size bounded by `MaxSignatories`, with a","   deposit taken for its lifetime of","   `DepositBase + threshold * DepositFactor`."," -------------------------------"," - DB Weight:","     - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)","     - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"," - Plus Call Weight"," # \u003c/weight\u003e"]},{"Name":"approve_as_multi","Args":[{"Name":"threshold","Type":"u16"},{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"maybe_timepoint","Type":"Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"},{"Name":"call_hash","Type":"[u8; 32]"},{"Name":"max_weight","Type":"Weight"}],"Documentation":[" Register approval for a dispatch to be made from a deterministic composite account if"," approved by a total of `threshold - 1` of `other_signatories`.",""," Payment: `DepositBase` will be reserved if this is the first approval, plus"," `threshold` times `DepositFactor`. It is returned once this dispatch happens or"," is cancelled.",""," The dispatch origin for this call must be _Signed_.",""," - `threshold`: The total number of approvals for this dispatch before it is executed."," - `other_signatories`: The accounts (other than the sender) who can approve this"," dispatch. May not be empty."," - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"," not the first approval, then it must be `Some`, with the timepoint (block number and"," transaction index) of the first approval transaction."," - `call_hash`: The hash of the call to be executed.",""," NOTE: If this is the final approval, you will want to use `as_multi` instead.",""," # \u003cweight\u003e"," - `O(S)`."," - Up to one balance-reserve or unreserve operation."," - One passthrough operation, one insert, both `O(S)` where `S` is the number of","   signatories. `S` is capped by `MaxSignatories`, with weight being proportional."," - One encode \u0026 hash, both of complexity `O(S)`."," - Up to one binary search and insert (`O(logS + S)`)."," - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."," - One event."," - Storage: inserts one item, value size bounded by `MaxSignatories`, with a","   deposit taken for its lifetime of","   `DepositBase + threshold * DepositFactor`."," ----------------------------------"," - DB Weight:","     - Read: Multisig Storage, [Caller Account]","     - Write: Multisig Storage, [Caller Account]"," # \u003c/weight\u003e"]},{"Name":"cancel_as_multi","Args":[{"Name":"threshold","Type":"u16"},{"Name":"other_signatories","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"timepoint","Type":"Timepoint\u003cT::BlockNumber\u003e"},{"Name":"call_hash","Type":"[u8; 32]"}],"Documentation":[" Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"," for this operation will be unreserved on success.",""," The dispatch origin for this call must be _Signed_.",""," - `threshold`: The total number of approvals for this dispatch before it is executed."," - `other_signatories`: The accounts (other than the sender) who can approve this"," dispatch. May not be empty."," - `timepoint`: The timepoint (block number and transaction index) of the first approval"," transaction for this dispatch."," - `call_hash`: The hash of the call to be executed.",""," # \u003cweight\u003e"," - `O(S)`."," - Up to one balance-reserve or unreserve operation."," - One passthrough operation, one insert, both `O(S)` where `S` is the number of","   signatories. `S` is capped by `MaxSignatories`, with weight being proportional."," - One encode \u0026 hash, both of complexity `O(S)`."," - One event."," - I/O: 1 read `O(S)`, one remove."," - Storage: removes one item."," ----------------------------------"," - DB Weight:","     - Read: Multisig Storage, [Caller Account], Refund Account, Calls","     - Write: Multisig Storage, [Caller Account], Refund Account, Calls"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"NewMultisig","Args":["AccountId","AccountId","CallHash"],"Documentation":[" A new multisig operation has begun. \\[approving, multisig, call_hash\\]"]},{"Name":"MultisigApproval","Args":["AccountId","Timepoint\u003cBlockNumber\u003e","AccountId","CallHash"],"Documentation":[" A multisig operation has been approved by someone."," \\[approving, timepoint, multisig, call_hash\\]"]},{"Name":"MultisigExecuted","Args":["AccountId","Timepoint\u003cBlockNumber\u003e","AccountId","CallHash","DispatchResult"],"Documentation":[" A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"]},{"Name":"MultisigCancelled","Args":["AccountId","Timepoint\u003cBlockNumber\u003e","AccountId","CallHash"],"Documentation":[" A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"]}],"Constants":[{"Name":"DepositBase","Type":"BalanceOf\u003cT\u003e","Value":"AJw4RfAEAAAAAAAAAAAAAA==","Documentation":[" The base amount of currency needed to reserve for creating a multisig execution or to store"," a dispatch call for later.",""," This is held for an additional storage item whose value size is"," `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"," `32 + sizeof(AccountId)` bytes."]},{"Name":"DepositFactor","Type":"BalanceOf\u003cT\u003e","Value":"AADrCL8BAAAAAAAAAAAAAA==","Documentation":[" The amount of currency needed per unit threshold when creating a multisig execution.",""," This is held for adding 32 bytes more into a pre-existing storage value."]},{"Name":"MaxSignatories","Type":"u16","Value":"ZAA=","Documentation":[" The maximum amount of signatories allowed in the multisig."]}],"Errors":[{"Name":"MinimumThreshold","Documentation":[" Threshold must be 2 or greater."]},{"Name":"AlreadyApproved","Documentation":[" Call is already approved by this signatory."]},{"Name":"NoApprovalsNeeded","Documentation":[" Call doesn't need any (more) approvals."]},{"Name":"TooFewSignatories","Documentation":[" There are too few signatories in the list."]},{"Name":"TooManySignatories","Documentation":[" There are too many signatories in the list."]},{"Name":"SignatoriesOutOfOrder","Documentation":[" The signatories were provided out of order; they should be ordered."]},{"Name":"SenderInSignatories","Documentation":[" The sender was contained in the other signatories; it shouldn't be."]},{"Name":"NotFound","Documentation":[" Multisig operation not found when attempting to cancel."]},{"Name":"NotOwner","Documentation":[" Only the account that originally created the multisig is able to cancel it."]},{"Name":"NoTimepoint","Documentation":[" No timepoint was given, yet the multisig operation is already underway."]},{"Name":"WrongTimepoint","Documentation":[" A different timepoint was given to the multisig operation that is underway."]},{"Name":"UnexpectedTimepoint","Documentation":[" A timepoint was given, yet no multisig operation is underway."]},{"Name":"MaxWeightTooLow","Documentation":[" The maximum weight information provided was too low."]},{"Name":"AlreadyStored","Documentation":[" The data to be stored is already stored."]}],"Index":53},{"Name":"Vesting","HasStorage":true,"Storage":{"Prefix":"Vesting","Items":[{"Name":"VestingStartAt","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::BlockNumber","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Start at"]},{"Name":"Vesting","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"T::AccountId","Value":"VestingInfo\u003cBalanceOf\u003cT\u003e, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Information regarding the vesting of a given account."]}]},"HasCalls":true,"Calls":[{"Name":"vest","Args":null,"Documentation":[" Unlock any vested funds of the sender account.",""," The dispatch origin for this call must be _Signed_ and the sender must have funds still"," locked under this pallet.",""," Emits either `VestingCompleted` or `VestingUpdated`.",""," # \u003cweight\u003e"," - `O(1)`."," - DbWeight: 2 Reads, 2 Writes","     - Reads: Vesting Storage, Balances Locks, [Sender Account]","     - Writes: Vesting Storage, Balances Locks, [Sender Account]"," # \u003c/weight\u003e"]},{"Name":"vest_other","Args":[{"Name":"target","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"}],"Documentation":[" Unlock any vested funds of a `target` account.",""," The dispatch origin for this call must be _Signed_.",""," - `target`: The account whose vested funds should be unlocked. Must have funds still"," locked under this pallet.",""," Emits either `VestingCompleted` or `VestingUpdated`.",""," # \u003cweight\u003e"," - `O(1)`."," - DbWeight: 3 Reads, 3 Writes","     - Reads: Vesting Storage, Balances Locks, Target Account","     - Writes: Vesting Storage, Balances Locks, Target Account"," # \u003c/weight\u003e"]},{"Name":"vested_transfer","Args":[{"Name":"target","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"schedule","Type":"VestingInfo\u003cBalanceOf\u003cT\u003e, T::BlockNumber\u003e"}],"Documentation":[" Create a vested transfer.",""," The dispatch origin for this call must be _Signed_.",""," - `target`: The account that should be transferred the vested funds."," - `amount`: The amount of funds to transfer and will be vested."," - `schedule`: The vesting schedule attached to the transfer.",""," Emits `VestingCreated`.",""," # \u003cweight\u003e"," - `O(1)`."," - DbWeight: 3 Reads, 3 Writes","     - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]","     - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]"," # \u003c/weight\u003e"]},{"Name":"force_vested_transfer","Args":[{"Name":"source","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"target","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"schedule","Type":"VestingInfo\u003cBalanceOf\u003cT\u003e, T::BlockNumber\u003e"}],"Documentation":[" Force a vested transfer.",""," The dispatch origin for this call must be _Root_.",""," - `source`: The account whose funds should be transferred."," - `target`: The account that should be transferred the vested funds."," - `amount`: The amount of funds to transfer and will be vested."," - `schedule`: The vesting schedule attached to the transfer.",""," Emits `VestingCreated`.",""," # \u003cweight\u003e"," - `O(1)`."," - DbWeight: 4 Reads, 4 Writes","     - Reads: Vesting Storage, Balances Locks, Target Account, Source Account","     - Writes: Vesting Storage, Balances Locks, Target Account, Source Account"," # \u003c/weight\u003e"]},{"Name":"force_set_vested","Args":[{"Name":"source","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"target","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"schedule","Type":"VestingInfo\u003cBalanceOf\u003cT\u003e, T::BlockNumber\u003e"}],"Documentation":null},{"Name":"init_vesting_start_at","Args":[{"Name":"vesting_start_at","Type":"T::BlockNumber"}],"Documentation":null}],"HasEvents":true,"Events":[{"Name":"VestingUpdated","Args":["AccountId","Balance"],"Documentation":[" The amount vested has been updated. This could indicate more funds are available. The"," balance given is the amount which is left unvested (and thus locked)."," \\[account, unvested\\]"]},{"Name":"VestingCompleted","Args":["AccountId"],"Documentation":[" An \\[account\\] has become fully vested. No further vesting can happen."]}],"Constants":[{"Name":"MinVestedTransfer","Type":"BalanceOf\u003cT\u003e","Value":"AOQLVAIAAAAAAAAAAAAAAA==","Documentation":[" The minimum amount transferred to call `vested_transfer`."]}],"Errors":[{"Name":"NotVesting","Documentation":[" The account given is not vesting."]},{"Name":"ExistingVestingSchedule","Documentation":[" An existing vesting schedule already exists for this account that cannot be clobbered."]},{"Name":"AmountLow","Documentation":[" Amount being transferred is too low to create a vesting schedule."]}],"Index":60},{"Name":"Treasury","HasStorage":true,"Storage":{"Prefix":"Treasury","Items":[{"Name":"ProposalCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ProposalIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Number of proposals that have been made."]},{"Name":"Proposals","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"ProposalIndex","Value":"Proposal\u003cT::AccountId, BalanceOf\u003cT, I\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Proposals that have been made."]},{"Name":"Approvals","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BoundedVec\u003cProposalIndex, T::MaxApprovals\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Proposal indices that have been approved but not yet awarded."]}]},"HasCalls":true,"Calls":[{"Name":"propose_spend","Args":[{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT, I\u003e\u003e"},{"Name":"beneficiary","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"}],"Documentation":[" Put forward a suggestion for spending. A deposit proportional to the value"," is reserved and slashed if the proposal is rejected. It is returned once the"," proposal is awarded.",""," # \u003cweight\u003e"," - Complexity: O(1)"," - DbReads: `ProposalCount`, `origin account`"," - DbWrites: `ProposalCount`, `Proposals`, `origin account`"," # \u003c/weight\u003e"]},{"Name":"reject_proposal","Args":[{"Name":"proposal_id","Type":"Compact\u003cProposalIndex\u003e"}],"Documentation":[" Reject a proposed spend. The original deposit will be slashed.",""," May only be called from `T::RejectOrigin`.",""," # \u003cweight\u003e"," - Complexity: O(1)"," - DbReads: `Proposals`, `rejected proposer account`"," - DbWrites: `Proposals`, `rejected proposer account`"," # \u003c/weight\u003e"]},{"Name":"approve_proposal","Args":[{"Name":"proposal_id","Type":"Compact\u003cProposalIndex\u003e"}],"Documentation":[" Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"," and the original deposit will be returned.",""," May only be called from `T::ApproveOrigin`.",""," # \u003cweight\u003e"," - Complexity: O(1)."," - DbReads: `Proposals`, `Approvals`"," - DbWrite: `Approvals`"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Proposed","Args":["ProposalIndex"],"Documentation":[" New proposal. \\[proposal_index\\]"]},{"Name":"Spending","Args":["Balance"],"Documentation":[" We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"]},{"Name":"Awarded","Args":["ProposalIndex","Balance","AccountId"],"Documentation":[" Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"]},{"Name":"Rejected","Args":["ProposalIndex","Balance"],"Documentation":[" A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"]},{"Name":"Burnt","Args":["Balance"],"Documentation":[" Some of our funds have been burnt. \\[burn\\]"]},{"Name":"Rollover","Args":["Balance"],"Documentation":[" Spending has finished; this is the amount that rolls over until next spend."," \\[budget_remaining\\]"]},{"Name":"Deposit","Args":["Balance"],"Documentation":[" Some funds have been deposited. \\[deposit\\]"]}],"Constants":[{"Name":"ProposalBond","Type":"Permill","Value":"UMMAAA==","Documentation":[" Fraction of a proposal's value that should be bonded in order to place the proposal."," An accepted proposal gets these back. A rejected proposal does not."]},{"Name":"ProposalBondMinimum","Type":"BalanceOf\u003cT, I\u003e","Value":"AEB6EPNaAAAAAAAAAAAAAA==","Documentation":[" Minimum amount of funds that should be placed in a deposit for making a proposal."]},{"Name":"SpendPeriod","Type":"T::BlockNumber","Value":"wKgAAA==","Documentation":[" Period between successive spends."]},{"Name":"Burn","Type":"Permill","Value":"AAAAAA==","Documentation":[" Percentage of spare funds (if any) that are burnt per spend period."]},{"Name":"PalletId","Type":"PalletId","Value":"YmYvdHJzcnk=","Documentation":[" The treasury's pallet id, used for deriving its sovereign account ID."]},{"Name":"MaxApprovals","Type":"u32","Value":"ZAAAAA==","Documentation":[" The maximum number of approvals that can wait in the spending queue."]}],"Errors":[{"Name":"InsufficientProposersBalance","Documentation":[" Proposer's balance is too low."]},{"Name":"InvalidIndex","Documentation":[" No proposal or bounty at that index."]},{"Name":"TooManyApprovals","Documentation":[" Too many approvals in the queue."]}],"Index":61},{"Name":"Bounties","HasStorage":true,"Storage":{"Prefix":"Treasury","Items":[{"Name":"BountyCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BountyIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Number of bounty proposals that have been made."]},{"Name":"Bounties","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"BountyIndex","Value":"Bounty\u003cT::AccountId, BalanceOf\u003cT\u003e, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Bounties that have been made."]},{"Name":"BountyDescriptions","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"BountyIndex","Value":"Vec\u003cu8\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The description of each bounty."]},{"Name":"BountyApprovals","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cBountyIndex\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Bounty indices that have been approved but not yet funded."]}]},"HasCalls":true,"Calls":[{"Name":"propose_bounty","Args":[{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"description","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Propose a new bounty.",""," The dispatch origin for this call must be _Signed_.",""," Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"," `DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,"," or slashed when rejected.",""," - `curator`: The curator account whom will manage this bounty."," - `fee`: The curator fee."," - `value`: The total payment amount of this bounty, curator fee included."," - `description`: The description of this bounty."]},{"Name":"approve_bounty","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"}],"Documentation":[" Approve a bounty proposal. At a later time, the bounty will be funded and become active"," and the original deposit will be returned.",""," May only be called from `T::ApproveOrigin`.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]},{"Name":"propose_curator","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"},{"Name":"curator","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"fee","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Assign a curator to a funded bounty.",""," May only be called from `T::ApproveOrigin`.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]},{"Name":"unassign_curator","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"}],"Documentation":[" Unassign curator from a bounty.",""," This function can only be called by the `RejectOrigin` a signed origin.",""," If this function is called by the `RejectOrigin`, we assume that the curator is malicious"," or inactive. As a result, we will slash the curator when possible.",""," If the origin is the curator, we take this as a sign they are unable to do their job and"," they willingly give up. We could slash them, but for now we allow them to recover their"," deposit and exit without issue. (We may want to change this if it is abused.)",""," Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows"," anyone in the community to call out that a curator is not doing their due diligence, and"," we should pick a new curator. In this case the curator should also be slashed.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]},{"Name":"accept_curator","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"}],"Documentation":[" Accept the curator role for a bounty."," A deposit will be reserved from curator and refund upon successful payout.",""," May only be called from the curator.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]},{"Name":"award_bounty","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"},{"Name":"beneficiary","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"}],"Documentation":[" Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.",""," The dispatch origin for this call must be the curator of this bounty.",""," - `bounty_id`: Bounty ID to award."," - `beneficiary`: The beneficiary account whom will receive the payout.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]},{"Name":"claim_bounty","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"}],"Documentation":[" Claim the payout from an awarded bounty after payout delay.",""," The dispatch origin for this call must be the beneficiary of this bounty.",""," - `bounty_id`: Bounty ID to claim.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]},{"Name":"close_bounty","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"}],"Documentation":[" Cancel a proposed or active bounty. All the funds will be sent to treasury and"," the curator deposit will be unreserved if possible.",""," Only `T::RejectOrigin` is able to cancel a bounty.",""," - `bounty_id`: Bounty ID to cancel.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]},{"Name":"extend_bounty_expiry","Args":[{"Name":"bounty_id","Type":"Compact\u003cBountyIndex\u003e"},{"Name":"_remark","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Extend the expiry time of an active bounty.",""," The dispatch origin for this call must be the curator of this bounty.",""," - `bounty_id`: Bounty ID to extend."," - `remark`: additional information.",""," # \u003cweight\u003e"," - O(1)."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"BountyProposed","Args":["BountyIndex"],"Documentation":[" New bounty proposal. \\[index\\]"]},{"Name":"BountyRejected","Args":["BountyIndex","Balance"],"Documentation":[" A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"]},{"Name":"BountyBecameActive","Args":["BountyIndex"],"Documentation":[" A bounty proposal is funded and became active. \\[index\\]"]},{"Name":"BountyAwarded","Args":["BountyIndex","AccountId"],"Documentation":[" A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"]},{"Name":"BountyClaimed","Args":["BountyIndex","Balance","AccountId"],"Documentation":[" A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"]},{"Name":"BountyCanceled","Args":["BountyIndex"],"Documentation":[" A bounty is cancelled. \\[index\\]"]},{"Name":"BountyExtended","Args":["BountyIndex"],"Documentation":[" A bounty expiry is extended. \\[index\\]"]}],"Constants":[{"Name":"DataDepositPerByte","Type":"BalanceOf\u003cT\u003e","Value":"AOh2SBcAAAAAAAAAAAAAAA==","Documentation":[" The amount held on deposit per byte within bounty description."]},{"Name":"BountyDepositBase","Type":"BalanceOf\u003cT\u003e","Value":"ABCl1OgAAAAAAAAAAAAAAA==","Documentation":[" The amount held on deposit for placing a bounty proposal."]},{"Name":"BountyDepositPayoutDelay","Type":"T::BlockNumber","Value":"gHAAAA==","Documentation":[" The delay period for which a bounty beneficiary need to wait before claim the payout."]},{"Name":"BountyUpdatePeriod","Type":"T::BlockNumber","Value":"QOMJAA==","Documentation":[" Bounty duration in blocks."]},{"Name":"BountyCuratorDeposit","Type":"Permill","Value":"IKEHAA==","Documentation":[" Percentage of the curator fee that will be reserved upfront as deposit for bounty curator."]},{"Name":"BountyValueMinimum","Type":"BalanceOf\u003cT\u003e","Value":"AKByThgJAAAAAAAAAAAAAA==","Documentation":[" Minimum value for a bounty."]},{"Name":"MaximumReasonLength","Type":"u32","Value":"AEAAAA==","Documentation":[" Maximum acceptable reason length."]}],"Errors":[{"Name":"InsufficientProposersBalance","Documentation":[" Proposer's balance is too low."]},{"Name":"InvalidIndex","Documentation":[" No proposal or bounty at that index."]},{"Name":"ReasonTooBig","Documentation":[" The reason given is just too big."]},{"Name":"UnexpectedStatus","Documentation":[" The bounty status is unexpected."]},{"Name":"RequireCurator","Documentation":[" Require bounty curator."]},{"Name":"InvalidValue","Documentation":[" Invalid bounty value."]},{"Name":"InvalidFee","Documentation":[" Invalid bounty fee."]},{"Name":"PendingPayout","Documentation":[" A bounty payout is pending."," To cancel the bounty, you must unassign and slash the curator."]},{"Name":"Premature","Documentation":[" The bounties cannot be claimed/closed because it's still in the countdown period."]}],"Index":62},{"Name":"Tips","HasStorage":true,"Storage":{"Prefix":"Treasury","Items":[{"Name":"Tips","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::Hash","Value":"OpenTip\u003cT::AccountId, BalanceOf\u003cT\u003e, T::BlockNumber, T::Hash\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."," This has the insecure enumerable hash function since the key itself is already"," guaranteed to be a secure hash."]},{"Name":"Reasons","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"Vec\u003cu8\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Simple preimage lookup from the reason's hash to the original data. Again, has an"," insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]}]},"HasCalls":true,"Calls":[{"Name":"report_awesome","Args":[{"Name":"reason","Type":"Vec\u003cu8\u003e"},{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Report something `reason` that deserves a tip and claim any eventual the finder's fee.",""," The dispatch origin for this call must be _Signed_.",""," Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"," `DataDepositPerByte` for each byte in `reason`.",""," - `reason`: The reason for, or the thing that deserves, the tip; generally this will be","   a UTF-8-encoded URL."," - `who`: The account which should be credited for the tip.",""," Emits `NewTip` if successful.",""," # \u003cweight\u003e"," - Complexity: `O(R)` where `R` length of `reason`.","   - encoding and hashing of 'reason'"," - DbReads: `Reasons`, `Tips`"," - DbWrites: `Reasons`, `Tips`"," # \u003c/weight\u003e"]},{"Name":"retract_tip","Args":[{"Name":"hash","Type":"T::Hash"}],"Documentation":[" Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",""," If successful, the original deposit will be unreserved.",""," The dispatch origin for this call must be _Signed_ and the tip identified by `hash`"," must have been reported by the signing account through `report_awesome` (and not"," through `tip_new`).",""," - `hash`: The identity of the open tip for which a tip value is declared. This is formed","   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",""," Emits `TipRetracted` if successful.",""," # \u003cweight\u003e"," - Complexity: `O(1)`","   - Depends on the length of `T::Hash` which is fixed."," - DbReads: `Tips`, `origin account`"," - DbWrites: `Reasons`, `Tips`, `origin account`"," # \u003c/weight\u003e"]},{"Name":"tip_new","Args":[{"Name":"reason","Type":"Vec\u003cu8\u003e"},{"Name":"who","Type":"T::AccountId"},{"Name":"tip_value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Give a tip for something new; no finder's fee will be taken.",""," The dispatch origin for this call must be _Signed_ and the signing account must be a"," member of the `Tippers` set.",""," - `reason`: The reason for, or the thing that deserves, the tip; generally this will be","   a UTF-8-encoded URL."," - `who`: The account which should be credited for the tip."," - `tip_value`: The amount of tip that the sender would like to give. The median tip","   value of active tippers will be given to the `who`.",""," Emits `NewTip` if successful.",""," # \u003cweight\u003e"," - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.","   - `O(T)`: decoding `Tipper` vec of length `T`","     `T` is charged as upper bound given by `ContainsLengthBound`.","     The actual cost depends on the implementation of `T::Tippers`.","   - `O(R)`: hashing and encoding of reason of length `R`"," - DbReads: `Tippers`, `Reasons`"," - DbWrites: `Reasons`, `Tips`"," # \u003c/weight\u003e"]},{"Name":"tip","Args":[{"Name":"hash","Type":"T::Hash"},{"Name":"tip_value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Declare a tip value for an already-open tip.",""," The dispatch origin for this call must be _Signed_ and the signing account must be a"," member of the `Tippers` set.",""," - `hash`: The identity of the open tip for which a tip value is declared. This is formed","   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary","   account ID."," - `tip_value`: The amount of tip that the sender would like to give. The median tip","   value of active tippers will be given to the `who`.",""," Emits `TipClosing` if the threshold of tippers has been reached and the countdown period"," has started.",""," # \u003cweight\u003e"," - Complexity: `O(T)` where `T` is the number of tippers.","   decoding `Tipper` vec of length `T`, insert tip and check closing,","   `T` is charged as upper bound given by `ContainsLengthBound`.","   The actual cost depends on the implementation of `T::Tippers`.","","   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it","   is weighted as if almost full i.e of length `T-1`."," - DbReads: `Tippers`, `Tips`"," - DbWrites: `Tips`"," # \u003c/weight\u003e"]},{"Name":"close_tip","Args":[{"Name":"hash","Type":"T::Hash"}],"Documentation":[" Close and payout a tip.",""," The dispatch origin for this call must be _Signed_.",""," The tip identified by `hash` must have finished its countdown period.",""," - `hash`: The identity of the open tip for which a tip value is declared. This is formed","   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",""," # \u003cweight\u003e"," - Complexity: `O(T)` where `T` is the number of tippers.","   decoding `Tipper` vec of length `T`.","   `T` is charged as upper bound given by `ContainsLengthBound`.","   The actual cost depends on the implementation of `T::Tippers`."," - DbReads: `Tips`, `Tippers`, `tip finder`"," - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`"," # \u003c/weight\u003e"]},{"Name":"slash_tip","Args":[{"Name":"hash","Type":"T::Hash"}],"Documentation":[" Remove and slash an already-open tip.",""," May only be called from `T::RejectOrigin`.",""," As a result, the finder is slashed and the deposits are lost.",""," Emits `TipSlashed` if successful.",""," # \u003cweight\u003e","   `T` is charged as upper bound given by `ContainsLengthBound`.","   The actual cost depends on the implementation of `T::Tippers`."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"NewTip","Args":["Hash"],"Documentation":[" A new tip suggestion has been opened. \\[tip_hash\\]"]},{"Name":"TipClosing","Args":["Hash"],"Documentation":[" A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"]},{"Name":"TipClosed","Args":["Hash","AccountId","Balance"],"Documentation":[" A tip suggestion has been closed. \\[tip_hash, who, payout\\]"]},{"Name":"TipRetracted","Args":["Hash"],"Documentation":[" A tip suggestion has been retracted. \\[tip_hash\\]"]},{"Name":"TipSlashed","Args":["Hash","AccountId","Balance"],"Documentation":[" A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"]}],"Constants":[{"Name":"TipCountdown","Type":"T::BlockNumber","Value":"IBwAAA==","Documentation":[" The period for which a tip remains open after is has achieved threshold tippers."]},{"Name":"TipFindersFee","Type":"Percent","Value":"FA==","Documentation":[" The amount of the final tip which goes to the original reporter of the tip."]},{"Name":"TipReportDepositBase","Type":"BalanceOf\u003cT\u003e","Value":"ABCl1OgAAAAAAAAAAAAAAA==","Documentation":[" The amount held on deposit for placing a tip report."]},{"Name":"DataDepositPerByte","Type":"BalanceOf\u003cT\u003e","Value":"AOh2SBcAAAAAAAAAAAAAAA==","Documentation":[" The amount held on deposit per byte within the tip report reason."]},{"Name":"MaximumReasonLength","Type":"u32","Value":"AEAAAA==","Documentation":[" Maximum acceptable reason length."]}],"Errors":[{"Name":"ReasonTooBig","Documentation":[" The reason given is just too big."]},{"Name":"AlreadyKnown","Documentation":[" The tip was already found/started."]},{"Name":"UnknownTip","Documentation":[" The tip hash is unknown."]},{"Name":"NotFinder","Documentation":[" The account attempting to retract the tip is not the finder of the tip."]},{"Name":"StillOpen","Documentation":[" The tip cannot be claimed/closed because there are not enough tippers yet."]},{"Name":"Premature","Documentation":[" The tip cannot be claimed/closed because it's still in the countdown period."]}],"Index":63},{"Name":"XTokens","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":true,"Calls":[{"Name":"transfer","Args":[{"Name":"currency_id","Type":"T::CurrencyId"},{"Name":"amount","Type":"T::Balance"},{"Name":"dest","Type":"Box\u003cMultiLocation\u003e"},{"Name":"dest_weight","Type":"Weight"}],"Documentation":[" Transfer native currencies.",""," `dest_weight` is the weight for XCM execution on the dest chain, and"," it would be charged from the transferred assets. If set below"," requirements, the execution may fail and assets wouldn't be"," received.",""," It's a no-op if any error on local XCM execution or message sending."," Note sending assets out per se doesn't guarantee they would be"," received. Receiving depends on if the XCM message could be delivered"," by the network, and if the receiving chain would handle"," messages correctly."]},{"Name":"transfer_multiasset","Args":[{"Name":"asset","Type":"Box\u003cMultiAsset\u003e"},{"Name":"dest","Type":"Box\u003cMultiLocation\u003e"},{"Name":"dest_weight","Type":"Weight"}],"Documentation":[" Transfer `MultiAsset`.",""," `dest_weight` is the weight for XCM execution on the dest chain, and"," it would be charged from the transferred assets. If set below"," requirements, the execution may fail and assets wouldn't be"," received.",""," It's a no-op if any error on local XCM execution or message sending."," Note sending assets out per se doesn't guarantee they would be"," received. Receiving depends on if the XCM message could be delivered"," by the network, and if the receiving chain would handle"," messages correctly."]}],"HasEvents":true,"Events":[{"Name":"Transferred","Args":["AccountId","CurrencyId","Balance","MultiLocation"],"Documentation":[" Transferred. \\[sender, currency_id, amount, dest\\]"]},{"Name":"TransferredMultiAsset","Args":["AccountId","MultiAsset","MultiLocation"],"Documentation":[" Transferred `MultiAsset`. \\[sender, asset, dest\\]"]}],"Constants":[{"Name":"SelfLocation","Type":"MultiLocation","Value":"AQEARR8=","Documentation":[" Self chain location."]},{"Name":"BaseXcmWeight","Type":"Weight","Value":"AMqaOwAAAAA=","Documentation":[" Base XCM weight.",""," The actually weight for an XCM message is `T::BaseXcmWeight +"," T::Weigher::weight(\u0026msg)`."]}],"Errors":[{"Name":"AssetHasNoReserve","Documentation":[" Asset has no reserve location."]},{"Name":"NotCrossChainTransfer","Documentation":[" Not cross-chain transfer."]},{"Name":"InvalidDest","Documentation":[" Invalid transfer destination."]},{"Name":"NotCrossChainTransferableCurrency","Documentation":[" Currency is not cross-chain transferable."]},{"Name":"UnweighableMessage","Documentation":[" The message's weight could not be determined."]},{"Name":"XcmExecutionFailed","Documentation":[" XCM execution failed."]},{"Name":"CannotReanchor","Documentation":[" Could not re-anchor the assets to declare the fees for the"," destination chain."]},{"Name":"InvalidAncestry","Documentation":[" Could not get ancestry of asset reserve location."]},{"Name":"NotFungible","Documentation":[" Not fungible asset."]}],"Index":70},{"Name":"Tokens","HasStorage":true,"Storage":{"Prefix":"Tokens","Items":[{"Name":"TotalIssuance","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::CurrencyId","Value":"T::Balance","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The total issuance of a token type."]},{"Name":"Locks","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"T::AccountId","Key2":"T::CurrencyId","Value":"BoundedVec\u003cBalanceLock\u003cT::Balance\u003e, T::MaxLocks\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Any liquidity locks of a token type under an account."," NOTE: Should only be accessed when setting, changing and freeing a lock."]},{"Name":"Accounts","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"T::AccountId","Key2":"T::CurrencyId","Value":"AccountData\u003cT::Balance\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA","Documentation":[" The balance of a token type under an account.",""," NOTE: If the total is ever zero, decrease account ref account.",""," NOTE: This is only used in the case that this module is used to store"," balances."]}]},"HasCalls":true,"Calls":[{"Name":"transfer","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"currency_id","Type":"T::CurrencyId"},{"Name":"amount","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Transfer some liquid free balance to another account.",""," `transfer` will set the `FreeBalance` of the sender and receiver."," It will decrease the total issuance of the system by the"," `TransferFee`. If the sender's account is below the existential"," deposit as a result of the transfer, the account will be reaped.",""," The dispatch origin for this call must be `Signed` by the"," transactor.",""," - `dest`: The recipient of the transfer."," - `currency_id`: currency type."," - `amount`: free balance amount to tranfer."]},{"Name":"transfer_all","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"currency_id","Type":"T::CurrencyId"},{"Name":"keep_alive","Type":"bool"}],"Documentation":[" Transfer all remaining balance to the given account.",""," NOTE: This function only attempts to transfer _transferable_"," balances. This means that any locked, reserved, or existential"," deposits (when `keep_alive` is `true`), will not be transferred by"," this function. To ensure that this function results in a killed"," account, you might need to prepare the account by removing any"," reference counters, storage deposits, etc...",""," The dispatch origin for this call must be `Signed` by the"," transactor.",""," - `dest`: The recipient of the transfer."," - `currency_id`: currency type."," - `keep_alive`: A boolean to determine if the `transfer_all`","   operation should send all of the funds the account has, causing","   the sender account to be killed (false), or transfer everything","   except at least the existential deposit, which will guarantee to","   keep the sender account alive (true)."]},{"Name":"transfer_keep_alive","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"currency_id","Type":"T::CurrencyId"},{"Name":"amount","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Same as the [`transfer`] call, but with a check that the transfer"," will not kill the origin account.",""," 99% of the time you want [`transfer`] instead.",""," The dispatch origin for this call must be `Signed` by the"," transactor.",""," - `dest`: The recipient of the transfer."," - `currency_id`: currency type."," - `amount`: free balance amount to tranfer."]},{"Name":"force_transfer","Args":[{"Name":"source","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"currency_id","Type":"T::CurrencyId"},{"Name":"amount","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Exactly as `transfer`, except the origin must be root and the source"," account may be specified.",""," The dispatch origin for this call must be _Root_.",""," - `source`: The sender of the transfer."," - `dest`: The recipient of the transfer."," - `currency_id`: currency type."," - `amount`: free balance amount to tranfer."]},{"Name":"set_balance","Args":[{"Name":"who","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"currency_id","Type":"T::CurrencyId"},{"Name":"new_free","Type":"Compact\u003cT::Balance\u003e"},{"Name":"new_reserved","Type":"Compact\u003cT::Balance\u003e"}],"Documentation":[" Set the balances of a given account.",""," This will alter `FreeBalance` and `ReservedBalance` in storage. it"," will also decrease the total issuance of the system"," (`TotalIssuance`). If the new free or reserved balance is below the"," existential deposit, it will reap the `AccountInfo`.",""," The dispatch origin for this call is `root`."]}],"HasEvents":true,"Events":[{"Name":"Endowed","Args":["CurrencyId","AccountId","Balance"],"Documentation":[" An account was created with some free balance. \\[currency_id,"," account, free_balance\\]"]},{"Name":"DustLost","Args":["CurrencyId","AccountId","Balance"],"Documentation":[" An account was removed whose balance was non-zero but below"," ExistentialDeposit, resulting in an outright loss. \\[currency_id,"," account, balance\\]"]},{"Name":"Transfer","Args":["CurrencyId","AccountId","AccountId","Balance"],"Documentation":[" Transfer succeeded. \\[currency_id, from, to, value\\]"]},{"Name":"Reserved","Args":["CurrencyId","AccountId","Balance"],"Documentation":[" Some balance was reserved (moved from free to reserved)."," \\[currency_id, who, value\\]"]},{"Name":"Unreserved","Args":["CurrencyId","AccountId","Balance"],"Documentation":[" Some balance was unreserved (moved from reserved to free)."," \\[currency_id, who, value\\]"]},{"Name":"BalanceSet","Args":["CurrencyId","AccountId","Balance","Balance"],"Documentation":[" A balance was set by root. \\[who, free, reserved\\]"]}],"Constants":[{"Name":"MaxLocks","Type":"u32","Value":"MgAAAA==","Documentation":null}],"Errors":[{"Name":"BalanceTooLow","Documentation":[" The balance is too low"]},{"Name":"AmountIntoBalanceFailed","Documentation":[" Cannot convert Amount into Balance type"]},{"Name":"LiquidityRestrictions","Documentation":[" Failed because liquidity restrictions due to locking"]},{"Name":"MaxLocksExceeded","Documentation":[" Failed because the maximum locks was exceeded"]},{"Name":"KeepAlive","Documentation":[" Transfer/payment would kill account"]},{"Name":"ExistentialDeposit","Documentation":[" Value too low to create account due to existential deposit"]},{"Name":"DeadAccount","Documentation":[" Beneficiary account must pre-exist"]}],"Index":71},{"Name":"Currencies","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":true,"Calls":[{"Name":"transfer","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"currency_id","Type":"CurrencyIdOf\u003cT\u003e"},{"Name":"amount","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Transfer some balance to another account under `currency_id`.",""," The dispatch origin for this call must be `Signed` by the"," transactor."]},{"Name":"transfer_native_currency","Args":[{"Name":"dest","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"amount","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Transfer some native currency to another account.",""," The dispatch origin for this call must be `Signed` by the"," transactor."]},{"Name":"update_balance","Args":[{"Name":"who","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"currency_id","Type":"CurrencyIdOf\u003cT\u003e"},{"Name":"amount","Type":"AmountOf\u003cT\u003e"}],"Documentation":[" update amount of account `who` under `currency_id`.",""," The dispatch origin of this call must be _Root_."]}],"HasEvents":true,"Events":[{"Name":"Transferred","Args":["Currency","AccountId","AccountId","Balance"],"Documentation":[" Currency transfer success. \\[currency_id, from, to, amount\\]"]},{"Name":"BalanceUpdated","Args":["Currency","AccountId","Amount"],"Documentation":[" Update balance success. \\[currency_id, who, amount\\]"]},{"Name":"Deposited","Args":["Currency","AccountId","Balance"],"Documentation":[" Deposit success. \\[currency_id, who, amount\\]"]},{"Name":"Withdrawn","Args":["Currency","AccountId","Balance"],"Documentation":[" Withdraw success. \\[currency_id, who, amount\\]"]}],"Constants":[{"Name":"GetNativeCurrencyId","Type":"CurrencyIdOf\u003cT\u003e","Value":"AAE=","Documentation":null}],"Errors":[{"Name":"AmountIntoBalanceFailed","Documentation":[" Unable to convert the Amount type into Balance."]},{"Name":"BalanceTooLow","Documentation":[" Balance is too low."]}],"Index":72},{"Name":"UnknownTokens","HasStorage":true,"Storage":{"Prefix":"UnknownTokens","Items":[{"Name":"ConcreteFungibleBalances","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"MultiLocation","Key2":"MultiLocation","Value":"u128","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" Concrete fungible balances under a given location and a concrete"," fungible id.",""," double_map: who, asset_id =\u003e u128"]},{"Name":"AbstractFungibleBalances","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"MultiLocation","Key2":"Vec\u003cu8\u003e","Value":"u128","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" Abstract fungible balances under a given location and a abstract"," fungible id.",""," double_map: who, asset_id =\u003e u128"]}]},"HasCalls":false,"Calls":null,"HasEvents":true,"Events":[{"Name":"Deposited","Args":["MultiAsset","MultiLocation"],"Documentation":[" Deposit success. [asset, to]"]},{"Name":"Withdrawn","Args":["MultiAsset","MultiLocation"],"Documentation":[" Withdraw success. [asset, from]"]}],"Constants":null,"Errors":[{"Name":"BalanceTooLow","Documentation":[" The balance is too low."]},{"Name":"BalanceOverflow","Documentation":[" The operation will cause balance to overflow."]},{"Name":"UnhandledAsset","Documentation":[" Unhandled asset."]}],"Index":73},{"Name":"OrmlXcm","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":true,"Calls":[{"Name":"send_as_sovereign","Args":[{"Name":"dest","Type":"Box\u003cMultiLocation\u003e"},{"Name":"message","Type":"Box\u003cXcm\u003c()\u003e\u003e"}],"Documentation":[" Send an XCM message as parachain sovereign."]}],"HasEvents":true,"Events":[{"Name":"Sent","Args":["MultiLocation","Xcm\u003c()\u003e"],"Documentation":[" XCM message sent. \\[to, message\\]"]}],"Constants":null,"Errors":[{"Name":"Unreachable","Documentation":[" The message and destination combination was not recognized as being"," reachable."]},{"Name":"SendFailure","Documentation":[" The message and destination was recognized as being reachable but"," the operation could not be completed."]}],"Index":74},{"Name":"ZenlinkProtocol","HasStorage":true,"Storage":{"Prefix":"ZenlinkProtocol","Items":[{"Name":"ForeignLedger","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"(AssetId, T::AccountId)","Value":"AssetBalance","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" Foreign foreign storage"," The number of units of assets held by any given account."]},{"Name":"ForeignMeta","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"AssetId","Value":"AssetBalance","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" TWOX-NOTE: `AssetId` is trusted, so this is safe."]},{"Name":"ForeignList","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cAssetId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null},{"Name":"KLast","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"(AssetId, AssetId)","Value":"AssetBalance","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88"," Last unliquidated protocol fee;"]},{"Name":"FeeMeta","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"(Option\u003cT::AccountId\u003e, u8)","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAA=","Documentation":[" (Option\u003cfee_receiver\u003e, fee_point)"]},{"Name":"LiquidityPairs","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"(AssetId, AssetId)","Value":"Option\u003cAssetId\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null},{"Name":"PairStatuses","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"(AssetId, AssetId)","Value":"PairStatus\u003cAssetBalance, T::BlockNumber, T::AccountId\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"Ag==","Documentation":[" (AssetId, AssetId) -\u003e PairStatus"]},{"Name":"BootstrapPersonalSupply","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"((AssetId, AssetId), T::AccountId)","Value":"(AssetBalance, AssetBalance)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":null},{"Name":"BootstrapEndStatus","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"(AssetId, AssetId)","Value":"PairStatus\u003cAssetBalance, T::BlockNumber, T::AccountId\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"Ag==","Documentation":[" End status of bootstrap",""," BootstrapEndStatus: map bootstrap pair =\u003e pairStatus"]}]},"HasCalls":true,"Calls":[{"Name":"set_fee_receiver","Args":[{"Name":"send_to","Type":"Option\u003c\u003cT::Lookup as StaticLookup\u003e::Source\u003e"}],"Documentation":[" Set the new receiver of the protocol fee.",""," # Arguments",""," - `send_to`:"," (1) Some(receiver): it turn on the protocol fee and the new receiver account."," (2) None: it turn off the protocol fee."]},{"Name":"set_fee_point","Args":[{"Name":"fee_point","Type":"u8"}],"Documentation":[" Set the protocol fee point.",""," # Arguments",""," - `fee_point`:"," The fee_point which integer between [0,30]"," 0 means no protocol fee."," 30 means 0.3% * 100% = 0.0030."," default is 5 and means 0.3% * 1 / 6 = 0.0005."]},{"Name":"transfer","Args":[{"Name":"asset_id","Type":"AssetId"},{"Name":"recipient","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"amount","Type":"Compact\u003cAssetBalance\u003e"}],"Documentation":[" Move some assets from one holder to another.",""," # Arguments",""," - `asset_id`: The foreign id."," - `target`: The receiver of the foreign."," - `amount`: The amount of the foreign to transfer."]},{"Name":"transfer_to_parachain","Args":[{"Name":"asset_id","Type":"AssetId"},{"Name":"para_id","Type":"ParaId"},{"Name":"recipient","Type":"T::AccountId"},{"Name":"amount","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"max_weight","Type":"Weight"}],"Documentation":[" Transfer zenlink assets to a sibling parachain.",""," Zenlink assets can be either native or foreign to the sending parachain.",""," # Arguments",""," - `asset_id`: Global identifier for a zenlink foreign"," - `para_id`: Destination parachain"," - `account`: Destination account"," - `amount`: Amount to transfer"]},{"Name":"create_pair","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"}],"Documentation":[" Create pair by two assets.",""," The order of foreign dot effect result.",""," # Arguments",""," - `asset_0`: Asset which make up Pair"," - `asset_1`: Asset which make up Pair"]},{"Name":"add_liquidity","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"},{"Name":"amount_0_desired","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_1_desired","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_0_min","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_1_min","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"deadline","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" Provide liquidity to a pair.",""," The order of foreign dot effect result.",""," # Arguments",""," - `asset_0`: Asset which make up pair"," - `asset_1`: Asset which make up pair"," - `amount_0_desired`: Maximum amount of asset_0 added to the pair"," - `amount_1_desired`: Maximum amount of asset_1 added to the pair"," - `amount_0_min`: Minimum amount of asset_0 added to the pair"," - `amount_1_min`: Minimum amount of asset_1 added to the pair"," - `deadline`: Height of the cutoff block of this transaction"]},{"Name":"remove_liquidity","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"},{"Name":"liquidity","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_0_min","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_1_min","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"recipient","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"deadline","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" Extract liquidity.",""," The order of foreign dot effect result.",""," # Arguments",""," - `asset_0`: Asset which make up pair"," - `asset_1`: Asset which make up pair"," - `amount_asset_0_min`: Minimum amount of asset_0 to exact"," - `amount_asset_1_min`: Minimum amount of asset_1 to exact"," - `recipient`: Account that accepts withdrawal of assets"," - `deadline`: Height of the cutoff block of this transaction"]},{"Name":"swap_exact_assets_for_assets","Args":[{"Name":"amount_in","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_out_min","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"path","Type":"Vec\u003cAssetId\u003e"},{"Name":"recipient","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"deadline","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" Sell amount of foreign by path.",""," # Arguments",""," - `amount_in`: Amount of the foreign will be sold"," - `amount_out_min`: Minimum amount of target foreign"," - `path`: path can convert to pairs."," - `recipient`: Account that receive the target foreign"," - `deadline`: Height of the cutoff block of this transaction"]},{"Name":"swap_assets_for_exact_assets","Args":[{"Name":"amount_out","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_in_max","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"path","Type":"Vec\u003cAssetId\u003e"},{"Name":"recipient","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"deadline","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" Buy amount of foreign by path.",""," # Arguments",""," - `amount_out`: Amount of the foreign will be bought"," - `amount_in_max`: Maximum amount of sold foreign"," - `path`: path can convert to pairs."," - `recipient`: Account that receive the target foreign"," - `deadline`: Height of the cutoff block of this transaction"]},{"Name":"bootstrap_create","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"},{"Name":"min_contribution_0","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"min_contribution_1","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"target_supply_0","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"target_supply_1","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"end","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" Create bootstrap pair",""," The order of foreign dot effect result.",""," # Arguments",""," - `asset_0`: Asset which make up bootstrap pair"," - `asset_1`: Asset which make up bootstrap pair"," - `min_contribution_0`: Min amount of asset_0 contribute"," - `min_contribution_0`: Min amount of asset_1 contribute"," - `target_supply_0`: Target amount of asset_0 total contribute"," - `target_supply_0`: Target amount of asset_1 total contribute"," - `end`: The earliest ending block."]},{"Name":"bootstrap_contribute","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"},{"Name":"amount_0_contribute","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"amount_1_contribute","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"deadline","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" Contribute some asset to a bootstrap pair",""," # Arguments",""," - `asset_0`: Asset which make up bootstrap pair"," - `asset_1`: Asset which make up bootstrap pair"," - `amount_0_contribute`: The amount of asset_0 contribute to this bootstrap pair"," - `amount_1_contribute`: The amount of asset_1 contribute to this bootstrap pair"," - `deadline`: Height of the cutoff block of this transaction"]},{"Name":"bootstrap_claim","Args":[{"Name":"recipient","Type":"\u003cT::Lookup as StaticLookup\u003e::Source"},{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"},{"Name":"deadline","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" Claim lp asset from a bootstrap pair",""," # Arguments",""," - `asset_0`: Asset which make up bootstrap pair"," - `asset_1`: Asset which make up bootstrap pair"," - `deadline`: Height of the cutoff block of this transaction"]},{"Name":"bootstrap_end","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"}],"Documentation":[" End a bootstrap pair",""," # Arguments",""," - `asset_0`: Asset which make up bootstrap pair"," - `asset_1`: Asset which make up bootstrap pair"]},{"Name":"bootstrap_update","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"},{"Name":"min_contribution_0","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"min_contribution_1","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"target_supply_0","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"target_supply_1","Type":"Compact\u003cAssetBalance\u003e"},{"Name":"end","Type":"Compact\u003cT::BlockNumber\u003e"}],"Documentation":[" update a bootstrap pair",""," # Arguments",""," - `asset_0`: Asset which make up bootstrap pair"," - `asset_1`: Asset which make up bootstrap pair"," - `min_contribution_0`: The new min amount of asset_0 contribute"," - `min_contribution_0`: The new min amount of asset_1 contribute"," - `target_supply_0`: The new target amount of asset_0 total contribute"," - `target_supply_0`: The new target amount of asset_1 total contribute"," - `end`: The earliest ending block."]},{"Name":"bootstrap_refund","Args":[{"Name":"asset_0","Type":"AssetId"},{"Name":"asset_1","Type":"AssetId"}],"Documentation":[" Contributor refund from disable bootstrap pair",""," # Arguments",""," - `asset_0`: Asset which make up bootstrap pair"," - `asset_1`: Asset which make up bootstrap pair"]}],"HasEvents":true,"Events":[{"Name":"Transferred","Args":["AssetId","AccountId","AccountId","AssetBalance"],"Documentation":[" Foreign Asset"," Some assets were transferred. \\[asset_id, owner, target, amount\\]"]},{"Name":"Burned","Args":["AssetId","AccountId","AssetBalance"],"Documentation":[" Some assets were burned. \\[asset_id, owner, amount\\]"]},{"Name":"Minted","Args":["AssetId","AccountId","AssetBalance"],"Documentation":[" Some assets were minted. \\[asset_id, owner, amount\\]"]},{"Name":"PairCreated","Args":["AssetId","AssetId"],"Documentation":[" Swap"," Create a trading pair. \\[asset_0, asset_1\\]"]},{"Name":"LiquidityAdded","Args":["AccountId","AssetId","AssetId","AssetBalance","AssetBalance","AssetBalance"],"Documentation":[" Add liquidity. \\[owner, asset_0, asset_1, add_balance_0, add_balance_1,"," mint_balance_lp\\]"]},{"Name":"LiquidityRemoved","Args":["AccountId","AccountId","AssetId","AssetId","AssetBalance","AssetBalance","AssetBalance"],"Documentation":[" Remove liquidity. \\[owner, recipient, asset_0, asset_1, rm_balance_0, rm_balance_1,"," burn_balance_lp\\]"]},{"Name":"AssetSwap","Args":["AccountId","AccountId","Vec\u003cAssetId\u003e","Vec\u003cAssetBalance\u003e"],"Documentation":[" Transact in trading \\[owner, recipient, swap_path, balances\\]"]},{"Name":"TransferredToParachain","Args":["AssetId","AccountId","ParaId","AccountId","AssetBalance","Weight"],"Documentation":[" Transfer by xcm"," Transferred to parachain. \\[asset_id, src, para_id, dest, amount, used_weight\\]"]},{"Name":"BootstrapContribute","Args":["AccountId","AssetId","AssetBalance","AssetId","AssetBalance"],"Documentation":[" Contribute to bootstrap pair. \\[who, asset_0, asset_0_contribute, asset_1_contribute\\]"]},{"Name":"BootstrapEnd","Args":["AssetId","AssetId","AssetBalance","AssetBalance","AssetBalance"],"Documentation":[" A bootstrap pair end. \\[asset_0, asset_1, asset_0_amount, asset_1_amount,"," total_lp_supply]"]},{"Name":"BootstrapCreated","Args":["AccountId","AssetId","AssetId","AssetBalance","AssetBalance","AssetBalance","AssetBalance","T::BlockNumber"],"Documentation":[" Create a bootstrap pair. \\[bootstrap_pair_account, asset_0, asset_1,"," min_contribution_0,min_contribution_1, total_supply_0,total_supply_1, end\\]"]},{"Name":"BootstrapClaim","Args":["AccountId","AccountId","AccountId","AssetId","AssetId","AssetBalance","AssetBalance","AssetBalance"],"Documentation":[" Claim a bootstrap pair. \\[bootstrap_pair_account, claimer, receiver, asset_0, asset_1,"," asset_0_refund, asset_1_refund, lp_amount\\]"]},{"Name":"BootstrapUpdate","Args":["AccountId","AssetId","AssetId","AssetBalance","AssetBalance","AssetBalance","AssetBalance","T::BlockNumber"],"Documentation":[" Update a bootstrap pair. \\[caller, asset_0, asset_1,"," min_contribution_0,min_contribution_1, total_supply_0,total_supply_1\\]"]},{"Name":"BootstrapRefund","Args":["AccountId","AccountId","AssetId","AssetId","AssetBalance","AssetBalance"],"Documentation":[" Refund from disable bootstrap pair. \\[bootstrap_pair_account, caller, asset_0, asset_1,"," asset_0_refund, asset_1_refund\\]"]}],"Constants":[{"Name":"PalletId","Type":"PalletId","Value":"L3plbmxpbms=","Documentation":[" This pallet id."]}],"Errors":[{"Name":"RequireProtocolAdmin","Documentation":[" Require the admin who can reset the admin and receiver of the protocol fee."]},{"Name":"RequireProtocolAdminCandidate","Documentation":[" Require the admin candidate who can become new admin after confirm."]},{"Name":"InvalidFeePoint","Documentation":[" Invalid fee_point"]},{"Name":"UnsupportedAssetType","Documentation":[" Unsupported AssetId by this ZenlinkProtocol Version."]},{"Name":"InsufficientAssetBalance","Documentation":[" Account balance must be greater than or equal to the transfer amount."]},{"Name":"NativeBalanceTooLow","Documentation":[" Account native currency balance must be greater than ExistentialDeposit."]},{"Name":"DeniedCreatePair","Documentation":[" Trading pair can't be created."]},{"Name":"PairAlreadyExists","Documentation":[" Trading pair already exists."]},{"Name":"PairNotExists","Documentation":[" Trading pair does not exist."]},{"Name":"AssetNotExists","Documentation":[" Asset does not exist."]},{"Name":"InsufficientLiquidity","Documentation":[" Liquidity is not enough."]},{"Name":"InsufficientPairReserve","Documentation":[" Trading pair does have enough foreign."]},{"Name":"InsufficientTargetAmount","Documentation":[" Get target amount is less than exception."]},{"Name":"ExcessiveSoldAmount","Documentation":[" Sold amount is more than exception."]},{"Name":"InvalidPath","Documentation":[" Can't find pair though trading path."]},{"Name":"IncorrectAssetAmountRange","Documentation":[" Incorrect foreign amount range."]},{"Name":"Overflow","Documentation":[" Overflow."]},{"Name":"Deadline","Documentation":[" Transaction block number is larger than the end block number."]},{"Name":"AccountIdBadLocation","Documentation":[" Location given was invalid or unsupported."]},{"Name":"ExecutionFailed","Documentation":[" XCM execution failed."]},{"Name":"DeniedTransferToSelf","Documentation":[" Transfer to self by XCM message."]},{"Name":"TargetChainNotRegistered","Documentation":[" Not in ZenlinkRegistedParaChains."]},{"Name":"InvariantCheckFailed","Documentation":[" Can't pass the K value check"]},{"Name":"PairCreateForbidden","Documentation":[" Created pair can't create now"]},{"Name":"NotInBootstrap","Documentation":[" Pair is not in bootstrap"]},{"Name":"InvalidContributionAmount","Documentation":[" Amount of contribution is invalid."]},{"Name":"UnqualifiedBootstrap","Documentation":[" Amount of contribution is invalid."]},{"Name":"ZeroContribute","Documentation":[" Zero contribute in bootstrap"]},{"Name":"DenyRefund","Documentation":[" Bootstrap deny refund"]},{"Name":"DisableBootstrap","Documentation":[" Bootstrap is disable"]}],"Index":80},{"Name":"FlexibleFee","HasStorage":true,"Storage":{"Prefix":"FlexibleFee","Items":[{"Name":"UserFeeChargeOrderList","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"Vec\u003cCurrencyIdOf\u003cT\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null},{"Name":"DefaultFeeChargeOrderList","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cCurrencyIdOf\u003cT\u003e\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"CAABAgQ=","Documentation":null}]},"HasCalls":true,"Calls":[{"Name":"set_user_fee_charge_order","Args":[{"Name":"asset_order_list_vec","Type":"Option\u003cVec\u003cCurrencyIdOf\u003cT\u003e\u003e\u003e"}],"Documentation":[" Set user fee charge assets order."]}],"HasEvents":true,"Events":[{"Name":"FlexibleFeeExchanged","Args":["CurrencyIdOf\u003cT\u003e","u128"],"Documentation":null},{"Name":"FixedRateFeeExchanged","Args":["CurrencyIdOf\u003cT\u003e","PalletBalanceOf\u003cT\u003e"],"Documentation":null},{"Name":"ExtraFeeDeducted","Args":["ExtraFeeName","CurrencyIdOf\u003cT\u003e","PalletBalanceOf\u003cT\u003e"],"Documentation":null}],"Constants":[{"Name":"TreasuryAccount","Type":"T::AccountId","Value":"bW9kbGJmL3Ryc3J5AAAAAAAAAAAAAAAAAAAAAAAAAAA=","Documentation":null},{"Name":"NativeCurrencyId","Type":"CurrencyIdOf\u003cT\u003e","Value":"AAE=","Documentation":null},{"Name":"AlternativeFeeCurrencyId","Type":"CurrencyIdOf\u003cT\u003e","Value":"AgQ=","Documentation":null},{"Name":"AltFeeCurrencyExchangeRate","Type":"(u32, u32)","Value":"AQAAAGQAAAA=","Documentation":[" Alternative Fee currency exchange rate: ?x Fee currency: ?y Native currency"]}],"Errors":[{"Name":"NotEnoughBalance","Documentation":null}],"Index":100},{"Name":"Salp","HasStorage":true,"Storage":{"Prefix":"Salp","Items":[{"Name":"CurrentTrieIndex","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"TrieIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Tracker for the next available fund index"]},{"Name":"CurrentNonce","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"ParaId","Value":"Nonce","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Tracker for the next nonce index"]},{"Name":"Funds","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"ParaId","Value":"Option\u003cFundInfo\u003cBalanceOf\u003cT\u003e, LeasePeriod\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Info on all of the funds."]},{"Name":"RedeemPool","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BalanceOf\u003cT\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAA==","Documentation":[" The balance can be redeemed to users."]}]},"HasCalls":true,"Calls":[{"Name":"fund_success","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":null},{"Name":"fund_fail","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":null},{"Name":"fund_retire","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":null},{"Name":"fund_end","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":null},{"Name":"edit","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"},{"Name":"cap","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"first_slot","Type":"Compact\u003cLeasePeriod\u003e"},{"Name":"last_slot","Type":"Compact\u003cLeasePeriod\u003e"},{"Name":"fund_status","Type":"Option\u003cFundStatus\u003e"}],"Documentation":[" Edit the configuration for an in-progress crowdloan.",""," Can only be called by Root origin."]},{"Name":"unlock","Args":[{"Name":"who","Type":"AccountIdOf\u003cT\u003e"},{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":[" Unlock the reserved vsToken/vsBond after fund success"]},{"Name":"batch_unlock","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":[" Unlock the reserved vsToken/vsBond after fund success"]},{"Name":"create","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"},{"Name":"cap","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"first_slot","Type":"Compact\u003cLeasePeriod\u003e"},{"Name":"last_slot","Type":"Compact\u003cLeasePeriod\u003e"}],"Documentation":[" Create a new crowdloaning campaign for a parachain slot deposit for the current auction."]},{"Name":"contribute","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"},{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Contribute to a crowd sale. This will transfer some balance over to fund a parachain"," slot. It will be withdrawable in two instances: the parachain becomes retired; or the"," slot is unable to be purchased and the timeout expires."]},{"Name":"confirm_contribute","Args":[{"Name":"who","Type":"AccountIdOf\u003cT\u003e"},{"Name":"index","Type":"Compact\u003cParaId\u003e"},{"Name":"is_success","Type":"bool"},{"Name":"message_id","Type":"MessageId"}],"Documentation":[" Confirm contribute"]},{"Name":"withdraw","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":[" Withdraw full balance of the parachain."," - `index`: The parachain to whose crowdloan the contribution was made."]},{"Name":"refund","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":null},{"Name":"batch_refund","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":null},{"Name":"redeem","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"},{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"dissolve","Args":[{"Name":"index","Type":"Compact\u003cParaId\u003e"}],"Documentation":[" Remove a fund after the retirement period has ended and all funds have been returned."]},{"Name":"add_proxy","Args":[{"Name":"delegate","Type":"AccountIdOf\u003cT\u003e"}],"Documentation":[" Add proxy for parachain account"," - `delegate`: The delegate proxy account"]},{"Name":"remove_proxy","Args":[{"Name":"delegate","Type":"AccountIdOf\u003cT\u003e"}],"Documentation":[" Add proxy for parachain account"," - `delegate`: The delegate proxy account"]},{"Name":"mint","Args":[{"Name":"amount","Type":"BalanceOf\u003cT\u003e"}],"Documentation":[" transfer to parachain salp account"]}],"HasEvents":true,"Events":[{"Name":"Created","Args":["ParaId"],"Documentation":[" Create a new crowdloaning campaign. [fund_index]"]},{"Name":"Contributing","Args":["AccountIdOf\u003cT\u003e","ParaId","BalanceOf\u003cT\u003e","MessageId"],"Documentation":[" Contributing to a crowd sale. [who, fund_index, amount]"]},{"Name":"Contributed","Args":["AccountIdOf\u003cT\u003e","ParaId","BalanceOf\u003cT\u003e","MessageId"],"Documentation":[" Contributed to a crowd sale. [who, fund_index, amount]"]},{"Name":"ContributeFailed","Args":["AccountIdOf\u003cT\u003e","ParaId","BalanceOf\u003cT\u003e","MessageId"],"Documentation":[" Fail on contribute to crowd sale. [who, fund_index, amount]"]},{"Name":"Withdrew","Args":["ParaId","BalanceOf\u003cT\u003e"],"Documentation":[" Withdrew full balance of a contributor. [who, fund_index, amount]"]},{"Name":"Refunded","Args":["AccountIdOf\u003cT\u003e","ParaId","BalanceOf\u003cT\u003e"],"Documentation":[" refund to account. [who, fund_index,value]"]},{"Name":"AllRefunded","Args":["ParaId"],"Documentation":[" all refund"]},{"Name":"Redeemed","Args":["AccountIdOf\u003cT\u003e","ParaId","LeasePeriod","LeasePeriod","BalanceOf\u003cT\u003e"],"Documentation":[" redeem to account. [who, fund_index, first_slot, last_slot, value]"]},{"Name":"Edited","Args":["ParaId"],"Documentation":[" Fund is edited. [fund_index]"]},{"Name":"Dissolved","Args":["ParaId"],"Documentation":[" Fund is dissolved. [fund_index]"]},{"Name":"Unlocked","Args":["AccountIdOf\u003cT\u003e","ParaId","BalanceOf\u003cT\u003e"],"Documentation":[" The vsToken/vsBond was be unlocked. [who, fund_index, value]"]},{"Name":"AllUnlocked","Args":["ParaId"],"Documentation":null},{"Name":"Failed","Args":["ParaId"],"Documentation":[" Fund status change"]},{"Name":"Success","Args":["ParaId"],"Documentation":null},{"Name":"Retired","Args":["ParaId"],"Documentation":null},{"Name":"End","Args":["ParaId"],"Documentation":null},{"Name":"ProxyAdded","Args":["AccountIdOf\u003cT\u003e"],"Documentation":[" Proxy"]},{"Name":"ProxyRemoved","Args":["AccountIdOf\u003cT\u003e"],"Documentation":null},{"Name":"Minted","Args":["AccountIdOf\u003cT\u003e","BalanceOf\u003cT\u003e"],"Documentation":[" Mint"]}],"Constants":[{"Name":"PalletId","Type":"PalletId","Value":"YmYvc2FscCM=","Documentation":[" ModuleID for the crowdloan module. An appropriate value could be"," ```ModuleId(*b\"py/cfund\")```"]},{"Name":"MinContribution","Type":"BalanceOf\u003cT\u003e","Value":"AOh2SBcAAAAAAAAAAAAAAA==","Documentation":[" The minimum amount that may be contributed into a crowdloan. Should almost certainly be"," at least ExistentialDeposit."]},{"Name":"RelayChainToken","Type":"CurrencyId","Value":"AgQ=","Documentation":null},{"Name":"LeasePeriod","Type":"BlockNumberFor\u003cT\u003e","Value":"QJ0EAA==","Documentation":[" The number of blocks over which a single period lasts."]},{"Name":"VSBondValidPeriod","Type":"BlockNumberFor\u003cT\u003e","Value":"wEsDAA==","Documentation":null},{"Name":"ReleaseCycle","Type":"BlockNumberFor\u003cT\u003e","Value":"IBwAAA==","Documentation":[" The time interval from 1:1 redeem-pool to bancor-pool to release."]},{"Name":"ReleaseRatio","Type":"Percent","Value":"Mg==","Documentation":[" The release ratio from the 1:1 redeem-pool to the bancor-pool per cycle.",""," **NOTE: THE RELEASE RATIO MUST BE IN [0, 1].**"]},{"Name":"RemoveKeysLimit","Type":"u32","Value":"9AEAAA==","Documentation":null},{"Name":"SlotLength","Type":"LeasePeriod","Value":"CAAAAA==","Documentation":null},{"Name":"XcmTransferOrigin","Type":"TransferOriginType","Value":"AQ==","Documentation":null},{"Name":"BaseXcmWeight","Type":"u64","Value":"AMqaOwAAAAA=","Documentation":[" Xcm weight"]},{"Name":"ContributionWeight","Type":"u64","Value":"iAE8NQAAAAA=","Documentation":null},{"Name":"AddProxyWeight","Type":"u64","Value":"AMqaOwAAAAA=","Documentation":null},{"Name":"SovereignSubAccountLocation","Type":"MultiLocation","Value":"AQEBAFpTc22OlvHAB88NYwrPUgmyBhFhevI86STI4lMo610o","Documentation":[" The sovereign sub-account for where the staking currencies are sent to."]},{"Name":"TransactProxyType","Type":"ParachainTransactProxyType","Value":"AQ==","Documentation":null},{"Name":"TransactType","Type":"ParachainTransactType","Value":"AA==","Documentation":null}],"Errors":[{"Name":"FirstSlotTooFarInFuture","Documentation":[" The first slot needs to at least be less than 3 `max_value`."]},{"Name":"LastSlotBeforeFirstSlot","Documentation":[" Last slot must be greater than first slot."]},{"Name":"LastSlotTooFarInFuture","Documentation":[" The last slot cannot be more then 3 slots after the first slot."]},{"Name":"Overflow","Documentation":[" There was an overflow."]},{"Name":"ContributionTooSmall","Documentation":[" The contribution was below the minimum, `MinContribution`."]},{"Name":"ZeroContribution","Documentation":[" The account doesn't have any contribution to the fund."]},{"Name":"InvalidParaId","Documentation":[" Invalid fund index."]},{"Name":"InvalidFundStatus","Documentation":[" Invalid fund status."]},{"Name":"InvalidContributionStatus","Documentation":[" Invalid contribution status."]},{"Name":"CapExceeded","Documentation":[" Contributions exceed maximum amount."]},{"Name":"FundAlreadyCreated","Documentation":[" The fund has been registered."]},{"Name":"XcmFailed","Documentation":[" Crosschain xcm failed"]},{"Name":"NotEnoughReservedAssetsToRefund","Documentation":[" Don't have enough vsToken/vsBond to refund"]},{"Name":"NotEnoughBalanceInRefundPool","Documentation":[" Don't have enough token to refund by users"]},{"Name":"NotEnoughBalanceToUnlock","Documentation":[" Don't have enough vsToken/vsBond to unlock"]},{"Name":"VSBondExpired","Documentation":[" The vsBond is expired now"]},{"Name":"UnRedeemableNow","Documentation":[" The vsBond cannot be redeemed by now"]},{"Name":"NotEnoughFreeAssetsToRedeem","Documentation":[" Dont have enough vsToken/vsBond to redeem"]},{"Name":"NotEnoughBalanceInRedeemPool","Documentation":[" Don't have enough token to redeem by users"]}],"Index":105},{"Name":"LiquidityMining","HasStorage":true,"Storage":{"Prefix":"LiquidityMining","Items":[{"Name":"NextPoolId","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"PoolId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":null},{"Name":"ChargedPoolIds","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BTreeSet\u003cPoolId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null},{"Name":"TotalPoolInfos","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"PoolId","Value":"PoolInfo\u003cT\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null},{"Name":"TotalDepositData","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"PoolId","Key2":"AccountIdOf\u003cT\u003e","Value":"DepositData\u003cT\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null}]},"HasCalls":true,"Calls":[{"Name":"create_mining_pool","Args":[{"Name":"trading_pair","Type":"(CurrencyId, CurrencyId)"},{"Name":"main_reward","Type":"(CurrencyId, BalanceOf\u003cT\u003e)"},{"Name":"option_rewards","Type":"BoundedVec\u003c(CurrencyId, BalanceOf\u003cT\u003e), T::MaximumOptionRewards\u003e"},{"Name":"duration","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"},{"Name":"min_deposit_to_start","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"after_block_to_start","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"create_farming_pool","Args":[{"Name":"index","Type":"ParaId"},{"Name":"first_slot","Type":"LeasePeriod"},{"Name":"last_slot","Type":"LeasePeriod"},{"Name":"main_reward","Type":"(CurrencyId, BalanceOf\u003cT\u003e)"},{"Name":"option_rewards","Type":"BoundedVec\u003c(CurrencyId, BalanceOf\u003cT\u003e), T::MaximumOptionRewards\u003e"},{"Name":"duration","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"},{"Name":"min_deposit_to_start","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"after_block_to_start","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"create_eb_farming_pool","Args":[{"Name":"index","Type":"ParaId"},{"Name":"first_slot","Type":"LeasePeriod"},{"Name":"last_slot","Type":"LeasePeriod"},{"Name":"main_reward","Type":"(CurrencyId, BalanceOf\u003cT\u003e)"},{"Name":"option_rewards","Type":"BoundedVec\u003c(CurrencyId, BalanceOf\u003cT\u003e), T::MaximumOptionRewards\u003e"},{"Name":"duration","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"},{"Name":"min_deposit_to_start","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"after_block_to_start","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"charge","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":null},{"Name":"kill_pool","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":null},{"Name":"force_retire_pool","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":null},{"Name":"deposit","Args":[{"Name":"pid","Type":"PoolId"},{"Name":"value","Type":"BalanceOf\u003cT\u003e"}],"Documentation":[" User deposits some token to a liquidity-pool.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life."," - Try to settle the rewards when the liquidity-pool in `Ongoing`.",""," The conditions to deposit:"," - User should deposit enough(greater than `T::MinimumDeposit`) token to liquidity-pool;"," - The liquidity-pool should be in special state: `Charged`, `Ongoing`;"]},{"Name":"redeem","Args":[{"Name":"pid","Type":"PoolId"},{"Name":"value","Type":"BalanceOf\u003cT\u003e"}],"Documentation":[" User redeems some deposit from a liquidity-pool."," The deposit in the liquidity-pool should be greater than `T::MinimumDeposit` when the"," liquidity-pool is on `Ongoing` state; So user may not be able to redeem completely"," until the liquidity-pool is on `Retire` state.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life."," - Try to settle the rewards."," - Try to unreserve the remaining rewards to the pool investor when the deposit in the","   liquidity-pool is clear."," - Try to delete the liquidity-pool in which the deposit becomes zero."," - Try to delete the deposit-data in which the deposit becomes zero.",""," The condition to redeem:"," - User should have some deposit in the liquidity-pool;"," - The liquidity-pool should be in special state: `Ongoing`, `Retired`;",""," NOTE: All deposit will be redeemed when the pool is being `Retired`, no matter the"," `value` is."]},{"Name":"redeem_all","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":[" User redeems all deposit from a liquidity-pool."," The deposit in the liquidity-pool should be greater than `T::MinimumDeposit` when the"," liquidity-pool is on `Ongoing` state; So user may not be able to redeem completely"," until the liquidity-pool is on `Retire` state.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life."," - Try to settle the rewards."," - Try to unreserve the remaining rewards to the pool investor when the deposit in the","   liquidity-pool is clear."," - Try to delete the liquidity-pool in which the deposit becomes zero."," - Try to delete the deposit-data in which the deposit becomes zero.",""," The condition to redeem:"," - User should have some deposit in the liquidity-pool;"," - The liquidity-pool should be in special state: `Ongoing`, `Retired`;"]},{"Name":"volunteer_to_redeem","Args":[{"Name":"pid","Type":"PoolId"},{"Name":"account","Type":"Option\u003cAccountIdOf\u003cT\u003e\u003e"}],"Documentation":[" Help someone to redeem the deposit whose deposited in a liquidity-pool.",""," NOTE: The liquidity-pool should be in retired state."]},{"Name":"claim","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":[" User claims the rewards from a liquidity-pool.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life.",""," The conditions to claim:"," - User should have enough token deposited in the liquidity-pool;"," - The liquidity-pool should be in special states: `Ongoing`;"]}],"HasEvents":true,"Events":[{"Name":"PoolCreated","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","AccountIdOf\u003cT\u003e"],"Documentation":[" The liquidity-pool has been created",""," [pool_id, pool_type, trading_pair, keeper]"]},{"Name":"PoolCharged","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","AccountIdOf\u003cT\u003e"],"Documentation":[" The liquidity-pool has been charged",""," [pool_id, pool_type, trading_pair, investor]"]},{"Name":"PoolStarted","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)"],"Documentation":[" The liquidity-pool has been started up",""," [pool_id, pool_type, trading_pair]"]},{"Name":"PoolKilled","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)"],"Documentation":[" The liquidity-pool has been killed",""," [pool_id, pool_type, trading_pair]"]},{"Name":"PoolRetiredForcefully","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)"],"Documentation":[" The liquidity-pool has been retired forcefully",""," [pool_id, pool_type, trading_pair]"]},{"Name":"UserDeposited","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","BalanceOf\u003cT\u003e","AccountIdOf\u003cT\u003e"],"Documentation":[" User has deposited some trading-pair to a liquidity-pool",""," [pool_id, pool_type, trading_pair, amount_deposited, user]"]},{"Name":"UserRedeemed","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","BalanceOf\u003cT\u003e","AccountIdOf\u003cT\u003e"],"Documentation":[" User has been redeemed some trading-pair from a liquidity-pool",""," [pool_id, pool_type, trading_pair, amount_redeemed, user]"]},{"Name":"UserClaimed","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","Vec\u003c(CurrencyId, BalanceOf\u003cT\u003e)\u003e","AccountIdOf\u003cT\u003e"],"Documentation":[" User has been claimed the rewards from a liquidity-pool",""," [pool_id, pool_type, trading_pair, rewards, user]"]}],"Constants":[{"Name":"RelayChainTokenSymbol","Type":"TokenSymbol","Value":"BA==","Documentation":[" The value used to construct vsbond when creating a farming-liquidity-pool"]},{"Name":"MaximumDepositInPool","Type":"BalanceOf\u003cT\u003e","Value":"AACg3sWtyTU2AAAAAAAAAA==","Documentation":[" The amount deposited into a liquidity-pool should be less than the value"]},{"Name":"MinimumDepositOfUser","Type":"BalanceOf\u003cT\u003e","Value":"QEIPAAAAAAAAAAAAAAAAAA==","Documentation":[" The amount deposited by a user to a liquidity-pool should be greater than the value"]},{"Name":"MinimumRewardPerBlock","Type":"BalanceOf\u003cT\u003e","Value":"6AMAAAAAAAAAAAAAAAAAAA==","Documentation":[" The amount of token to reward per block should be greater than the value"]},{"Name":"MinimumDuration","Type":"BlockNumberFor\u003cT\u003e","Value":"LAEAAA==","Documentation":[" The duration of a liquidity-pool should be greater than the value"]},{"Name":"MaximumCharged","Type":"u32","Value":"IAAAAA==","Documentation":[" The number of liquidity-pool charged should be less than the value"]},{"Name":"MaximumOptionRewards","Type":"u32","Value":"BwAAAA==","Documentation":[" The number of option rewards should be less than the value"]},{"Name":"PalletId","Type":"PalletId","Value":"YmYvbG0jIyM=","Documentation":[" ModuleID for creating sub account"]}],"Errors":[{"Name":"InvalidTradingPair","Documentation":null},{"Name":"InvalidDuration","Documentation":null},{"Name":"InvalidRewardPerBlock","Documentation":null},{"Name":"InvalidDepositLimit","Documentation":null},{"Name":"InvalidPoolId","Documentation":null},{"Name":"InvalidPoolState","Documentation":null},{"Name":"InvalidPoolType","Documentation":null},{"Name":"DuplicateReward","Documentation":[" Find duplicate reward when creating the liquidity-pool"]},{"Name":"ExceedMaximumDeposit","Documentation":[" When the amount deposited in a liquidity-pool exceeds the `MaximumDepositInPool`"]},{"Name":"ExceedMaximumCharged","Documentation":[" When the number of pool-charged exceeds the `MaximumCharged`"]},{"Name":"NotEnoughToDeposit","Documentation":[" Not enough balance to deposit"]},{"Name":"NotEnoughToRedeem","Documentation":[" Not enough balance to redeem(VERY SCARY ERR)"]},{"Name":"FailOnUnReserve","Documentation":[" Not enough balance of reward to unreserve"]},{"Name":"NoDepositOfUser","Documentation":[" Not enough deposit of the user in the liquidity-pool"]},{"Name":"TooLowToDeposit","Documentation":[" Too low balance to deposit"]},{"Name":"TooLowToRedeem","Documentation":[" User doesnt have enough deposit to redeem"]},{"Name":"TooShortBetweenTwoClaim","Documentation":[" The interval between two claims is short"]},{"Name":"PoolChargedAlready","Documentation":[" The pool has been charged"]},{"Name":"Unexpected","Documentation":[" __NOTE__: ERROR HAPPEN"]}],"Index":108},{"Name":"TokenIssuer","HasStorage":true,"Storage":{"Prefix":"TokenIssuer","Items":[{"Name":"IssueWhiteList","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"CurrencyId","Value":"Vec\u003cAccountIdOf\u003cT\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Accounts in the whitelist can issue the corresponding Currency."]},{"Name":"TransferWhiteList","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"CurrencyId","Value":"Vec\u003cAccountIdOf\u003cT\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Accounts in the whitelist can transfer the corresponding Currency."]}]},"HasCalls":true,"Calls":[{"Name":"add_to_issue_whitelist","Args":[{"Name":"currency_id","Type":"CurrencyId"},{"Name":"account","Type":"AccountIdOf\u003cT\u003e"}],"Documentation":null},{"Name":"remove_from_issue_whitelist","Args":[{"Name":"currency_id","Type":"CurrencyId"},{"Name":"account","Type":"AccountIdOf\u003cT\u003e"}],"Documentation":null},{"Name":"add_to_transfer_whitelist","Args":[{"Name":"currency_id","Type":"CurrencyId"},{"Name":"account","Type":"AccountIdOf\u003cT\u003e"}],"Documentation":null},{"Name":"remove_from_transfer_whitelist","Args":[{"Name":"currency_id","Type":"CurrencyId"},{"Name":"account","Type":"AccountIdOf\u003cT\u003e"}],"Documentation":null},{"Name":"issue","Args":[{"Name":"dest","Type":"AccountIdOf\u003cT\u003e"},{"Name":"currency_id","Type":"CurrencyId"},{"Name":"amount","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"transfer","Args":[{"Name":"dest","Type":"AccountIdOf\u003cT\u003e"},{"Name":"currency_id","Type":"CurrencyId"},{"Name":"amount","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Destroy some balance from an account.",""," The dispatch origin for this call must be `Root` by the"," transactor."]}],"HasEvents":true,"Events":[{"Name":"AddedToIssueList","Args":["T::AccountId","CurrencyId"],"Documentation":[" Successful added a new account to the issue whitelist. \\[account, currency_id]\\"]},{"Name":"RemovedFromIssueList","Args":["T::AccountId","CurrencyId"],"Documentation":[" Successful remove an account from the issue whitelist. \\[account, currency_id]\\"]},{"Name":"AddedToTransferList","Args":["T::AccountId","CurrencyId"],"Documentation":[" Successful added a new account to the transfer whitelist. \\[account, currency_id]\\"]},{"Name":"RemovedFromTransferList","Args":["T::AccountId","CurrencyId"],"Documentation":[" Successful remove an account from the transfer whitelist. \\[account, currency_id]\\"]},{"Name":"Issued","Args":["T::AccountId","CurrencyId","Balance"],"Documentation":[" Token issue success, \\[currency_id, dest, amount\\]"]},{"Name":"Transferred","Args":["T::AccountId","T::AccountId","CurrencyId","Balance"],"Documentation":[" Token transferred success, \\[origin, dest, currency_id, amount\\]"]}],"Constants":null,"Errors":[{"Name":"NotEnoughBalance","Documentation":[" The balance is not enough"]},{"Name":"NotExist","Documentation":[" The account doesn't exist in the whitelist."]},{"Name":"NotAllowed","Documentation":[" The origin is not allowed to perform the operation."]}],"Index":109}]