{"Name":"Utility","HasStorage":false,"Storage":{"Prefix":"","Items":null},"HasCalls":true,"Calls":[{"Name":"batch","Args":[{"Name":"calls","Type":"Vec\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Send a batch of dispatch calls.",""," May be called from any origin.",""," - `calls`: The calls to be dispatched from the same origin. The number of call must not","   exceed the constant: `batched_calls_limit` (available in constant metadata).",""," If origin is root then call are dispatch without checking origin filter. (This includes"," bypassing `frame_system::Config::BaseCallFilter`).",""," # \u003cweight\u003e"," - Complexity: O(C) where C is the number of calls to be batched."," # \u003c/weight\u003e",""," This will return `Ok` in all circumstances. To determine the success of the batch, an"," event is deposited. If a call failed and the batch was interrupted, then the"," `BatchInterrupted` event is deposited, along with the number of successful calls made"," and the error of the failed call. If all were successful, then the `BatchCompleted`"," event is deposited."]},{"Name":"as_derivative","Args":[{"Name":"index","Type":"u16"},{"Name":"call","Type":"Box\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Send a call through an indexed pseudonym of the sender.",""," Filter from origin are passed along. The call will be dispatched with an origin which"," use the same filter as the origin of this call.",""," NOTE: If you need to ensure that any account-based filtering is not honored (i.e."," because you expect `proxy` to have been used prior in the call stack and you do not want"," the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"," in the Multisig pallet instead.",""," NOTE: Prior to version *12, this was called `as_limited_sub`.",""," The dispatch origin for this call must be _Signed_."]},{"Name":"batch_all","Args":[{"Name":"calls","Type":"Vec\u003c\u003cT as Config\u003e::Call\u003e"}],"Documentation":[" Send a batch of dispatch calls and atomically execute them."," The whole transaction will rollback and fail if any of the calls failed.",""," May be called from any origin.",""," - `calls`: The calls to be dispatched from the same origin. The number of call must not","   exceed the constant: `batched_calls_limit` (available in constant metadata).",""," If origin is root then call are dispatch without checking origin filter. (This includes"," bypassing `frame_system::Config::BaseCallFilter`).",""," # \u003cweight\u003e"," - Complexity: O(C) where C is the number of calls to be batched."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"BatchInterrupted","Args":["u32","DispatchError"],"Documentation":[" Batch of dispatches did not complete fully. Index of first failing dispatch given, as"," well as the error. \\[index, error\\]"]},{"Name":"BatchCompleted","Args":null,"Documentation":[" Batch of dispatches completed fully with no error."]},{"Name":"ItemCompleted","Args":null,"Documentation":[" A single item within a Batch of dispatches has completed with no error."]}],"Constants":[{"Name":"batched_calls_limit","Type":"u32","Value":"QUEBAA==","Documentation":[" The limit on the number of batched calls."]}],"Errors":[{"Name":"TooManyCalls","Documentation":[" Too many calls batched."]}],"Index":50}