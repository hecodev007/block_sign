{"Name":"Democracy","HasStorage":true,"Storage":{"Prefix":"Democracy","Items":[{"Name":"PublicPropCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"PropIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The number of (public) proposals that have been made so far."]},{"Name":"PublicProps","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003c(PropIndex, T::Hash, T::AccountId)\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The public proposals. Unsorted. The second item is the proposal's hash."]},{"Name":"DepositOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"PropIndex","Value":"(Vec\u003cT::AccountId\u003e, BalanceOf\u003cT\u003e)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Those who have locked a deposit.",""," TWOX-NOTE: Safe, as increasing integer keys are safe."]},{"Name":"Preimages","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"PreimageStatus\u003cT::AccountId, BalanceOf\u003cT\u003e, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Map of hashes to the proposal preimage, along with who registered it and their deposit."," The block number is the block at which it was deposited."]},{"Name":"ReferendumCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ReferendumIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The next free referendum index, aka the number of referenda started so far."]},{"Name":"LowestUnbaked","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"ReferendumIndex","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" The lowest referendum index representing an unbaked referendum. Equal to"," `ReferendumCount` if there isn't a unbaked referendum."]},{"Name":"ReferendumInfoOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"ReferendumIndex","Value":"ReferendumInfo\u003cT::BlockNumber, T::Hash, BalanceOf\u003cT\u003e\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Information concerning any given referendum.",""," TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]},{"Name":"VotingOf","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"Voting\u003cBalanceOf\u003cT\u003e, T::AccountId, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA","Documentation":[" All votes for a particular voter. We store the balance for the number of votes that we"," have recorded. The second item is the total amount of delegations, that will be added.",""," TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]},{"Name":"Locks","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::AccountId","Value":"T::BlockNumber","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Accounts for which there are locks in action which may be removed at some point in the"," future. The value is the block number at which the lock expires and may be removed.",""," TWOX-NOTE: OK ― `AccountId` is a secure hash."]},{"Name":"LastTabledWasExternal","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"bool","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" True if the last referendum tabled was submitted externally. False if it was a public"," proposal."]},{"Name":"NextExternal","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"(T::Hash, VoteThreshold)","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The referendum to be tabled whenever it would be valid to table an external proposal."," This happens when a referendum needs to be tabled and one of two conditions are met:"," - `LastTabledWasExternal` is `false`; or"," - `PublicProps` is empty."]},{"Name":"Blacklist","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"(T::BlockNumber, Vec\u003cT::AccountId\u003e)","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" A record of who vetoed what. Maps proposal hash to a possible existent block number"," (until when it may not be resubmitted) and who vetoed it."]},{"Name":"Cancellations","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"bool","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Record of all proposals that have been subject to emergency cancellation."]},{"Name":"StorageVersion","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"Releases","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Storage version of the pallet.",""," New networks start with last version."]}]},"HasCalls":true,"Calls":[{"Name":"propose","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Propose a sensitive action to be taken.",""," The dispatch origin of this call must be _Signed_ and the sender must"," have funds to cover the deposit.",""," - `proposal_hash`: The hash of the proposal preimage."," - `value`: The amount of deposit (must be at least `MinimumDeposit`).",""," Emits `Proposed`.",""," Weight: `O(p)`"]},{"Name":"second","Args":[{"Name":"proposal","Type":"Compact\u003cPropIndex\u003e"},{"Name":"seconds_upper_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Signals agreement with a particular proposal.",""," The dispatch origin of this call must be _Signed_ and the sender"," must have funds to cover the deposit, equal to the original deposit.",""," - `proposal`: The index of the proposal to second."," - `seconds_upper_bound`: an upper bound on the current number of seconds on this","   proposal. Extrinsic is weighted according to this value with no refund.",""," Weight: `O(S)` where S is the number of seconds a proposal already has."]},{"Name":"vote","Args":[{"Name":"ref_index","Type":"Compact\u003cReferendumIndex\u003e"},{"Name":"vote","Type":"AccountVote\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"," otherwise it is a vote to keep the status quo.",""," The dispatch origin of this call must be _Signed_.",""," - `ref_index`: The index of the referendum to vote for."," - `vote`: The vote configuration.",""," Weight: `O(R)` where R is the number of referendums the voter has voted on."]},{"Name":"emergency_cancel","Args":[{"Name":"ref_index","Type":"ReferendumIndex"}],"Documentation":[" Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"," referendum.",""," The dispatch origin of this call must be `CancellationOrigin`.",""," -`ref_index`: The index of the referendum to cancel.",""," Weight: `O(1)`."]},{"Name":"external_propose","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Schedule a referendum to be tabled once it is legal to schedule an external"," referendum.",""," The dispatch origin of this call must be `ExternalOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal.",""," Weight: `O(V)` with V number of vetoers in the blacklist of proposal.","   Decoding vec of length V. Charged as maximum"]},{"Name":"external_propose_majority","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Schedule a majority-carries referendum to be tabled next once it is legal to schedule"," an external referendum.",""," The dispatch of this call must be `ExternalMajorityOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal.",""," Unlike `external_propose`, blacklisting has no effect on this and it may replace a"," pre-scheduled `external_propose` call.",""," Weight: `O(1)`"]},{"Name":"external_propose_default","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"," schedule an external referendum.",""," The dispatch of this call must be `ExternalDefaultOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal.",""," Unlike `external_propose`, blacklisting has no effect on this and it may replace a"," pre-scheduled `external_propose` call.",""," Weight: `O(1)`"]},{"Name":"fast_track","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"voting_period","Type":"T::BlockNumber"},{"Name":"delay","Type":"T::BlockNumber"}],"Documentation":[" Schedule the currently externally-proposed majority-carries referendum to be tabled"," immediately. If there is no externally-proposed referendum currently, or if there is one"," but it is not a majority-carries referendum then it fails.",""," The dispatch of this call must be `FastTrackOrigin`.",""," - `proposal_hash`: The hash of the current external proposal."," - `voting_period`: The period that is allowed for voting on this proposal. Increased to","   `FastTrackVotingPeriod` if too low."," - `delay`: The number of block after voting has ended in approval and this should be","   enacted. This doesn't have a minimum amount.",""," Emits `Started`.",""," Weight: `O(1)`"]},{"Name":"veto_external","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Veto and blacklist the external proposal hash.",""," The dispatch origin of this call must be `VetoOrigin`.",""," - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",""," Emits `Vetoed`.",""," Weight: `O(V + log(V))` where V is number of `existing vetoers`"]},{"Name":"cancel_referendum","Args":[{"Name":"ref_index","Type":"Compact\u003cReferendumIndex\u003e"}],"Documentation":[" Remove a referendum.",""," The dispatch origin of this call must be _Root_.",""," - `ref_index`: The index of the referendum to cancel.",""," # Weight: `O(1)`."]},{"Name":"cancel_queued","Args":[{"Name":"which","Type":"ReferendumIndex"}],"Documentation":[" Cancel a proposal queued for enactment.",""," The dispatch origin of this call must be _Root_.",""," - `which`: The index of the referendum to cancel.",""," Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."]},{"Name":"delegate","Args":[{"Name":"to","Type":"T::AccountId"},{"Name":"conviction","Type":"Conviction"},{"Name":"balance","Type":"BalanceOf\u003cT\u003e"}],"Documentation":[" Delegate the voting power (with some given conviction) of the sending account.",""," The balance delegated is locked for as long as it's delegated, and thereafter for the"," time appropriate for the conviction's lock period.",""," The dispatch origin of this call must be _Signed_, and the signing account must either:","   - be delegating already; or","   - have no voting activity (if there is, then it will need to be removed/consolidated","     through `reap_vote` or `unvote`).",""," - `to`: The account whose voting the `target` account's voting power will follow."," - `conviction`: The conviction that will be attached to the delegated votes. When the","   account is undelegated, the funds will be locked for the corresponding period."," - `balance`: The amount of the account's balance to be used in delegating. This must","   not be more than the account's current balance.",""," Emits `Delegated`.",""," Weight: `O(R)` where R is the number of referendums the voter delegating to has","   voted on. Weight is charged as if maximum votes."]},{"Name":"undelegate","Args":null,"Documentation":[" Undelegate the voting power of the sending account.",""," Tokens may be unlocked following once an amount of time consistent with the lock period"," of the conviction with which the delegation was issued.",""," The dispatch origin of this call must be _Signed_ and the signing account must be"," currently delegating.",""," Emits `Undelegated`.",""," Weight: `O(R)` where R is the number of referendums the voter delegating to has","   voted on. Weight is charged as if maximum votes."]},{"Name":"clear_public_proposals","Args":null,"Documentation":[" Clears all public proposals.",""," The dispatch origin of this call must be _Root_.",""," Weight: `O(1)`."]},{"Name":"note_preimage","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Register the preimage for an upcoming proposal. This doesn't require the proposal to be"," in the dispatch queue but does require a deposit, returned once enacted.",""," The dispatch origin of this call must be _Signed_.",""," - `encoded_proposal`: The preimage of a proposal.",""," Emits `PreimageNoted`.",""," Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]},{"Name":"note_preimage_operational","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]},{"Name":"note_imminent_preimage","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Register the preimage for an upcoming proposal. This requires the proposal to be"," in the dispatch queue. No deposit is needed. When this call is successful, i.e."," the preimage has not been uploaded before and matches some imminent proposal,"," no fee is paid.",""," The dispatch origin of this call must be _Signed_.",""," - `encoded_proposal`: The preimage of a proposal.",""," Emits `PreimageNoted`.",""," Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."]},{"Name":"note_imminent_preimage_operational","Args":[{"Name":"encoded_proposal","Type":"Vec\u003cu8\u003e"}],"Documentation":[" Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]},{"Name":"reap_preimage","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"proposal_len_upper_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Remove an expired proposal preimage and collect the deposit.",""," The dispatch origin of this call must be _Signed_.",""," - `proposal_hash`: The preimage hash of a proposal."," - `proposal_length_upper_bound`: an upper bound on length of the proposal.","   Extrinsic is weighted according to this value with no refund.",""," This will only work after `VotingPeriod` blocks from the time that the preimage was"," noted, if it's the same account doing it. If it's a different account, then it'll only"," work an additional `EnactmentPeriod` later.",""," Emits `PreimageReaped`.",""," Weight: `O(D)` where D is length of proposal."]},{"Name":"unlock","Args":[{"Name":"target","Type":"T::AccountId"}],"Documentation":[" Unlock tokens that have an expired lock.",""," The dispatch origin of this call must be _Signed_.",""," - `target`: The account to remove the lock on.",""," Weight: `O(R)` with R number of vote of target."]},{"Name":"remove_vote","Args":[{"Name":"index","Type":"ReferendumIndex"}],"Documentation":[" Remove a vote for a referendum.",""," If:"," - the referendum was cancelled, or"," - the referendum is ongoing, or"," - the referendum has ended such that","   - the vote of the account was in opposition to the result; or","   - there was no conviction to the account's vote; or","   - the account made a split vote"," ...then the vote is removed cleanly and a following call to `unlock` may result in more"," funds being available.",""," If, however, the referendum has ended and:"," - it finished corresponding to the vote of the account, and"," - the account made a standard vote with conviction, and"," - the lock period of the conviction is not over"," ...then the lock will be aggregated into the overall account's lock, which may involve"," *overlocking* (where the two locks are combined into a single lock that is the maximum"," of both the amount locked and the time is it locked for).",""," The dispatch origin of this call must be _Signed_, and the signer must have a vote"," registered for referendum `index`.",""," - `index`: The index of referendum of the vote to be removed.",""," Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.","   Weight is calculated for the maximum number of vote."]},{"Name":"remove_other_vote","Args":[{"Name":"target","Type":"T::AccountId"},{"Name":"index","Type":"ReferendumIndex"}],"Documentation":[" Remove a vote for a referendum.",""," If the `target` is equal to the signer, then this function is exactly equivalent to"," `remove_vote`. If not equal to the signer, then the vote must have expired,"," either because the referendum was cancelled, because the voter lost the referendum or"," because the conviction period is over.",""," The dispatch origin of this call must be _Signed_.",""," - `target`: The account of the vote to be removed; this account must have voted for","   referendum `index`."," - `index`: The index of referendum of the vote to be removed.",""," Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.","   Weight is calculated for the maximum number of vote."]},{"Name":"enact_proposal","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"index","Type":"ReferendumIndex"}],"Documentation":[" Enact a proposal from a referendum. For now we just make the weight be the maximum."]},{"Name":"blacklist","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"maybe_ref_index","Type":"Option\u003cReferendumIndex\u003e"}],"Documentation":[" Permanently place a proposal into the blacklist. This prevents it from ever being"," proposed again.",""," If called on a queued public or external proposal, then this will result in it being"," removed. If the `ref_index` supplied is an active referendum with the proposal hash,"," then it will be cancelled.",""," The dispatch origin of this call must be `BlacklistOrigin`.",""," - `proposal_hash`: The proposal hash to blacklist permanently."," - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"," cancelled.",""," Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a","   reasonable value)."]},{"Name":"cancel_proposal","Args":[{"Name":"prop_index","Type":"Compact\u003cPropIndex\u003e"}],"Documentation":[" Remove a proposal.",""," The dispatch origin of this call must be `CancelProposalOrigin`.",""," - `prop_index`: The index of the proposal to cancel.",""," Weight: `O(p)` where `p = PublicProps::\u003cT\u003e::decode_len()`"]}],"HasEvents":true,"Events":[{"Name":"Proposed","Args":["PropIndex","Balance"],"Documentation":[" A motion has been proposed by a public account. \\[proposal_index, deposit\\]"]},{"Name":"Tabled","Args":["PropIndex","Balance","Vec\u003cAccountId\u003e"],"Documentation":[" A public proposal has been tabled for referendum vote. \\[proposal_index, deposit, depositors\\]"]},{"Name":"ExternalTabled","Args":null,"Documentation":[" An external proposal has been tabled."]},{"Name":"Started","Args":["ReferendumIndex","VoteThreshold"],"Documentation":[" A referendum has begun. \\[ref_index, threshold\\]"]},{"Name":"Passed","Args":["ReferendumIndex"],"Documentation":[" A proposal has been approved by referendum. \\[ref_index\\]"]},{"Name":"NotPassed","Args":["ReferendumIndex"],"Documentation":[" A proposal has been rejected by referendum. \\[ref_index\\]"]},{"Name":"Cancelled","Args":["ReferendumIndex"],"Documentation":[" A referendum has been cancelled. \\[ref_index\\]"]},{"Name":"Executed","Args":["ReferendumIndex","DispatchResult"],"Documentation":[" A proposal has been enacted. \\[ref_index, result\\]"]},{"Name":"Delegated","Args":["AccountId","AccountId"],"Documentation":[" An account has delegated their vote to another account. \\[who, target\\]"]},{"Name":"Undelegated","Args":["AccountId"],"Documentation":[" An \\[account\\] has cancelled a previous delegation operation."]},{"Name":"Vetoed","Args":["AccountId","Hash","BlockNumber"],"Documentation":[" An external proposal has been vetoed. \\[who, proposal_hash, until\\]"]},{"Name":"PreimageNoted","Args":["Hash","AccountId","Balance"],"Documentation":[" A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"]},{"Name":"PreimageUsed","Args":["Hash","AccountId","Balance"],"Documentation":[" A proposal preimage was removed and used (the deposit was returned)."," \\[proposal_hash, provider, deposit\\]"]},{"Name":"PreimageInvalid","Args":["Hash","ReferendumIndex"],"Documentation":[" A proposal could not be executed because its preimage was invalid."," \\[proposal_hash, ref_index\\]"]},{"Name":"PreimageMissing","Args":["Hash","ReferendumIndex"],"Documentation":[" A proposal could not be executed because its preimage was missing."," \\[proposal_hash, ref_index\\]"]},{"Name":"PreimageReaped","Args":["Hash","AccountId","Balance","AccountId"],"Documentation":[" A registered preimage was removed and the deposit collected by the reaper."," \\[proposal_hash, provider, deposit, reaper\\]"]},{"Name":"Blacklisted","Args":["Hash"],"Documentation":[" A proposal \\[hash\\] has been blacklisted permanently."]}],"Constants":[{"Name":"EnactmentPeriod","Type":"T::BlockNumber","Value":"QDgAAA==","Documentation":[" The minimum period of locking and the period between a proposal being approved and enacted.",""," It should generally be a little more than the unstake period to ensure that"," voting stakers have an opportunity to remove themselves from the system in the case where"," they are on the losing side of a vote."]},{"Name":"LaunchPeriod","Type":"T::BlockNumber","Value":"4MQAAA==","Documentation":[" How often (in blocks) new public referenda are launched."]},{"Name":"VotingPeriod","Type":"T::BlockNumber","Value":"4MQAAA==","Documentation":[" How often (in blocks) to check for new votes."]},{"Name":"MinimumDeposit","Type":"BalanceOf\u003cT\u003e","Value":"AEB6EPNaAAAAAAAAAAAAAA==","Documentation":[" The minimum amount to be used as a deposit for a public referendum proposal."]},{"Name":"InstantAllowed","Type":"bool","Value":"AQ==","Documentation":[" Indicator for whether an emergency origin is even allowed to happen. Some chains may want"," to set this permanently to `false`, others may want to condition it on things such as"," an upgrade having happened recently."]},{"Name":"FastTrackVotingPeriod","Type":"T::BlockNumber","Value":"hAMAAA==","Documentation":[" Minimum voting period allowed for a fast-track referendum."]},{"Name":"CooloffPeriod","Type":"T::BlockNumber","Value":"4MQAAA==","Documentation":[" Period in blocks where an external proposal may not be re-submitted after being vetoed."]},{"Name":"PreimageByteDeposit","Type":"BalanceOf\u003cT\u003e","Value":"AOH1BQAAAAAAAAAAAAAAAA==","Documentation":[" The amount of balance that must be deposited per byte of preimage stored."]},{"Name":"MaxVotes","Type":"u32","Value":"ZAAAAA==","Documentation":[" The maximum number of votes for an account.",""," Also used to compute weight, an overly big value can"," lead to extrinsic with very big weight: see `delegate` for instance."]},{"Name":"MaxProposals","Type":"u32","Value":"ZAAAAA==","Documentation":[" The maximum number of public proposals that can exist at any time."]}],"Errors":[{"Name":"ValueLow","Documentation":[" Value too low"]},{"Name":"ProposalMissing","Documentation":[" Proposal does not exist"]},{"Name":"AlreadyCanceled","Documentation":[" Cannot cancel the same proposal twice"]},{"Name":"DuplicateProposal","Documentation":[" Proposal already made"]},{"Name":"ProposalBlacklisted","Documentation":[" Proposal still blacklisted"]},{"Name":"NotSimpleMajority","Documentation":[" Next external proposal not simple majority"]},{"Name":"InvalidHash","Documentation":[" Invalid hash"]},{"Name":"NoProposal","Documentation":[" No external proposal"]},{"Name":"AlreadyVetoed","Documentation":[" Identity may not veto a proposal twice"]},{"Name":"DuplicatePreimage","Documentation":[" Preimage already noted"]},{"Name":"NotImminent","Documentation":[" Not imminent"]},{"Name":"TooEarly","Documentation":[" Too early"]},{"Name":"Imminent","Documentation":[" Imminent"]},{"Name":"PreimageMissing","Documentation":[" Preimage not found"]},{"Name":"ReferendumInvalid","Documentation":[" Vote given for invalid referendum"]},{"Name":"PreimageInvalid","Documentation":[" Invalid preimage"]},{"Name":"NoneWaiting","Documentation":[" No proposals waiting"]},{"Name":"NotVoter","Documentation":[" The given account did not vote on the referendum."]},{"Name":"NoPermission","Documentation":[" The actor has no permission to conduct the action."]},{"Name":"AlreadyDelegating","Documentation":[" The account is already delegating."]},{"Name":"InsufficientFunds","Documentation":[" Too high a balance was provided that the account cannot afford."]},{"Name":"NotDelegating","Documentation":[" The account is not currently delegating."]},{"Name":"VotesExist","Documentation":[" The account currently has votes attached to it and the operation cannot succeed until"," these are removed, either through `unvote` or `reap_vote`."]},{"Name":"InstantNotAllowed","Documentation":[" The instant referendum origin is currently disallowed."]},{"Name":"Nonsense","Documentation":[" Delegation to oneself makes no sense."]},{"Name":"WrongUpperBound","Documentation":[" Invalid upper bound."]},{"Name":"MaxVotesReached","Documentation":[" Maximum number of votes reached."]},{"Name":"TooManyProposals","Documentation":[" Maximum number of proposals reached."]}],"Index":30}