{"Name":"LiquidityMining","HasStorage":true,"Storage":{"Prefix":"LiquidityMining","Items":[{"Name":"NextPoolId","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"PoolId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":null},{"Name":"ChargedPoolIds","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BTreeSet\u003cPoolId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null},{"Name":"TotalPoolInfos","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"PoolId","Value":"PoolInfo\u003cT\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null},{"Name":"TotalDepositData","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":true,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"PoolId","Key2":"AccountIdOf\u003cT\u003e","Value":"DepositData\u003cT\u003e","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":true,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":null}]},"HasCalls":true,"Calls":[{"Name":"create_mining_pool","Args":[{"Name":"trading_pair","Type":"(CurrencyId, CurrencyId)"},{"Name":"main_reward","Type":"(CurrencyId, BalanceOf\u003cT\u003e)"},{"Name":"option_rewards","Type":"BoundedVec\u003c(CurrencyId, BalanceOf\u003cT\u003e), T::MaximumOptionRewards\u003e"},{"Name":"duration","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"},{"Name":"min_deposit_to_start","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"after_block_to_start","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"create_farming_pool","Args":[{"Name":"index","Type":"ParaId"},{"Name":"first_slot","Type":"LeasePeriod"},{"Name":"last_slot","Type":"LeasePeriod"},{"Name":"main_reward","Type":"(CurrencyId, BalanceOf\u003cT\u003e)"},{"Name":"option_rewards","Type":"BoundedVec\u003c(CurrencyId, BalanceOf\u003cT\u003e), T::MaximumOptionRewards\u003e"},{"Name":"duration","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"},{"Name":"min_deposit_to_start","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"after_block_to_start","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"create_eb_farming_pool","Args":[{"Name":"index","Type":"ParaId"},{"Name":"first_slot","Type":"LeasePeriod"},{"Name":"last_slot","Type":"LeasePeriod"},{"Name":"main_reward","Type":"(CurrencyId, BalanceOf\u003cT\u003e)"},{"Name":"option_rewards","Type":"BoundedVec\u003c(CurrencyId, BalanceOf\u003cT\u003e), T::MaximumOptionRewards\u003e"},{"Name":"duration","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"},{"Name":"min_deposit_to_start","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"},{"Name":"after_block_to_start","Type":"Compact\u003cBlockNumberFor\u003cT\u003e\u003e"}],"Documentation":null},{"Name":"charge","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":null},{"Name":"kill_pool","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":null},{"Name":"force_retire_pool","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":null},{"Name":"deposit","Args":[{"Name":"pid","Type":"PoolId"},{"Name":"value","Type":"BalanceOf\u003cT\u003e"}],"Documentation":[" User deposits some token to a liquidity-pool.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life."," - Try to settle the rewards when the liquidity-pool in `Ongoing`.",""," The conditions to deposit:"," - User should deposit enough(greater than `T::MinimumDeposit`) token to liquidity-pool;"," - The liquidity-pool should be in special state: `Charged`, `Ongoing`;"]},{"Name":"redeem","Args":[{"Name":"pid","Type":"PoolId"},{"Name":"value","Type":"BalanceOf\u003cT\u003e"}],"Documentation":[" User redeems some deposit from a liquidity-pool."," The deposit in the liquidity-pool should be greater than `T::MinimumDeposit` when the"," liquidity-pool is on `Ongoing` state; So user may not be able to redeem completely"," until the liquidity-pool is on `Retire` state.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life."," - Try to settle the rewards."," - Try to unreserve the remaining rewards to the pool investor when the deposit in the","   liquidity-pool is clear."," - Try to delete the liquidity-pool in which the deposit becomes zero."," - Try to delete the deposit-data in which the deposit becomes zero.",""," The condition to redeem:"," - User should have some deposit in the liquidity-pool;"," - The liquidity-pool should be in special state: `Ongoing`, `Retired`;",""," NOTE: All deposit will be redeemed when the pool is being `Retired`, no matter the"," `value` is."]},{"Name":"redeem_all","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":[" User redeems all deposit from a liquidity-pool."," The deposit in the liquidity-pool should be greater than `T::MinimumDeposit` when the"," liquidity-pool is on `Ongoing` state; So user may not be able to redeem completely"," until the liquidity-pool is on `Retire` state.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life."," - Try to settle the rewards."," - Try to unreserve the remaining rewards to the pool investor when the deposit in the","   liquidity-pool is clear."," - Try to delete the liquidity-pool in which the deposit becomes zero."," - Try to delete the deposit-data in which the deposit becomes zero.",""," The condition to redeem:"," - User should have some deposit in the liquidity-pool;"," - The liquidity-pool should be in special state: `Ongoing`, `Retired`;"]},{"Name":"volunteer_to_redeem","Args":[{"Name":"pid","Type":"PoolId"},{"Name":"account","Type":"Option\u003cAccountIdOf\u003cT\u003e\u003e"}],"Documentation":[" Help someone to redeem the deposit whose deposited in a liquidity-pool.",""," NOTE: The liquidity-pool should be in retired state."]},{"Name":"claim","Args":[{"Name":"pid","Type":"PoolId"}],"Documentation":[" User claims the rewards from a liquidity-pool.",""," The extrinsic will:"," - Try to retire the liquidity-pool which has reached the end of life.",""," The conditions to claim:"," - User should have enough token deposited in the liquidity-pool;"," - The liquidity-pool should be in special states: `Ongoing`;"]}],"HasEvents":true,"Events":[{"Name":"PoolCreated","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","AccountIdOf\u003cT\u003e"],"Documentation":[" The liquidity-pool has been created",""," [pool_id, pool_type, trading_pair, keeper]"]},{"Name":"PoolCharged","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","AccountIdOf\u003cT\u003e"],"Documentation":[" The liquidity-pool has been charged",""," [pool_id, pool_type, trading_pair, investor]"]},{"Name":"PoolStarted","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)"],"Documentation":[" The liquidity-pool has been started up",""," [pool_id, pool_type, trading_pair]"]},{"Name":"PoolKilled","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)"],"Documentation":[" The liquidity-pool has been killed",""," [pool_id, pool_type, trading_pair]"]},{"Name":"PoolRetiredForcefully","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)"],"Documentation":[" The liquidity-pool has been retired forcefully",""," [pool_id, pool_type, trading_pair]"]},{"Name":"UserDeposited","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","BalanceOf\u003cT\u003e","AccountIdOf\u003cT\u003e"],"Documentation":[" User has deposited some trading-pair to a liquidity-pool",""," [pool_id, pool_type, trading_pair, amount_deposited, user]"]},{"Name":"UserRedeemed","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","BalanceOf\u003cT\u003e","AccountIdOf\u003cT\u003e"],"Documentation":[" User has been redeemed some trading-pair from a liquidity-pool",""," [pool_id, pool_type, trading_pair, amount_redeemed, user]"]},{"Name":"UserClaimed","Args":["PoolId","PoolType","(CurrencyId, CurrencyId)","Vec\u003c(CurrencyId, BalanceOf\u003cT\u003e)\u003e","AccountIdOf\u003cT\u003e"],"Documentation":[" User has been claimed the rewards from a liquidity-pool",""," [pool_id, pool_type, trading_pair, rewards, user]"]}],"Constants":[{"Name":"RelayChainTokenSymbol","Type":"TokenSymbol","Value":"BA==","Documentation":[" The value used to construct vsbond when creating a farming-liquidity-pool"]},{"Name":"MaximumDepositInPool","Type":"BalanceOf\u003cT\u003e","Value":"AACg3sWtyTU2AAAAAAAAAA==","Documentation":[" The amount deposited into a liquidity-pool should be less than the value"]},{"Name":"MinimumDepositOfUser","Type":"BalanceOf\u003cT\u003e","Value":"QEIPAAAAAAAAAAAAAAAAAA==","Documentation":[" The amount deposited by a user to a liquidity-pool should be greater than the value"]},{"Name":"MinimumRewardPerBlock","Type":"BalanceOf\u003cT\u003e","Value":"6AMAAAAAAAAAAAAAAAAAAA==","Documentation":[" The amount of token to reward per block should be greater than the value"]},{"Name":"MinimumDuration","Type":"BlockNumberFor\u003cT\u003e","Value":"LAEAAA==","Documentation":[" The duration of a liquidity-pool should be greater than the value"]},{"Name":"MaximumCharged","Type":"u32","Value":"IAAAAA==","Documentation":[" The number of liquidity-pool charged should be less than the value"]},{"Name":"MaximumOptionRewards","Type":"u32","Value":"BwAAAA==","Documentation":[" The number of option rewards should be less than the value"]},{"Name":"PalletId","Type":"PalletId","Value":"YmYvbG0jIyM=","Documentation":[" ModuleID for creating sub account"]}],"Errors":[{"Name":"InvalidTradingPair","Documentation":null},{"Name":"InvalidDuration","Documentation":null},{"Name":"InvalidRewardPerBlock","Documentation":null},{"Name":"InvalidDepositLimit","Documentation":null},{"Name":"InvalidPoolId","Documentation":null},{"Name":"InvalidPoolState","Documentation":null},{"Name":"InvalidPoolType","Documentation":null},{"Name":"DuplicateReward","Documentation":[" Find duplicate reward when creating the liquidity-pool"]},{"Name":"ExceedMaximumDeposit","Documentation":[" When the amount deposited in a liquidity-pool exceeds the `MaximumDepositInPool`"]},{"Name":"ExceedMaximumCharged","Documentation":[" When the number of pool-charged exceeds the `MaximumCharged`"]},{"Name":"NotEnoughToDeposit","Documentation":[" Not enough balance to deposit"]},{"Name":"NotEnoughToRedeem","Documentation":[" Not enough balance to redeem(VERY SCARY ERR)"]},{"Name":"FailOnUnReserve","Documentation":[" Not enough balance of reward to unreserve"]},{"Name":"NoDepositOfUser","Documentation":[" Not enough deposit of the user in the liquidity-pool"]},{"Name":"TooLowToDeposit","Documentation":[" Too low balance to deposit"]},{"Name":"TooLowToRedeem","Documentation":[" User doesnt have enough deposit to redeem"]},{"Name":"TooShortBetweenTwoClaim","Documentation":[" The interval between two claims is short"]},{"Name":"PoolChargedAlready","Documentation":[" The pool has been charged"]},{"Name":"Unexpected","Documentation":[" __NOTE__: ERROR HAPPEN"]}],"Index":108}