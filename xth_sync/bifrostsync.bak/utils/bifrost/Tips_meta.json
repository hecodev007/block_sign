{"Name":"Tips","HasStorage":true,"Storage":{"Prefix":"Treasury","Items":[{"Name":"Tips","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":true,"IsIdentity":false},"Key":"T::Hash","Value":"OpenTip\u003cT::AccountId, BalanceOf\u003cT\u003e, T::BlockNumber, T::Hash\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."," This has the insecure enumerable hash function since the key itself is already"," guaranteed to be a secure hash."]},{"Name":"Reasons","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"Vec\u003cu8\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Simple preimage lookup from the reason's hash to the original data. Again, has an"," insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]}]},"HasCalls":true,"Calls":[{"Name":"report_awesome","Args":[{"Name":"reason","Type":"Vec\u003cu8\u003e"},{"Name":"who","Type":"T::AccountId"}],"Documentation":[" Report something `reason` that deserves a tip and claim any eventual the finder's fee.",""," The dispatch origin for this call must be _Signed_.",""," Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"," `DataDepositPerByte` for each byte in `reason`.",""," - `reason`: The reason for, or the thing that deserves, the tip; generally this will be","   a UTF-8-encoded URL."," - `who`: The account which should be credited for the tip.",""," Emits `NewTip` if successful.",""," # \u003cweight\u003e"," - Complexity: `O(R)` where `R` length of `reason`.","   - encoding and hashing of 'reason'"," - DbReads: `Reasons`, `Tips`"," - DbWrites: `Reasons`, `Tips`"," # \u003c/weight\u003e"]},{"Name":"retract_tip","Args":[{"Name":"hash","Type":"T::Hash"}],"Documentation":[" Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",""," If successful, the original deposit will be unreserved.",""," The dispatch origin for this call must be _Signed_ and the tip identified by `hash`"," must have been reported by the signing account through `report_awesome` (and not"," through `tip_new`).",""," - `hash`: The identity of the open tip for which a tip value is declared. This is formed","   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",""," Emits `TipRetracted` if successful.",""," # \u003cweight\u003e"," - Complexity: `O(1)`","   - Depends on the length of `T::Hash` which is fixed."," - DbReads: `Tips`, `origin account`"," - DbWrites: `Reasons`, `Tips`, `origin account`"," # \u003c/weight\u003e"]},{"Name":"tip_new","Args":[{"Name":"reason","Type":"Vec\u003cu8\u003e"},{"Name":"who","Type":"T::AccountId"},{"Name":"tip_value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Give a tip for something new; no finder's fee will be taken.",""," The dispatch origin for this call must be _Signed_ and the signing account must be a"," member of the `Tippers` set.",""," - `reason`: The reason for, or the thing that deserves, the tip; generally this will be","   a UTF-8-encoded URL."," - `who`: The account which should be credited for the tip."," - `tip_value`: The amount of tip that the sender would like to give. The median tip","   value of active tippers will be given to the `who`.",""," Emits `NewTip` if successful.",""," # \u003cweight\u003e"," - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.","   - `O(T)`: decoding `Tipper` vec of length `T`","     `T` is charged as upper bound given by `ContainsLengthBound`.","     The actual cost depends on the implementation of `T::Tippers`.","   - `O(R)`: hashing and encoding of reason of length `R`"," - DbReads: `Tippers`, `Reasons`"," - DbWrites: `Reasons`, `Tips`"," # \u003c/weight\u003e"]},{"Name":"tip","Args":[{"Name":"hash","Type":"T::Hash"},{"Name":"tip_value","Type":"Compact\u003cBalanceOf\u003cT\u003e\u003e"}],"Documentation":[" Declare a tip value for an already-open tip.",""," The dispatch origin for this call must be _Signed_ and the signing account must be a"," member of the `Tippers` set.",""," - `hash`: The identity of the open tip for which a tip value is declared. This is formed","   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary","   account ID."," - `tip_value`: The amount of tip that the sender would like to give. The median tip","   value of active tippers will be given to the `who`.",""," Emits `TipClosing` if the threshold of tippers has been reached and the countdown period"," has started.",""," # \u003cweight\u003e"," - Complexity: `O(T)` where `T` is the number of tippers.","   decoding `Tipper` vec of length `T`, insert tip and check closing,","   `T` is charged as upper bound given by `ContainsLengthBound`.","   The actual cost depends on the implementation of `T::Tippers`.","","   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it","   is weighted as if almost full i.e of length `T-1`."," - DbReads: `Tippers`, `Tips`"," - DbWrites: `Tips`"," # \u003c/weight\u003e"]},{"Name":"close_tip","Args":[{"Name":"hash","Type":"T::Hash"}],"Documentation":[" Close and payout a tip.",""," The dispatch origin for this call must be _Signed_.",""," The tip identified by `hash` must have finished its countdown period.",""," - `hash`: The identity of the open tip for which a tip value is declared. This is formed","   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",""," # \u003cweight\u003e"," - Complexity: `O(T)` where `T` is the number of tippers.","   decoding `Tipper` vec of length `T`.","   `T` is charged as upper bound given by `ContainsLengthBound`.","   The actual cost depends on the implementation of `T::Tippers`."," - DbReads: `Tips`, `Tippers`, `tip finder`"," - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`"," # \u003c/weight\u003e"]},{"Name":"slash_tip","Args":[{"Name":"hash","Type":"T::Hash"}],"Documentation":[" Remove and slash an already-open tip.",""," May only be called from `T::RejectOrigin`.",""," As a result, the finder is slashed and the deposits are lost.",""," Emits `TipSlashed` if successful.",""," # \u003cweight\u003e","   `T` is charged as upper bound given by `ContainsLengthBound`.","   The actual cost depends on the implementation of `T::Tippers`."," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"NewTip","Args":["Hash"],"Documentation":[" A new tip suggestion has been opened. \\[tip_hash\\]"]},{"Name":"TipClosing","Args":["Hash"],"Documentation":[" A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"]},{"Name":"TipClosed","Args":["Hash","AccountId","Balance"],"Documentation":[" A tip suggestion has been closed. \\[tip_hash, who, payout\\]"]},{"Name":"TipRetracted","Args":["Hash"],"Documentation":[" A tip suggestion has been retracted. \\[tip_hash\\]"]},{"Name":"TipSlashed","Args":["Hash","AccountId","Balance"],"Documentation":[" A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"]}],"Constants":[{"Name":"TipCountdown","Type":"T::BlockNumber","Value":"IBwAAA==","Documentation":[" The period for which a tip remains open after is has achieved threshold tippers."]},{"Name":"TipFindersFee","Type":"Percent","Value":"FA==","Documentation":[" The amount of the final tip which goes to the original reporter of the tip."]},{"Name":"TipReportDepositBase","Type":"BalanceOf\u003cT\u003e","Value":"ABCl1OgAAAAAAAAAAAAAAA==","Documentation":[" The amount held on deposit for placing a tip report."]},{"Name":"DataDepositPerByte","Type":"BalanceOf\u003cT\u003e","Value":"AOh2SBcAAAAAAAAAAAAAAA==","Documentation":[" The amount held on deposit per byte within the tip report reason."]},{"Name":"MaximumReasonLength","Type":"u32","Value":"AEAAAA==","Documentation":[" Maximum acceptable reason length."]}],"Errors":[{"Name":"ReasonTooBig","Documentation":[" The reason given is just too big."]},{"Name":"AlreadyKnown","Documentation":[" The tip was already found/started."]},{"Name":"UnknownTip","Documentation":[" The tip hash is unknown."]},{"Name":"NotFinder","Documentation":[" The account attempting to retract the tip is not the finder of the tip."]},{"Name":"StillOpen","Documentation":[" The tip cannot be claimed/closed because there are not enough tippers yet."]},{"Name":"Premature","Documentation":[" The tip cannot be claimed/closed because it's still in the countdown period."]}],"Index":63}