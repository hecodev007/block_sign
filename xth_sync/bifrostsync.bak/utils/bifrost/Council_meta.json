{"Name":"Council","HasStorage":true,"Storage":{"Prefix":"Instance1Collective","Items":[{"Name":"Proposals","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"BoundedVec\u003cT::Hash, T::MaxProposals\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The hashes of the active proposals."]},{"Name":"ProposalOf","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"\u003cT as Config\u003cI\u003e\u003e::Proposal","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Actual proposal for a given hash, if it's current."]},{"Name":"Voting","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":false,"AsType":"","IsMap":true,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":true},"Key":"T::Hash","Value":"Votes\u003cT::AccountId, T::BlockNumber\u003e","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" Votes on a given proposal, if it is ongoing."]},{"Name":"ProposalCount","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"u32","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AAAAAA==","Documentation":[" Proposals so far."]},{"Name":"Members","Modifier":{"IsOptional":false,"IsDefault":true,"IsRequired":false},"Type":{"IsType":true,"AsType":"Vec\u003cT::AccountId\u003e","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The current members of the collective. This is stored sorted (just by value)."]},{"Name":"Prime","Modifier":{"IsOptional":true,"IsDefault":false,"IsRequired":false},"Type":{"IsType":true,"AsType":"T::AccountId","IsMap":false,"AsMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key":"","Value":"","Linked":false},"IsDoubleMap":false,"AsDoubleMap":{"Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false},"Key1":"","Key2":"","Value":"","Key2Hasher":{"IsBlake2_128":false,"IsBlake2_256":false,"IsBlake2_128Concat":false,"IsTwox128":false,"IsTwox256":false,"IsTwox64Concat":false,"IsIdentity":false}},"IsNMap":false,"AsNMap":{"Keys":null,"Hashers":null,"Value":""}},"Fallback":"AA==","Documentation":[" The prime member that helps determine the default vote behavior in case of absentations."]}]},"HasCalls":true,"Calls":[{"Name":"set_members","Args":[{"Name":"new_members","Type":"Vec\u003cT::AccountId\u003e"},{"Name":"prime","Type":"Option\u003cT::AccountId\u003e"},{"Name":"old_count","Type":"MemberCount"}],"Documentation":[" Set the collective's membership.",""," - `new_members`: The new member list. Be nice to the chain and provide it sorted."," - `prime`: The prime member whose vote sets the default."," - `old_count`: The upper bound for the previous number of members in storage.","                Used for weight estimation.",""," Requires root origin.",""," NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but","       the weight estimations rely on it to estimate dispatchable weight.",""," # \u003cweight\u003e"," ## Weight"," - `O(MP + N)` where:","   - `M` old-members-count (code- and governance-bounded)","   - `N` new-members-count (code- and governance-bounded)","   - `P` proposals-count (code-bounded)"," - DB:","   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members","   - 1 storage read (codec `O(P)`) for reading the proposals","   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal","   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"," # \u003c/weight\u003e"]},{"Name":"execute","Args":[{"Name":"proposal","Type":"Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Dispatch a proposal from a member using the `Member` origin.",""," Origin must be a member of the collective.",""," # \u003cweight\u003e"," ## Weight"," - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`"," - DB: 1 read (codec `O(M)`) + DB access of `proposal`"," - 1 event"," # \u003c/weight\u003e"]},{"Name":"propose","Args":[{"Name":"threshold","Type":"Compact\u003cMemberCount\u003e"},{"Name":"proposal","Type":"Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Add a new proposal to either be voted on or executed directly.",""," Requires the sender to be member.",""," `threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)"," or put up for voting.",""," # \u003cweight\u003e"," ## Weight"," - `O(B + M + P1)` or `O(B + M + P2)` where:","   - `B` is `proposal` size in bytes (length-fee-bounded)","   - `M` is members-count (code- and governance-bounded)","   - branching is influenced by `threshold` where:","     - `P1` is proposal execution complexity (`threshold \u003c 2`)","     - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)"," - DB:","   - 1 storage read `is_member` (codec `O(M)`)","   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)","   - DB accesses influenced by `threshold`:","     - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)","     - OR proposal insertion (`threshold \u003c= 2`)","       - 1 storage mutation `Proposals` (codec `O(P2)`)","       - 1 storage mutation `ProposalCount` (codec `O(1)`)","       - 1 storage write `ProposalOf` (codec `O(B)`)","       - 1 storage write `Voting` (codec `O(M)`)","   - 1 event"," # \u003c/weight\u003e"]},{"Name":"vote","Args":[{"Name":"proposal","Type":"T::Hash"},{"Name":"index","Type":"Compact\u003cProposalIndex\u003e"},{"Name":"approve","Type":"bool"}],"Documentation":[" Add an aye or nay vote for the sender to the given proposal.",""," Requires the sender to be a member.",""," Transaction fees will be waived if the member is voting on any particular proposal"," for the first time and the call is successful. Subsequent vote changes will charge a fee."," # \u003cweight\u003e"," ## Weight"," - `O(M)` where `M` is members-count (code- and governance-bounded)"," - DB:","   - 1 storage read `Members` (codec `O(M)`)","   - 1 storage mutation `Voting` (codec `O(M)`)"," - 1 event"," # \u003c/weight\u003e"]},{"Name":"close","Args":[{"Name":"proposal_hash","Type":"T::Hash"},{"Name":"index","Type":"Compact\u003cProposalIndex\u003e"},{"Name":"proposal_weight_bound","Type":"Compact\u003cWeight\u003e"},{"Name":"length_bound","Type":"Compact\u003cu32\u003e"}],"Documentation":[" Close a vote that is either approved, disapproved or whose voting period has ended.",""," May be called by any signed account in order to finish voting and close the proposal.",""," If called before the end of the voting period it will only close the vote if it is"," has enough votes to be approved or disapproved.",""," If called after the end of the voting period abstentions are counted as rejections"," unless there is a prime member set and the prime member cast an approval.",""," If the close operation completes successfully with disapproval, the transaction fee will"," be waived. Otherwise execution of the approved operation will be charged to the caller.",""," + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal."," + `length_bound`: The upper bound for the length of the proposal in storage. Checked via","                   `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",""," # \u003cweight\u003e"," ## Weight"," - `O(B + M + P1 + P2)` where:","   - `B` is `proposal` size in bytes (length-fee-bounded)","   - `M` is members-count (code- and governance-bounded)","   - `P1` is the complexity of `proposal` preimage.","   - `P2` is proposal-count (code-bounded)"," - DB:","  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)","  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)","  - any mutations done while executing `proposal` (`P1`)"," - up to 3 events"," # \u003c/weight\u003e"]},{"Name":"disapprove_proposal","Args":[{"Name":"proposal_hash","Type":"T::Hash"}],"Documentation":[" Disapprove a proposal, close, and remove it from the system, regardless of its current state.",""," Must be called by the Root origin.",""," Parameters:"," * `proposal_hash`: The hash of the proposal that should be disapproved.",""," # \u003cweight\u003e"," Complexity: O(P) where P is the number of max proposals"," DB Weight:"," * Reads: Proposals"," * Writes: Voting, Proposals, ProposalOf"," # \u003c/weight\u003e"]}],"HasEvents":true,"Events":[{"Name":"Proposed","Args":["AccountId","ProposalIndex","Hash","MemberCount"],"Documentation":[" A motion (given hash) has been proposed (by given account) with a threshold (given"," `MemberCount`)."," \\[account, proposal_index, proposal_hash, threshold\\]"]},{"Name":"Voted","Args":["AccountId","Hash","bool","MemberCount","MemberCount"],"Documentation":[" A motion (given hash) has been voted on by given account, leaving"," a tally (yes votes and no votes given respectively as `MemberCount`)."," \\[account, proposal_hash, voted, yes, no\\]"]},{"Name":"Approved","Args":["Hash"],"Documentation":[" A motion was approved by the required threshold."," \\[proposal_hash\\]"]},{"Name":"Disapproved","Args":["Hash"],"Documentation":[" A motion was not approved by the required threshold."," \\[proposal_hash\\]"]},{"Name":"Executed","Args":["Hash","DispatchResult"],"Documentation":[" A motion was executed; result will be `Ok` if it returned without error."," \\[proposal_hash, result\\]"]},{"Name":"MemberExecuted","Args":["Hash","DispatchResult"],"Documentation":[" A single member did some action; result will be `Ok` if it returned without error."," \\[proposal_hash, result\\]"]},{"Name":"Closed","Args":["Hash","MemberCount","MemberCount"],"Documentation":[" A proposal was closed because its threshold was reached or after its duration was up."," \\[proposal_hash, yes, no\\]"]}],"Constants":null,"Errors":[{"Name":"NotMember","Documentation":[" Account is not a member"]},{"Name":"DuplicateProposal","Documentation":[" Duplicate proposals not allowed"]},{"Name":"ProposalMissing","Documentation":[" Proposal must exist"]},{"Name":"WrongIndex","Documentation":[" Mismatched index"]},{"Name":"DuplicateVote","Documentation":[" Duplicate vote ignored"]},{"Name":"AlreadyInitialized","Documentation":[" Members are already initialized!"]},{"Name":"TooEarly","Documentation":[" The close call was made too early, before the end of the voting."]},{"Name":"TooManyProposals","Documentation":[" There can only be a maximum of `MaxProposals` active proposals."]},{"Name":"WrongProposalWeight","Documentation":[" The given weight bound for the proposal was too low."]},{"Name":"WrongProposalLength","Documentation":[" The given length bound for the proposal was too low."]}],"Index":31}