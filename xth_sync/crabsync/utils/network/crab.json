{
  "U256": "[u8; 32]",
  "H128": "[u8; 16]",
  "TsInMs": "u64",
  "RingBalance": "Balance",
  "KtonBalance": "Balance",
  "MomentT": "Moment",
  "Power": "u32",
  "DepositId": "U256",
  "EthBlockNumber": "u64",
  "EthereumBlockNumber": "u64",
  "EthAddress": "H160",
  "EthTransactionIndex": "(H256, u64)",
  "EthereumTransactionIndex": "(H256, u64)",
  "BalanceInfo": "null",
  "AddressT": "EthereumAddress",
  "TronAddress": "EthereumAddress",
  "Bloom": "[u8; 256]",
  "H": "Hash",
  "Address": "AccountId",
  "LookupSource": "AccountId",
  "EthereumAddress": "H160",
  "MappedRing": "u128",
  "Keys": {
    "type": "struct",
    "type_mapping": [
      [
        "babe",
        "AccountId"
      ],
      [
        "grandpa",
        "AccountId"
      ],
      [
        "im_online",
        "AccountId"
      ],
      [
        "authority_discovery",
        "AccountId"
      ]
    ]
  },
  "Weight": "u64",
  "ModuleId": "[u8; 8]",
  "RuntimeDbWeight": {
    "type": "struct",
    "type_mapping": [
      [
        "read",
        "u128"
      ],
      [
        "read",
        "write"
      ]
    ]
  },
  "SpanRecord": {
    "type": "struct",
    "type_mapping": [
      [
        "slashed",
        "RKT"
      ],
      [
        "paid_out",
        "RKT"
      ]
    ]
  },
  "StakingRuntimeDispatchInfo": {
    "type": "struct",
    "type_mapping": [
      [
        "power",
        "Power"
      ]
    ]
  },
  "BalancesRuntimeDispatchInfo": {
    "type": "struct",
    "type_mapping": [
      [
        "usable_balance",
        "Balance"
      ]
    ]
  },
  "StakingBalance": {
    "type": "enum",
    "type_mapping": [
      [
        "RingBalance",
        "Balance"
      ],
      [
        "KtonBalance",
        "Balance"
      ]
    ]
  },
  "StakingLedger": {
    "type": "struct",
    "type_mapping": [
      [
        "stash",
        "AccountId"
      ],
      [
        "active_ring",
        "Compact<Balance>"
      ],
      [
        "active_deposit_ring",
        "Compact<Balance>"
      ],
      [
        "active_kton",
        "Compact<Balance>"
      ],
      [
        "deposit_items",
        "Vec<TimeDepositItem>"
      ],
      [
        "ring_staking_lock",
        "StakingLock"
      ],
      [
        "kton_staking_lock",
        "StakingLock"
      ],
      [
        "last_reward",
        "Option<EraIndex>"
      ]
    ]
  },
  "TimeDepositItem": {
    "type": "struct",
    "type_mapping": [
      [
        "value",
        "Compact<Balance>"
      ],
      [
        "start_time",
        "Compact<TsInMs>"
      ],
      [
        "expire_time",
        "Compact<TsInMs>"
      ]
    ]
  },
  "Staked": {
    "type": "struct",
    "type_mapping": [
      [
        "promise_month",
        "u8"
      ]
    ]
  },
  "Exposure": {
    "type": "struct",
    "type_mapping": [
      [
        "own_ring_balance",
        "Compact<Balance>"
      ],
      [
        "own_kton_balance",
        "Compact<Balance>"
      ],
      [
        "own_power",
        "Power"
      ],
      [
        "total_power",
        "Power"
      ],
      [
        "others",
        "Vec<IndividualExposure>"
      ]
    ]
  },
  "IndividualExposure": {
    "type": "struct",
    "type_mapping": [
      [
        "who",
        "AccountId"
      ],
      [
        "ring_balance",
        "Compact<Balance>"
      ],
      [
        "kton_balance",
        "Compact<Balance>"
      ],
      [
        "power",
        "Power"
      ]
    ]
  },
  "ValidatorReward": {
    "type": "struct",
    "type_mapping": [
      [
        "who",
        "AccountId"
      ],
      [
        "amount",
        "Compact<Balance>"
      ],
      [
        "nominators_reward",
        "Vec<NominatorReward>"
      ]
    ]
  },
  "NominatorReward": {
    "type": "struct",
    "type_mapping": [
      [
        "who",
        "AccountId"
      ],
      [
        "amount",
        "Compact<Balance>"
      ]
    ]
  },
  "RK": {
    "type": "struct",
    "type_mapping": [
      [
        "r",
        "Balance"
      ],
      [
        "k",
        "Balance"
      ]
    ]
  },
  "BalanceLock<Balance, BlockNumber>": {
    "type": "struct",
    "type_mapping": [
      [
        "id",
        "LockIdentifier"
      ],
      [
        "lock_for",
        "LockFor"
      ],
      [
        "lock_reasons",
        "LockReasons"
      ]
    ]
  },
  "LockFor": {
    "type": "enum",
    "type_mapping": [
      [
        "Common",
        "Common"
      ],
      [
        "Staking",
        "StakingLock"
      ]
    ]
  },
  "Common": {
    "type": "struct",
    "type_mapping": [
      [
        "amount",
        "Balance"
      ]
    ]
  },
  "StakingLock": {
    "type": "struct",
    "type_mapping": [
      [
        "staking_amount",
        "Balance"
      ],
      [
        "unbondings",
        "Vec<Unbonding>"
      ]
    ]
  },
  "LockReasons": {
    "type": "enum",
    "type_mapping": [
      [
        "Fee",
        "null"
      ],
      [
        "Misc",
        "null"
      ],
      [
        "All",
        "null"
      ]
    ]
  },
  "AccountData": {
    "type": "struct",
    "type_mapping": [
      [
        "free",
        "Balance"
      ],
      [
        "reserved",
        "Balance"
      ],
      [
        "free_kton",
        "Balance"
      ],
      [
        "reserved_kton",
        "Balance"
      ]
    ]
  },
  "EthHeaderBrief": {
    "type": "struct",
    "type_mapping": [
      [
        "total_difficulty",
        "U256"
      ],
      [
        "parent_hash",
        "H256"
      ],
      [
        "number",
        "EthBlockNumber"
      ],
      [
        "relayer",
        "AccountId"
      ]
    ]
  },
  "EthereumHeader": {
    "type": "struct",
    "type_mapping": [
      [
        "parent_hash",
        "H256"
      ],
      [
        "timestamp",
        "u64"
      ],
      [
        "number",
        "EthereumBlockNumber"
      ],
      [
        "author",
        "EthereumAddress"
      ],
      [
        "transactions_root",
        "H256"
      ],
      [
        "uncles_hash",
        "H256"
      ],
      [
        "extra_data",
        "Bytes"
      ],
      [
        "state_root",
        "H256"
      ],
      [
        "receipts_root",
        "H256"
      ],
      [
        "log_bloom",
        "Bloom"
      ],
      [
        "gas_used",
        "U256"
      ],
      [
        "gas_limit",
        "U256"
      ],
      [
        "difficulty",
        "U256"
      ],
      [
        "seal",
        "Vec<Bytes>"
      ],
      [
        "hash",
        "Option<H256>"
      ]
    ]
  },
  "EthHeaderBrief::<AccountId>": "EthHeaderBrief",
  "HeaderInfo": {
    "type": "struct",
    "type_mapping": [
      [
        "total_difficulty",
        "U256"
      ],
      [
        "parent_hash",
        "H256"
      ],
      [
        "number",
        "EthBlockNumber"
      ]
    ]
  },
  "EthHeader": {
    "type": "struct",
    "type_mapping": [
      [
        "parent_hash",
        "H256"
      ],
      [
        "timestamp",
        "u64"
      ],
      [
        "number",
        "EthBlockNumber"
      ],
      [
        "auth",
        "EthAddress"
      ],
      [
        "transaction_root",
        "H256"
      ],
      [
        "uncles_hash",
        "H256"
      ],
      [
        "extra_data",
        "Bytes"
      ],
      [
        "state_root",
        "H256"
      ],
      [
        "receipts_root",
        "H256"
      ],
      [
        "log_bloom",
        "Bloom"
      ],
      [
        "gas_used",
        "U256"
      ],
      [
        "gas_limit",
        "U256"
      ],
      [
        "difficulty",
        "U256"
      ],
      [
        "seal",
        "Vec<Bytes>"
      ],
      [
        "hash",
        "Option<H256>"
      ]
    ]
  },
  "Receipt": {
    "type": "struct",
    "type_mapping": [
      [
        "gas_used",
        "U256"
      ],
      [
        "log_bloom",
        "Bloom"
      ],
      [
        "logs",
        "Vec<LogEntry>"
      ],
      [
        "outcome",
        "TransactionOutcome"
      ]
    ]
  },
  "EthereumReceipt": "Receipt",
  "EthReceiptProof": {
    "type": "struct",
    "type_mapping": [
      [
        "index",
        "u64"
      ],
      [
        "proof",
        "Bytes"
      ],
      [
        "header_hash",
        "H256"
      ]
    ]
  },
  "EthNetworkType": {
    "type": "enum",
    "type_mapping": [
      [
        "Mainnet",
        "null"
      ],
      [
        "Ropsten",
        "null"
      ]
    ]
  },
  "RedeemFor": {
    "type": "enum",
    "type_mapping": [
      [
        "Token",
        "NULL"
      ],
      [
        "Deposit",
        "NULL"
      ]
    ]
  },
  "EthereumReceiptProofThing": "(EthereumHeader, EthereumReceiptProof, MMRProof)",
  "OtherSignature": {
    "type": "enum",
    "type_mapping": [
      [
        "Eth",
        "EcdsaSignature"
      ],
      [
        "Tron",
        "EcdsaSignature"
      ]
    ]
  },
  "OtherAddress": {
    "type": "enum",
    "type_mapping": [
      [
        "Eth",
        "EthereumAddress"
      ],
      [
        "Tron",
        "EthereumAddress"
      ]
    ]
  },
  "MerkleMountainRangeRoot": {
    "type": "struct",
    "type_mapping": [
      [
        "data",
        "Hash"
      ]
    ]
  },
  "MerkleMountainRangeRootLog": {
    "type": "struct",
    "type_mapping": [
      [
        "prefix",
        "[u8; 4]"
      ],
      [
        "mmr_root",
        "Hash"
      ]
    ]
  },
  "DoubleNodeWithMerkleProof": {
    "type": "struct",
    "type_mapping": [
      [
        "dag_nodes",
        "[H512; 2]"
      ],
      [
        "proof",
        "Vec<H128>"
      ]
    ]
  },
  "StakingBalanceT": {
    "type": "enum",
    "type_mapping": [
      [
        "RingBalance",
        "Balance"
      ],
      [
        "KtonBalance",
        "Balance"
      ]
    ]
  },
  "StakingLedgerT": {
    "type": "struct",
    "type_mapping": [
      [
        "stash",
        "AccountId"
      ],
      [
        "active_ring",
        "Compact<Balance>"
      ],
      [
        "active_deposit_ring",
        "Compact<Balance>"
      ],
      [
        "active_kton",
        "Compact<Balance>"
      ],
      [
        "deposit_items",
        "Vec<TimeDepositItem>"
      ],
      [
        "ring_staking_lock",
        "StakingLock"
      ],
      [
        "kton_staking_lock",
        "StakingLock"
      ],
      [
        "claimed_rewards",
        "Vec<EraIndex>"
      ]
    ]
  },
  "ExposureT": {
    "type": "struct",
    "type_mapping": [
      [
        "own_ring_balance",
        "Compact<Balance>"
      ],
      [
        "own_kton_balance",
        "Compact<Balance>"
      ],
      [
        "own_power",
        "Power"
      ],
      [
        "total_power",
        "Power"
      ],
      [
        "others",
        "Vec<IndividualExposure>"
      ]
    ]
  },
  "FullIdentification": {
    "type": "struct",
    "type_mapping": [
      [
        "own_ring_balance",
        "Compact<Balance>"
      ],
      [
        "own_kton_balance",
        "Compact<Balance>"
      ],
      [
        "own_power",
        "Power"
      ],
      [
        "total_power",
        "Power"
      ],
      [
        "others",
        "Vec<IndividualExposure>"
      ]
    ]
  },
  "RKT": {
    "type": "struct",
    "type_mapping": [
      [
        "r",
        "Balance"
      ],
      [
        "k",
        "Balance"
      ]
    ]
  },
  "DispatchResult": {
    "type": "enum",
    "type_mapping": [
      [
        "Ok",
        "Null"
      ],
      [
        "Error",
        "DispatchError"
      ]
    ]
  },
  "OpenTip<AccountId, RingBalance, BlockNumber, Hash>": {
    "type": "struct",
    "type_mapping": [
      [
        "reason",
        "Hash"
      ],
      [
        "who",
        "AccountId"
      ],
      [
        "finder",
        "Option<OpenTipFinder>"
      ],
      [
        "closes",
        "Option<BlockNumber>"
      ],
      [
        "tips",
        "Vec<OpenTipTip>"
      ]
    ]
  },
  "slashing::SpanRecord<RingBalance, KtonBalance>": "SpanRecord",
  "slashing::RKT": "RKT",
  "MMRHash": "Vec<u8>",
  "RawHeaderThing": "Vec<u8>",
  "EthereumNetworkType": "EthNetworkType",
  "EthashProof": "DoubleNodeWithMerkleProof",
  "MMRProof": "Vec<H256>",
  "MMRProof#11-?": {
    "type": "struct",
    "type_mapping": [
      [
        "member_leaf_index",
        "u64"
      ],
      [
        "last_leaf_index",
        "u64"
      ],
      [
        "proof",
        "Vec<H256>"
      ]
    ]
  },
  "Proposal": {
    "type": "struct",
    "type_mapping": [
      [
        "proposer",
        "AccountId"
      ],
      [
        "beneficiary",
        "AccountId"
      ],
      [
        "ring_value",
        "Balance"
      ],
      [
        "kton_value",
        "Balance"
      ],
      [
        "ring_bond",
        "Balance"
      ],
      [
        "kton_bond",
        "Balance"
      ]
    ]
  },
  "UnappliedSlash": {
    "type": "struct",
    "type_mapping": [
      [
        "validator",
        "AccountId"
      ],
      [
        "own",
        "RKT"
      ],
      [
        "others",
        "Vec<(AccountId, RKT)>"
      ],
      [
        "reporters",
        "Vec<AccountId>"
      ],
      [
        "payout",
        "RKT"
      ]
    ]
  },
  "ElectionResultT": {
    "type": "struct",
    "type_mapping": [
      [
        "elected_stashes",
        "Vec<AccountId>"
      ],
      [
        "exposures",
        "Vec<(AccountId, ExposureT)>"
      ],
      [
        "compute",
        "ElectionCompute"
      ]
    ]
  },
  "EthereumReceiptProof": {
    "type": "struct",
    "type_mapping": [
      [
        "index",
        "u64"
      ],
      [
        "proof",
        "Bytes"
      ],
      [
        "header_hash",
        "H256"
      ]
    ]
  },
  "Unbonding": {
    "type": "struct",
    "type_mapping": [
      [
        "amount",
        "Balance"
      ],
      [
        "moment",
        "BlockNumber"
      ]
    ]
  },
  "RelayVotingState": {
    "type": "struct",
    "type_mapping": [
      [
        "ayes",
        "Vec<AccountId>"
      ],
      [
        "nays",
        "Vec<AccountId>"
      ]
    ]
  },
  "TcHeaderMMR": "Vec<u8>",
  "CompactAssignments#17-?": "CompactAssignmentsLatest",
  "ProxyType": {
    "type": "enum",
    "value_list": [
      "Any",
      "NonTransfer",
      "Governance",
      "Staking",
      "IdentityJudgement",
      "EthereumBridge"
    ]
  },
  "TreasuryProposal": {
    "type": "struct",
    "type_mapping": [
      [
        "proposer",
        "AccountId"
      ],
      [
        "beneficiary",
        "AccountId"
      ],
      [
        "ring_value",
        "Balance"
      ],
      [
        "kton_value",
        "Balance"
      ],
      [
        "ring_bond",
        "Balance"
      ],
      [
        "kton_bond",
        "Balance"
      ]
    ]
  },
  "RefCount#21-?": "u32",
  "EthereumRelayHeaderParcel": {
    "type": "struct",
    "type_mapping": [
      [
        "header",
        "EthereumHeader"
      ],
      [
        "mmr_root",
        "H256"
      ]
    ]
  },
  "EthereumRelayProofs": {
    "type": "struct",
    "type_mapping": [
      [
        "ethash_proof",
        "Vec<EthashProof>"
      ],
      [
        "mmr_proof",
        "Vec<H256>"
      ]
    ]
  },
  "RelayHeaderId": "EthereumBlockNumber",
  "RelayHeaderParcel": "EthereumRelayHeaderParcel",
  "RelayProofs": "EthereumRelayProofs",
  "RelayAffirmationId": {
    "type": "struct",
    "type_mapping": [
      [
        "game_id",
        "EthereumBlockNumber"
      ],
      [
        "round",
        "u32"
      ],
      [
        "index",
        "u32"
      ]
    ]
  },
  "RelayAffirmationT": {
    "type": "struct",
    "type_mapping": [
      [
        "relayer",
        "AccountId"
      ],
      [
        "relay_header_parcels",
        "EthereumRelayHeaderParcel"
      ],
      [
        "bond",
        "Balance"
      ],
      [
        "maybe_extended_relay_affirmation_id",
        "Option<RelayAffirmationId>"
      ],
      [
        "verified",
        "bool"
      ]
    ]
  },
  "Signer": "EthereumAddress",
  "RelayAuthorityT": {
    "type_mapping": [
      [
        "accountId",
        "AccountId"
      ],
      [
        "signer",
        "Signer"
      ],
      [
        "stake",
        "Balance"
      ],
      [
        "term",
        "BlockNumber"
      ]
    ],
    "type": "struct"
  },
  "MMRRoot": "Hash",
  "EcdsaAddress": "EthereumAddress",
  "EcdsaSignature": "[u8; 65]",
  "EcdsaMessage": "H256",
  "RelayAuthoritySigner": "EcdsaAddress",
  "RelayAuthorityMessage": "EcdsaMessage",
  "RelayAuthoritySignature": "EcdsaSignature",
  "RelayAuthoritySignature<T, I>": "EcdsaSignature",
  "Term": "u32",
  "OpCode": "[u8; 4]",
  "ScheduledAuthoritiesChange": {
    "type_mapping": [
      [
        "next_authorities",
        "Vec<RelayAuthorityT>"
      ],
      [
        "deadline",
        "BlockNumber"
      ]
    ],
    "type": "struct"
  },
  "ScheduledAuthoritiesChangeT": "ScheduledAuthoritiesChange",
  "AccountInfo#42-42": "AccountInfoWithProviders",
  "Address#42-?": "MultiAddress",
  "LookupSource#42-?": "MultiAddress",
  "ValidatorPrefs#42-?": "ValidatorPrefsWithBlocked",
  "AccountInfo#43-?": "AccountInfoWithTripleRefCount",
  "ExitReason": {
    "type": "enum",
    "type_mapping": [
      [
        "Succeed",
        "ExitSucceed"
      ],
      [
        "Error",
        "ExitError"
      ],
      [
        "Revert",
        "ExitRevert"
      ],
      [
        "Fatal",
        "ExitFatal"
      ]
    ]
  },
  "ExitSucceed": {
    "type": "enum",
    "value_list": [
      "Stopped",
      "Returned",
      "Suicided"
    ]
  },
  "ExitError": {
    "type": "enum",
    "type_mapping": [
      [
        "StackUnderflow",
        "NULL"
      ],
      [
        "StackOverflow",
        "NULL"
      ],
      [
        "InvalidJump",
        "NULL"
      ],
      [
        "InvalidRange",
        "NULL"
      ],
      [
        "DesignatedInvalid",
        "NULL"
      ],
      [
        "CallTooDeep",
        "NULL"
      ],
      [
        "CreateCollision",
        "NULL"
      ],
      [
        "CreateContractLimit",
        "NULL"
      ],
      [
        "OutOfOffset",
        "NULL"
      ],
      [
        "OutOfGas",
        "NULL"
      ],
      [
        "OutOfFund",
        "NULL"
      ],
      [
        "PCUnderflow",
        "NULL"
      ],
      [
        "CreateEmpty",
        "NULL"
      ],
      [
        "Other",
        "string"
      ]
    ]
  },
  "ExitFatal": {
    "type": "enum",
    "type_mapping": [
      [
        "NotSupported",
        "NULL"
      ],
      [
        "UnhandledInterrupt",
        "NULL"
      ],
      [
        "CallErrorAsFatal",
        "NULL"
      ],
      [
        "Other",
        "string"
      ]
    ]
  },
  "BlockTransactions": {
    "type": "enum",
    "type_mapping": [
      [
        "Hashes",
        "Vec<H256>"
      ],
      [
        "Full",
        "Vec<ethereum::Transaction>"
      ]
    ]
  },
  "ExitRevert": {
    "type": "enum",
    "value_list": [
      "Reverted"
    ]
  },
  "ethereum::Block": {
    "type": "struct",
    "type_mapping": [
      [
        "hash",
        "Option<H256>"
      ],
      [
        "parent_hash",
        "H256"
      ],
      [
        "uncles_hash",
        "H256"
      ],
      [
        "author",
        "H160"
      ],
      [
        "miner",
        "H160"
      ],
      [
        "state_root",
        "H256"
      ],
      [
        "transactions_root",
        "H256"
      ],
      [
        "receipts_root",
        "H256"
      ],
      [
        "number",
        "Option<U256>"
      ],
      [
        "gas_used",
        "U256"
      ],
      [
        "gas_limit",
        "U256"
      ],
      [
        "extra_data",
        "Bytes"
      ],
      [
        "logs_bloom",
        "Option<H2048>"
      ],
      [
        "timestamp",
        "U256"
      ],
      [
        "difficulty",
        "U256"
      ],
      [
        "total_difficulty",
        "Option<U256>"
      ],
      [
        "seal_fields",
        "Vec<Bytes>"
      ],
      [
        "uncles",
        "Vec<H256>"
      ],
      [
        "transactions",
        "BlockTransactions"
      ],
      [
        "size",
        "Option<U256>"
      ]
    ]
  },
  "TransactionAction": {
    "type": "enum",
    "type_mapping": [
      [
        "Call",
        "H160"
      ],
      [
        "Create",
        "NULL"
      ]
    ]
  },
  "Log": {
    "type": "struct",
    "type_mapping": [
      [
        "address",
        "H160"
      ],
      [
        "topics",
        "Vec<H256>"
      ],
      [
        "data",
        "Vec<u8>"
      ]
    ]
  },
  "TransactionSignature": {
    "type": "struct",
    "type_mapping": [
      [
        "v",
        "TransactionRecoveryId"
      ],
      [
        "r",
        "H256"
      ],
      [
        "s",
        "H256"
      ]
    ]
  },
  "TransactionRecoveryId": "U64",
  "NodeIndex": "u64",
  "MmrNodesPruningConfiguration": {
    "type_mapping": [
      [
        "step",
        "NodeIndex"
      ],
      [
        "progress",
        "NodeIndex"
      ],
      [
        "last_position",
        "NodeIndex"
      ]
    ],
    "type": "struct"
  },
  "BlockNumberFor": "BlockNumber"
}
