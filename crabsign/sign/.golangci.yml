# options for analysis running
run:
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  # timeout: 1m

  # exit code when at least one issue was found, default is 1
  # issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  skip-dirs:
    - gethrpc
    - scale
    # - src/external_libs
    # - autogenerated_by_my_lib

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - types/metadataV[0-9]+_examplary.go
    - types/metadataV[0-9]+_examplary_string.go
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor

linters:
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - bodyclose
    - deadcode
    - dupl
    - errcheck
    # - funlen - TODO: enable it when golangci.com will support it.
    # - godox - TODO: enable it when golangci.com will support it.
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - golint
    - gosec
    - gosimple
    - govet
    - ineffassign
    - interfacer
    - lll
    - misspell
    - nakedret
    - scopelint
    - staticcheck
    - structcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    # - whitespace - TODO: enable it when golangci.com will support it.

  # don't enable:
  # - depguard - until https://github.com/OpenPeeDeeP/depguard/issues/7 gets fixed
  # - maligned,prealloc
  # - gochecknoglobals

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: rpc/chain/subscribe_finalized_heads.go
      linters:
        - dupl
    - path: rpc/chain/subscribe_new_heads.go
      linters:
        - dupl
    - path: scale
      text: ".*"
    - path: types/digest.go
      linters:
        - dupl
    - path: types/digest_of.go
      linters:
        - dupl
    - path: types/int.go
      linters:
        - dupl
    - path: types/uint.go
      linters:
        - dupl
    - path: types/metadataV8.go
      linters:
        - dupl
    - path: types/metadataV10.go
      linters:
        - dupl
    - path: types/option_int.go
      linters:
        - dupl
    - path: types/option_uint.go
      linters:
        - dupl
    - path: types/data_test.go
      linters:
        - dupl
    - path: types/storage_data_raw_test.go
      linters:
        - dupl
    - path: doc.go
      linters:
        - lll
    - path: types/example_tuple_test.go
      linters:
        - lll
    - path: gethrpc
      text: ".*"
